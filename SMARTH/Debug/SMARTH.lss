
SMARTH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00800060  00004d40  00004dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800208  00800208  00004f7c  2**0
                  ALLOC
  3 .stab         000046c8  00000000  00000000  00004f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ac6  00000000  00000000  00009644  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b10a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b2aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b49c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ec2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fe04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ffc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000102ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010c28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__vector_1>
       8:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__vector_2>
       c:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_10>
      2c:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 23 	call	0x464c	; 0x464c <main>
      8a:	0c 94 9e 26 	jmp	0x4d3c	; 0x4d3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 eb 25 	jmp	0x4bd6	; 0x4bd6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ed       	ldi	r26, 0xD6	; 214
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 eb 25 	jmp	0x4bd6	; 0x4bd6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ed       	ldi	r24, 0xD6	; 214
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 07 26 	jmp	0x4c0e	; 0x4c0e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 ed       	ldi	r22, 0xD6	; 214
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0f 26 	jmp	0x4c1e	; 0x4c1e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fb 25 	jmp	0x4bf6	; 0x4bf6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 17 26 	jmp	0x4c2e	; 0x4c2e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 0f 26 	jmp	0x4c1e	; 0x4c1e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 52       	subi	r30, 0x22	; 34
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <M_TIMER1_void_Init>:
#include "TIMER1_int.h"

static void (*ICU_CallBackPtr)(void)=NULL;

void M_TIMER1_void_Init()//mode normal  ,prescaler
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	//set mood   as normal

	CLR_BIT(TCCR1A_REG,WGM10_BIT);
     e36:	af e4       	ldi	r26, 0x4F	; 79
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e4       	ldi	r30, 0x4F	; 79
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8e 7f       	andi	r24, 0xFE	; 254
     e42:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_REG,WGM11_BIT);
     e44:	af e4       	ldi	r26, 0x4F	; 79
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ef e4       	ldi	r30, 0x4F	; 79
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8d 7f       	andi	r24, 0xFD	; 253
     e50:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B_REG,WGM12_BIT );
     e52:	ae e4       	ldi	r26, 0x4E	; 78
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ee e4       	ldi	r30, 0x4E	; 78
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	87 7f       	andi	r24, 0xF7	; 247
     e5e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,WGM13_BIT);
     e60:	ae e4       	ldi	r26, 0x4E	; 78
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ee e4       	ldi	r30, 0x4E	; 78
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8f 7e       	andi	r24, 0xEF	; 239
     e6c:	8c 93       	st	X, r24

	//step 2: set prescaler as 256
	CLR_BIT(TCCR1B_REG ,CS10_BIT);
     e6e:	ae e4       	ldi	r26, 0x4E	; 78
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	ee e4       	ldi	r30, 0x4E	; 78
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG ,CS11_BIT);
     e7c:	ae e4       	ldi	r26, 0x4E	; 78
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ee e4       	ldi	r30, 0x4E	; 78
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8d 7f       	andi	r24, 0xFD	; 253
     e88:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG ,CS12_BIT);
     e8a:	ae e4       	ldi	r26, 0x4E	; 78
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ee e4       	ldi	r30, 0x4E	; 78
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	84 60       	ori	r24, 0x04	; 4
     e96:	8c 93       	st	X, r24

}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <M_TIMER1_ICU_void_Init>:
void M_TIMER1_ICU_void_Init()//setup initial trigger for ICU
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
	//set initial trigger as  rising
 SET_BIT(TCCR1B_REG,ICES1_BIT);
     ea6:	ae e4       	ldi	r26, 0x4E	; 78
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ee e4       	ldi	r30, 0x4E	; 78
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 64       	ori	r24, 0x40	; 64
     eb2:	8c 93       	st	X, r24
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <M_TIMER1_ICU_void_INTEnable>:
void M_TIMER1_ICU_void_INTEnable(void)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
//set interrupt
	SET_BIT(TIMSK_REG,TICIE1_BIT);
     ec2:	a9 e5       	ldi	r26, 0x59	; 89
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e9 e5       	ldi	r30, 0x59	; 89
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	80 62       	ori	r24, 0x20	; 32
     ece:	8c 93       	st	X, r24
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <M_TIMER1_ICU_void_INTDisable>:
void M_TIMER1_ICU_void_INTDisable(void)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(TIMSK_REG,TICIE1_BIT);
     ede:	a9 e5       	ldi	r26, 0x59	; 89
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e9 e5       	ldi	r30, 0x59	; 89
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 7d       	andi	r24, 0xDF	; 223
     eea:	8c 93       	st	X, r24
}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <M_TIMER1_ICU_void_setTrigg>:
void M_TIMER1_ICU_void_setTrigg(u8 copy_u8Trigg)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <M_TIMER1_ICU_void_setTrigg+0x6>
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	89 83       	std	Y+1, r24	; 0x01
   switch (copy_u8Trigg)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3b 83       	std	Y+3, r19	; 0x03
     f08:	2a 83       	std	Y+2, r18	; 0x02
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	9b 81       	ldd	r25, Y+3	; 0x03
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	31 f0       	breq	.+12     	; 0xf1e <M_TIMER1_ICU_void_setTrigg+0x2c>
     f12:	2a 81       	ldd	r18, Y+2	; 0x02
     f14:	3b 81       	ldd	r19, Y+3	; 0x03
     f16:	21 30       	cpi	r18, 0x01	; 1
     f18:	31 05       	cpc	r19, r1
     f1a:	49 f0       	breq	.+18     	; 0xf2e <M_TIMER1_ICU_void_setTrigg+0x3c>
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <M_TIMER1_ICU_void_setTrigg+0x4a>
   {
   case TIMER1_ICU_FALL_TRIGG:
   CLR_BIT(TCCR1B_REG,ICES1_BIT);
     f1e:	ae e4       	ldi	r26, 0x4E	; 78
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ee e4       	ldi	r30, 0x4E	; 78
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8f 7b       	andi	r24, 0xBF	; 191
     f2a:	8c 93       	st	X, r24
     f2c:	07 c0       	rjmp	.+14     	; 0xf3c <M_TIMER1_ICU_void_setTrigg+0x4a>
	    break;
   case TIMER1_ICU_RISING_TRIGG:
	   SET_BIT(TCCR1B_REG,ICES1_BIT);
     f2e:	ae e4       	ldi	r26, 0x4E	; 78
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	ee e4       	ldi	r30, 0x4E	; 78
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	80 64       	ori	r24, 0x40	; 64
     f3a:	8c 93       	st	X, r24
   	   break;
   }
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <M_TIMER1_ICU_u16_takeReading>:
u16 M_TIMER1_ICU_u16_takeReading(void)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
     f50:	e6 e4       	ldi	r30, 0x46	; 70
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <M_TIMER1_ICU_void_setCallback>:
void M_TIMER1_ICU_void_setCallback(void(*ptrfn)(void))
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <M_TIMER1_ICU_void_setCallback+0x6>
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
	if(ptrfn != NULL)
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	31 f0       	breq	.+12     	; 0xf80 <M_TIMER1_ICU_void_setCallback+0x22>
	{
		ICU_CallBackPtr=ptrfn;
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	9a 81       	ldd	r25, Y+2	; 0x02
     f78:	90 93 09 02 	sts	0x0209, r25
     f7c:	80 93 08 02 	sts	0x0208, r24
	}

}
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
     f8a:	1f 92       	push	r1
     f8c:	0f 92       	push	r0
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	0f 92       	push	r0
     f92:	11 24       	eor	r1, r1
     f94:	2f 93       	push	r18
     f96:	3f 93       	push	r19
     f98:	4f 93       	push	r20
     f9a:	5f 93       	push	r21
     f9c:	6f 93       	push	r22
     f9e:	7f 93       	push	r23
     fa0:	8f 93       	push	r24
     fa2:	9f 93       	push	r25
     fa4:	af 93       	push	r26
     fa6:	bf 93       	push	r27
     fa8:	ef 93       	push	r30
     faa:	ff 93       	push	r31
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	if(ICU_CallBackPtr!=NULL)
     fb4:	80 91 08 02 	lds	r24, 0x0208
     fb8:	90 91 09 02 	lds	r25, 0x0209
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	29 f0       	breq	.+10     	; 0xfca <__vector_6+0x40>
	{
		ICU_CallBackPtr();
     fc0:	e0 91 08 02 	lds	r30, 0x0208
     fc4:	f0 91 09 02 	lds	r31, 0x0209
     fc8:	09 95       	icall
	}
}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <M_TIMER0_void_Init>:

static u32 NumberOfOverflows=0;
static u32  NumberOfRemainingTicks=0;
static void(*Arr_Call_Back[2])(void)={NULL,NULL};
void M_TIMER0_void_Init(void)//set timer mood,set OC0 pin mood
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
       #else
          #error ("wrong insert node")
       #endif
 #elif  (TIMER0_MODE==TIMER0_FAST_PWM_MODE)

	SET_BIT(TCCR0_REG,WGM00_BIT);
     ff8:	a3 e5       	ldi	r26, 0x53	; 83
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e3 e5       	ldi	r30, 0x53	; 83
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	80 64       	ori	r24, 0x40	; 64
    1004:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,WGM01_BIT);
    1006:	a3 e5       	ldi	r26, 0x53	; 83
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e3 e5       	ldi	r30, 0x53	; 83
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	88 60       	ori	r24, 0x08	; 8
    1012:	8c 93       	st	X, r24
    #if(TIMER0_OC0_MODE==TIMER0_PWM_NON_INVERTED||TIMER0_OC0_MODE== TIMER0_PWM_INVERTED)
	//step1 apply mask
	TCCR0_REG&= TIMER0_OC0_MASK;
    1014:	a3 e5       	ldi	r26, 0x53	; 83
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e3 e5       	ldi	r30, 0x53	; 83
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8f 7c       	andi	r24, 0xCF	; 207
    1020:	8c 93       	st	X, r24
	 TCCR0_REG|=TIMER0_OC0_MODE;
    1022:	a3 e5       	ldi	r26, 0x53	; 83
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e3 e5       	ldi	r30, 0x53	; 83
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	80 62       	ori	r24, 0x20	; 32
    102e:	8c 93       	st	X, r24


#else
#error();
#endif
}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <M_TIMER0_void_start>:
void M_TIMER0_void_start(void)//set clock prescaler
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
#if(TIMER0_PRESCALER>=TIMER0_PRESCALER_NO_CLK&&TIMER0_PRESCALER<=TIMER0_PRESCALER_EXTCLK_RAIS_EDGE)
	TCCR0_REG &=TIMER0_PRESCALER_MASK;
    103e:	a3 e5       	ldi	r26, 0x53	; 83
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e3 e5       	ldi	r30, 0x53	; 83
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	88 7f       	andi	r24, 0xF8	; 248
    104a:	8c 93       	st	X, r24
	TCCR0_REG |=TIMER0_PRESCALER;
    104c:	a3 e5       	ldi	r26, 0x53	; 83
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e3 e5       	ldi	r30, 0x53	; 83
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	84 60       	ori	r24, 0x04	; 4
    1058:	8c 93       	st	X, r24
#else
#error("invalid prescaler")
#endif
}
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <M_TIMER0_void_stop>:
void M_TIMER0_void_stop(void)// NO CLOCK
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &=TIMER0_PRESCALER_MASK;
    1068:	a3 e5       	ldi	r26, 0x53	; 83
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e3 e5       	ldi	r30, 0x53	; 83
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	88 7f       	andi	r24, 0xF8	; 248
    1074:	8c 93       	st	X, r24
}
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <M_TIMER0_void_setTime>:
void M_TIMER0_void_setTime(u32 copy_u32timeMS)//time in milli seconds;
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	a5 97       	sbiw	r28, 0x25	; 37
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	6d 8f       	std	Y+29, r22	; 0x1d
    1092:	7e 8f       	std	Y+30, r23	; 0x1e
    1094:	8f 8f       	std	Y+31, r24	; 0x1f
    1096:	98 a3       	std	Y+32, r25	; 0x20
	u32 Loc_prescalerArr[]={1,8,64,256,1024};
    1098:	ce 01       	movw	r24, r28
    109a:	09 96       	adiw	r24, 0x09	; 9
    109c:	9a a3       	std	Y+34, r25	; 0x22
    109e:	89 a3       	std	Y+33, r24	; 0x21
    10a0:	e3 ee       	ldi	r30, 0xE3	; 227
    10a2:	f1 e0       	ldi	r31, 0x01	; 1
    10a4:	fc a3       	std	Y+36, r31	; 0x24
    10a6:	eb a3       	std	Y+35, r30	; 0x23
    10a8:	f4 e1       	ldi	r31, 0x14	; 20
    10aa:	fd a3       	std	Y+37, r31	; 0x25
    10ac:	eb a1       	ldd	r30, Y+35	; 0x23
    10ae:	fc a1       	ldd	r31, Y+36	; 0x24
    10b0:	00 80       	ld	r0, Z
    10b2:	8b a1       	ldd	r24, Y+35	; 0x23
    10b4:	9c a1       	ldd	r25, Y+36	; 0x24
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	9c a3       	std	Y+36, r25	; 0x24
    10ba:	8b a3       	std	Y+35, r24	; 0x23
    10bc:	e9 a1       	ldd	r30, Y+33	; 0x21
    10be:	fa a1       	ldd	r31, Y+34	; 0x22
    10c0:	00 82       	st	Z, r0
    10c2:	89 a1       	ldd	r24, Y+33	; 0x21
    10c4:	9a a1       	ldd	r25, Y+34	; 0x22
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	9a a3       	std	Y+34, r25	; 0x22
    10ca:	89 a3       	std	Y+33, r24	; 0x21
    10cc:	9d a1       	ldd	r25, Y+37	; 0x25
    10ce:	91 50       	subi	r25, 0x01	; 1
    10d0:	9d a3       	std	Y+37, r25	; 0x25
    10d2:	ed a1       	ldd	r30, Y+37	; 0x25
    10d4:	ee 23       	and	r30, r30
    10d6:	51 f7       	brne	.-44     	; 0x10ac <M_TIMER0_void_setTime+0x30>
	f32 Locticktime=(f32)Loc_prescalerArr[TIMER0_PRESCALER-1]/FCPU;
    10d8:	8d 89       	ldd	r24, Y+21	; 0x15
    10da:	9e 89       	ldd	r25, Y+22	; 0x16
    10dc:	af 89       	ldd	r26, Y+23	; 0x17
    10de:	b8 8d       	ldd	r27, Y+24	; 0x18
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e8       	ldi	r20, 0x80	; 128
    10f6:	51 e4       	ldi	r21, 0x41	; 65
    10f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	8d 83       	std	Y+5, r24	; 0x05
    1102:	9e 83       	std	Y+6, r25	; 0x06
    1104:	af 83       	std	Y+7, r26	; 0x07
    1106:	b8 87       	std	Y+8, r27	; 0x08
	u32  NoOfDesiredTicks=(copy_u32timeMS*1000)/Locticktime;
    1108:	8d 8d       	ldd	r24, Y+29	; 0x1d
    110a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    110c:	af 8d       	ldd	r26, Y+31	; 0x1f
    110e:	b8 a1       	ldd	r27, Y+32	; 0x20
    1110:	28 ee       	ldi	r18, 0xE8	; 232
    1112:	33 e0       	ldi	r19, 0x03	; 3
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <__mulsi3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	2d 81       	ldd	r18, Y+5	; 0x05
    1136:	3e 81       	ldd	r19, Y+6	; 0x06
    1138:	4f 81       	ldd	r20, Y+7	; 0x07
    113a:	58 85       	ldd	r21, Y+8	; 0x08
    113c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	ab 83       	std	Y+3, r26	; 0x03
    1156:	bc 83       	std	Y+4, r27	; 0x04
		NumberOfOverflows++;
	}
#elif  (TIMER0_MODE == TIMER0_CTC_MODE)

#endif
}
    1158:	a5 96       	adiw	r28, 0x25	; 37
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <M_TIMER0_void_EnableInt>:
void M_TIMER0_void_EnableInt(u32 copy_u8IntID)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	28 97       	sbiw	r28, 0x08	; 8
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	69 83       	std	Y+1, r22	; 0x01
    1180:	7a 83       	std	Y+2, r23	; 0x02
    1182:	8b 83       	std	Y+3, r24	; 0x03
    1184:	9c 83       	std	Y+4, r25	; 0x04
	switch(copy_u8IntID)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	ab 81       	ldd	r26, Y+3	; 0x03
    118c:	bc 81       	ldd	r27, Y+4	; 0x04
    118e:	8d 83       	std	Y+5, r24	; 0x05
    1190:	9e 83       	std	Y+6, r25	; 0x06
    1192:	af 83       	std	Y+7, r26	; 0x07
    1194:	b8 87       	std	Y+8, r27	; 0x08
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	af 81       	ldd	r26, Y+7	; 0x07
    119c:	b8 85       	ldd	r27, Y+8	; 0x08
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	a1 05       	cpc	r26, r1
    11a2:	b1 05       	cpc	r27, r1
    11a4:	51 f0       	breq	.+20     	; 0x11ba <M_TIMER0_void_EnableInt+0x50>
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	af 81       	ldd	r26, Y+7	; 0x07
    11ac:	b8 85       	ldd	r27, Y+8	; 0x08
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	a1 05       	cpc	r26, r1
    11b4:	b1 05       	cpc	r27, r1
    11b6:	49 f0       	breq	.+18     	; 0x11ca <M_TIMER0_void_EnableInt+0x60>
    11b8:	0f c0       	rjmp	.+30     	; 0x11d8 <M_TIMER0_void_EnableInt+0x6e>
	{
	case TIMER0_OVF_INT_ID:
		SET_BIT(TIMSK_REG,TOIE0_BIT);
    11ba:	a9 e5       	ldi	r26, 0x59	; 89
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e9 e5       	ldi	r30, 0x59	; 89
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	81 60       	ori	r24, 0x01	; 1
    11c6:	8c 93       	st	X, r24
    11c8:	07 c0       	rjmp	.+14     	; 0x11d8 <M_TIMER0_void_EnableInt+0x6e>
		break;
	case TIMER0_COMP_INT_ID:
	SET_BIT(TIMSK_REG,OCIE0_BIT);
    11ca:	a9 e5       	ldi	r26, 0x59	; 89
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e9 e5       	ldi	r30, 0x59	; 89
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	82 60       	ori	r24, 0x02	; 2
    11d6:	8c 93       	st	X, r24
			break;
	}
	//METHOD 2
	if(copy_u8IntID >= TIMER0_OVF_INT_ID && copy_u8IntID <= TIMER0_COMP_INT_ID )
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	ab 81       	ldd	r26, Y+3	; 0x03
    11de:	bc 81       	ldd	r27, Y+4	; 0x04
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	91 05       	cpc	r25, r1
    11e4:	a1 05       	cpc	r26, r1
    11e6:	b1 05       	cpc	r27, r1
    11e8:	90 f4       	brcc	.+36     	; 0x120e <M_TIMER0_void_EnableInt+0xa4>
		{
			SET_BIT(TIMSK_REG,copy_u8IntID);
    11ea:	a9 e5       	ldi	r26, 0x59	; 89
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e9 e5       	ldi	r30, 0x59	; 89
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	29 81       	ldd	r18, Y+1	; 0x01
    11f8:	3a 81       	ldd	r19, Y+2	; 0x02
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <M_TIMER0_void_EnableInt+0x9c>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <M_TIMER0_void_EnableInt+0x98>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
		}

}
    120e:	28 96       	adiw	r28, 0x08	; 8
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <M_TIMER0_void_DisableInt>:
void M_TIMER0_void_DisableInt(u32 copy_u8IntID)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <M_TIMER0_void_DisableInt+0x6>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <M_TIMER0_void_DisableInt+0x8>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	69 83       	std	Y+1, r22	; 0x01
    122e:	7a 83       	std	Y+2, r23	; 0x02
    1230:	8b 83       	std	Y+3, r24	; 0x03
    1232:	9c 83       	std	Y+4, r25	; 0x04
		CLR_BIT(TIMSK_REG;OCIE0_BIT)
				break;
		}*/
	//METHOD 2

	CLR_BIT(TIMSK_REG,copy_u8IntID);
    1234:	a9 e5       	ldi	r26, 0x59	; 89
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e9 e5       	ldi	r30, 0x59	; 89
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	29 81       	ldd	r18, Y+1	; 0x01
    1242:	3a 81       	ldd	r19, Y+2	; 0x02
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <M_TIMER0_void_DisableInt+0x30>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <M_TIMER0_void_DisableInt+0x2c>
    1254:	80 95       	com	r24
    1256:	84 23       	and	r24, r20
    1258:	8c 93       	st	X, r24
  }
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <M_TIMER0_void_setCallBack>:
void M_TIMER0_void_setCallBack(void(*ptrfn)(void),u8 copy_u8IntID)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <M_TIMER0_void_setCallBack+0x6>
    126e:	00 d0       	rcall	.+0      	; 0x1270 <M_TIMER0_void_setCallBack+0x8>
    1270:	0f 92       	push	r0
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
    127a:	6b 83       	std	Y+3, r22	; 0x03
	switch (copy_u8IntID)
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	3d 83       	std	Y+5, r19	; 0x05
    1284:	2c 83       	std	Y+4, r18	; 0x04
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	9d 81       	ldd	r25, Y+5	; 0x05
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	31 f0       	breq	.+12     	; 0x129a <M_TIMER0_void_setCallBack+0x32>
    128e:	2c 81       	ldd	r18, Y+4	; 0x04
    1290:	3d 81       	ldd	r19, Y+5	; 0x05
    1292:	21 30       	cpi	r18, 0x01	; 1
    1294:	31 05       	cpc	r19, r1
    1296:	41 f0       	breq	.+16     	; 0x12a8 <M_TIMER0_void_setCallBack+0x40>
    1298:	0d c0       	rjmp	.+26     	; 0x12b4 <M_TIMER0_void_setCallBack+0x4c>
	{
	case TIMER0_OVF_INT_ID:
		Arr_Call_Back[0]=ptrfn;
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	9a 81       	ldd	r25, Y+2	; 0x02
    129e:	90 93 13 02 	sts	0x0213, r25
    12a2:	80 93 12 02 	sts	0x0212, r24
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <M_TIMER0_void_setCallBack+0x4c>
		break;
	case TIMER0_COMP_INT_ID:
		Arr_Call_Back[1]=ptrfn;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	90 93 15 02 	sts	0x0215, r25
    12b0:	80 93 14 02 	sts	0x0214, r24
		break;
	}
	//method 2
	Arr_Call_Back[copy_u8IntID]=ptrfn;
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	fc 01       	movw	r30, r24
    12c0:	ee 5e       	subi	r30, 0xEE	; 238
    12c2:	fd 4f       	sbci	r31, 0xFD	; 253
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	80 83       	st	Z, r24
}
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <M_TIMER0_void_setFastPWM>:
void M_TIMER0_void_setFastPWM(u8 copy_u8Duty)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <M_TIMER0_void_setFastPWM+0x6>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <M_TIMER0_void_setFastPWM+0x8>
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	89 83       	std	Y+1, r24	; 0x01
#if(TIMER0_MODE ==TIMER0_FAST_PWM_MODE)
     #if(TIMER0_OC0_MODE ==TIMER0_PWM_NON_INVERTED)
	 OCR0_REG=abs(((copy_u8Duty*256)/100)-1);
    12ec:	8c e5       	ldi	r24, 0x5C	; 92
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	9d 83       	std	Y+5, r25	; 0x05
    12f2:	8c 83       	std	Y+4, r24	; 0x04
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	98 2f       	mov	r25, r24
    12fc:	88 27       	eor	r24, r24
    12fe:	24 e6       	ldi	r18, 0x64	; 100
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	b9 01       	movw	r22, r18
    1304:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <__divmodhi4>
    1308:	cb 01       	movw	r24, r22
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	9b 83       	std	Y+3, r25	; 0x03
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	ea 81       	ldd	r30, Y+2	; 0x02
    1312:	fb 81       	ldd	r31, Y+3	; 0x03
    1314:	ff 23       	and	r31, r31
    1316:	3c f4       	brge	.+14     	; 0x1326 <M_TIMER0_void_setFastPWM+0x4a>
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	9b 81       	ldd	r25, Y+3	; 0x03
    131c:	90 95       	com	r25
    131e:	81 95       	neg	r24
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	9b 83       	std	Y+3, r25	; 0x03
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	ec 81       	ldd	r30, Y+4	; 0x04
    132a:	fd 81       	ldd	r31, Y+5	; 0x05
    132c:	80 83       	st	Z, r24
	 OCR0_REG=255-(((copy_u8Duty*256)/100)-1);
      #else
        #error("wrong insert mode")
      #endif
#endif
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <M_TIMER0_void_setPhasecorrectPWM>:
void M_TIMER0_void_setPhasecorrectPWM(u8 copy_u8Duty)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	0f 92       	push	r0
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	89 83       	std	Y+1, r24	; 0x01
	 OCR0_REG=(255-(copy_u8Duty*255)/100);
      #else
        #error("wrong insert mode")
      #endif
#endif
}
    134a:	0f 90       	pop	r0
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
	static u32 Loc_Overflow_Count=0;
		Loc_Overflow_Count++;
    137c:	80 91 16 02 	lds	r24, 0x0216
    1380:	90 91 17 02 	lds	r25, 0x0217
    1384:	a0 91 18 02 	lds	r26, 0x0218
    1388:	b0 91 19 02 	lds	r27, 0x0219
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	a1 1d       	adc	r26, r1
    1390:	b1 1d       	adc	r27, r1
    1392:	80 93 16 02 	sts	0x0216, r24
    1396:	90 93 17 02 	sts	0x0217, r25
    139a:	a0 93 18 02 	sts	0x0218, r26
    139e:	b0 93 19 02 	sts	0x0219, r27
		if(Loc_Overflow_Count==NumberOfOverflows)
    13a2:	20 91 16 02 	lds	r18, 0x0216
    13a6:	30 91 17 02 	lds	r19, 0x0217
    13aa:	40 91 18 02 	lds	r20, 0x0218
    13ae:	50 91 19 02 	lds	r21, 0x0219
    13b2:	80 91 0a 02 	lds	r24, 0x020A
    13b6:	90 91 0b 02 	lds	r25, 0x020B
    13ba:	a0 91 0c 02 	lds	r26, 0x020C
    13be:	b0 91 0d 02 	lds	r27, 0x020D
    13c2:	28 17       	cp	r18, r24
    13c4:	39 07       	cpc	r19, r25
    13c6:	4a 07       	cpc	r20, r26
    13c8:	5b 07       	cpc	r21, r27
    13ca:	f9 f4       	brne	.+62     	; 0x140a <__vector_11+0xb8>
		{
			TCNT0_REG=256-NumberOfRemainingTicks;
    13cc:	e2 e5       	ldi	r30, 0x52	; 82
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 91 0e 02 	lds	r24, 0x020E
    13d4:	90 91 0f 02 	lds	r25, 0x020F
    13d8:	a0 91 10 02 	lds	r26, 0x0210
    13dc:	b0 91 11 02 	lds	r27, 0x0211
    13e0:	81 95       	neg	r24
    13e2:	80 83       	st	Z, r24
			Loc_Overflow_Count=0;
    13e4:	10 92 16 02 	sts	0x0216, r1
    13e8:	10 92 17 02 	sts	0x0217, r1
    13ec:	10 92 18 02 	sts	0x0218, r1
    13f0:	10 92 19 02 	sts	0x0219, r1
	       if(Arr_Call_Back[TIMER0_OVF_INT_ID]!=NULL)
    13f4:	80 91 12 02 	lds	r24, 0x0212
    13f8:	90 91 13 02 	lds	r25, 0x0213
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	29 f0       	breq	.+10     	; 0x140a <__vector_11+0xb8>
	         {
	            	Arr_Call_Back[TIMER0_OVF_INT_ID]();
    1400:	e0 91 12 02 	lds	r30, 0x0212
    1404:	f0 91 13 02 	lds	r31, 0x0213
    1408:	09 95       	icall
	         }
	}
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	ff 91       	pop	r31
    1410:	ef 91       	pop	r30
    1412:	bf 91       	pop	r27
    1414:	af 91       	pop	r26
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	7f 91       	pop	r23
    141c:	6f 91       	pop	r22
    141e:	5f 91       	pop	r21
    1420:	4f 91       	pop	r20
    1422:	3f 91       	pop	r19
    1424:	2f 91       	pop	r18
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	0f 90       	pop	r0
    142c:	1f 90       	pop	r1
    142e:	18 95       	reti

00001430 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62

	if(Arr_Call_Back[TIMER0_COMP_INT_ID]!=NULL)
    145a:	80 91 14 02 	lds	r24, 0x0214
    145e:	90 91 15 02 	lds	r25, 0x0215
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	29 f0       	breq	.+10     	; 0x1470 <__vector_10+0x40>
	{
		Arr_Call_Back[TIMER0_COMP_INT_ID]();
    1466:	e0 91 14 02 	lds	r30, 0x0214
    146a:	f0 91 15 02 	lds	r31, 0x0215
    146e:	09 95       	icall
	}

}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	ff 91       	pop	r31
    1476:	ef 91       	pop	r30
    1478:	bf 91       	pop	r27
    147a:	af 91       	pop	r26
    147c:	9f 91       	pop	r25
    147e:	8f 91       	pop	r24
    1480:	7f 91       	pop	r23
    1482:	6f 91       	pop	r22
    1484:	5f 91       	pop	r21
    1486:	4f 91       	pop	r20
    1488:	3f 91       	pop	r19
    148a:	2f 91       	pop	r18
    148c:	0f 90       	pop	r0
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	0f 90       	pop	r0
    1492:	1f 90       	pop	r1
    1494:	18 95       	reti

00001496 <M_GIE_void_enable>:
#include"GIE_priv.h"
#include"GIE_config.h"
#include"GIE_int.h"

void M_GIE_void_enable(void)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
SET_BIT(SREG_REG,I_BIT);
    149e:	af e5       	ldi	r26, 0x5F	; 95
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ef e5       	ldi	r30, 0x5F	; 95
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 68       	ori	r24, 0x80	; 128
    14aa:	8c 93       	st	X, r24
asm("SEI");
    14ac:	78 94       	sei

}
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <M_GIE_void_disable>:
void M_GIE_void_disable(void)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
	//CLR_BIT(SREG_REG ,I_BIt);
	asm("CLI");
    14bc:	f8 94       	cli
}
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <M_EXTI_void_Enable>:
#include"EXT1_int.h"

//arra of 3 pointers to function ( call back function )
static void (*Arr_CallBack[3]) (void)={NULL,NULL,NULL};
void M_EXTI_void_Enable(u8 copy_u8IntID,u8 copy_u8Sense)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <M_EXTI_void_Enable+0x6>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <M_EXTI_void_Enable+0x8>
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8Sense>EXTI_TRIG_RAIS_EDGE &&copy_u8Sense<EXTI_TRIG_LOW_LEVEL)
	{
		return;
	}

	switch(copy_u8IntID)
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	3c 83       	std	Y+4, r19	; 0x04
    14dc:	2b 83       	std	Y+3, r18	; 0x03
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	86 30       	cpi	r24, 0x06	; 6
    14e4:	91 05       	cpc	r25, r1
    14e6:	59 f0       	breq	.+22     	; 0x14fe <M_EXTI_void_Enable+0x3a>
    14e8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ea:	3c 81       	ldd	r19, Y+4	; 0x04
    14ec:	27 30       	cpi	r18, 0x07	; 7
    14ee:	31 05       	cpc	r19, r1
    14f0:	b1 f0       	breq	.+44     	; 0x151e <M_EXTI_void_Enable+0x5a>
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	85 30       	cpi	r24, 0x05	; 5
    14f8:	91 05       	cpc	r25, r1
    14fa:	41 f1       	breq	.+80     	; 0x154c <M_EXTI_void_Enable+0x88>
    14fc:	38 c0       	rjmp	.+112    	; 0x156e <M_EXTI_void_Enable+0xaa>
		{
		case EXTI_INT0_ID:
		 //step 1: apply mask
			 MCUCR_REG&=EXTI_INT0_TRIG_MASK ;
    14fe:	a5 e5       	ldi	r26, 0x55	; 85
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e5       	ldi	r30, 0x55	; 85
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	8c 7f       	andi	r24, 0xFC	; 252
    150a:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense;
    150c:	a5 e5       	ldi	r26, 0x55	; 85
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e5 e5       	ldi	r30, 0x55	; 85
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	90 81       	ld	r25, Z
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	89 2b       	or	r24, r25
    151a:	8c 93       	st	X, r24
    151c:	28 c0       	rjmp	.+80     	; 0x156e <M_EXTI_void_Enable+0xaa>
		   break;
		case EXTI_INT1_ID:
			//step 1: apply mask
			 MCUCR_REG&=EXTI_INT1_TRIG_MASK ;
    151e:	a5 e5       	ldi	r26, 0x55	; 85
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e5 e5       	ldi	r30, 0x55	; 85
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	83 7f       	andi	r24, 0xF3	; 243
    152a:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= copy_u8Sense<<EXTI_INT1_TRIG_SHIFT;
    152c:	a5 e5       	ldi	r26, 0x55	; 85
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e5 e5       	ldi	r30, 0x55	; 85
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	28 2f       	mov	r18, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	82 2b       	or	r24, r18
    1548:	8c 93       	st	X, r24
    154a:	11 c0       	rjmp	.+34     	; 0x156e <M_EXTI_void_Enable+0xaa>
			break;
		case EXTI_INT2_ID:
			//step 1: apply mask
			CLR_BIT(MCUSCR_REG,ISC2_BIT);
    154c:	a4 e5       	ldi	r26, 0x54	; 84
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e4 e5       	ldi	r30, 0x54	; 84
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8f 7b       	andi	r24, 0xBF	; 191
    1558:	8c 93       	st	X, r24
			//step 2 : insert value
			 MCUCR_REG|= GET_BIT(copy_u8Sense,0)<<EXTI_INT2_TRIG_SHIFT;
    155a:	a5 e5       	ldi	r26, 0x55	; 85
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e5 e5       	ldi	r30, 0x55	; 85
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	98 2f       	mov	r25, r24
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	80 74       	andi	r24, 0x40	; 64
    156a:	89 2b       	or	r24, r25
    156c:	8c 93       	st	X, r24
				break;
		}

	//step2 :enable PIE
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	85 30       	cpi	r24, 0x05	; 5
    1572:	b0 f0       	brcs	.+44     	; 0x15a0 <M_EXTI_void_Enable+0xdc>
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	88 30       	cpi	r24, 0x08	; 8
    1578:	98 f4       	brcc	.+38     	; 0x15a0 <M_EXTI_void_Enable+0xdc>
		SET_BIT(GICR_REG,copy_u8IntID);
    157a:	ab e5       	ldi	r26, 0x5B	; 91
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	eb e5       	ldi	r30, 0x5B	; 91
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <M_EXTI_void_Enable+0xd4>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <M_EXTI_void_Enable+0xd0>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24

}
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <M_EXTI_void_Disble>:
void M_EXTI_void_Disble(u8 copy_u8IntID)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <M_EXTI_void_Disble+0x6>
    15b4:	0f 92       	push	r0
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
	//METHOD 1
	switch(copy_u8IntID)
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	3b 83       	std	Y+3, r19	; 0x03
    15c4:	2a 83       	std	Y+2, r18	; 0x02
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	9b 81       	ldd	r25, Y+3	; 0x03
    15ca:	86 30       	cpi	r24, 0x06	; 6
    15cc:	91 05       	cpc	r25, r1
    15ce:	59 f0       	breq	.+22     	; 0x15e6 <M_EXTI_void_Disble+0x38>
    15d0:	2a 81       	ldd	r18, Y+2	; 0x02
    15d2:	3b 81       	ldd	r19, Y+3	; 0x03
    15d4:	27 30       	cpi	r18, 0x07	; 7
    15d6:	31 05       	cpc	r19, r1
    15d8:	71 f0       	breq	.+28     	; 0x15f6 <M_EXTI_void_Disble+0x48>
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	9b 81       	ldd	r25, Y+3	; 0x03
    15de:	85 30       	cpi	r24, 0x05	; 5
    15e0:	91 05       	cpc	r25, r1
    15e2:	89 f0       	breq	.+34     	; 0x1606 <M_EXTI_void_Disble+0x58>
    15e4:	17 c0       	rjmp	.+46     	; 0x1614 <M_EXTI_void_Disble+0x66>
	{
	case EXTI_INT0_ID:
	   CLR_BIT(GICR_REG,INT0_BIT);
    15e6:	ab e5       	ldi	r26, 0x5B	; 91
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	eb e5       	ldi	r30, 0x5B	; 91
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	8f 7b       	andi	r24, 0xBF	; 191
    15f2:	8c 93       	st	X, r24
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <M_EXTI_void_Disble+0x66>
	   break;
	case EXTI_INT1_ID:
		   CLR_BIT(GICR_REG,INT1_BIT);
    15f6:	ab e5       	ldi	r26, 0x5B	; 91
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	eb e5       	ldi	r30, 0x5B	; 91
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	8f 77       	andi	r24, 0x7F	; 127
    1602:	8c 93       	st	X, r24
    1604:	07 c0       	rjmp	.+14     	; 0x1614 <M_EXTI_void_Disble+0x66>
		   break;
	case EXTI_INT2_ID:
		   CLR_BIT(GICR_REG,INT2_BIT);
    1606:	ab e5       	ldi	r26, 0x5B	; 91
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	eb e5       	ldi	r30, 0x5B	; 91
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	8f 7d       	andi	r24, 0xDF	; 223
    1612:	8c 93       	st	X, r24
		   break;
	}
	//METHOD2
	if (copy_u8IntID>=EXTI_INT2_ID&&copy_u8IntID<=EXTI_INT1_ID)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	85 30       	cpi	r24, 0x05	; 5
    1618:	b8 f0       	brcs	.+46     	; 0x1648 <M_EXTI_void_Disble+0x9a>
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	88 30       	cpi	r24, 0x08	; 8
    161e:	a0 f4       	brcc	.+40     	; 0x1648 <M_EXTI_void_Disble+0x9a>
	CLR_BIT(GICR_REG,copy_u8IntID);
    1620:	ab e5       	ldi	r26, 0x5B	; 91
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	eb e5       	ldi	r30, 0x5B	; 91
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <M_EXTI_void_Disble+0x90>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <M_EXTI_void_Disble+0x8c>
    1642:	80 95       	com	r24
    1644:	84 23       	and	r24, r20
    1646:	8c 93       	st	X, r24
}
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <M_EXTI_void_setCallback>:
void M_EXTI_void_setCallback(void (*ptrfn)(void),u8 copy_u8IntID)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <M_EXTI_void_setCallback+0x6>
    165a:	00 d0       	rcall	.+0      	; 0x165c <M_EXTI_void_setCallback+0x8>
    165c:	0f 92       	push	r0
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	9a 83       	std	Y+2, r25	; 0x02
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	6b 83       	std	Y+3, r22	; 0x03
	switch(copy_u8IntID)
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3d 83       	std	Y+5, r19	; 0x05
    1670:	2c 83       	std	Y+4, r18	; 0x04
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	9d 81       	ldd	r25, Y+5	; 0x05
    1676:	86 30       	cpi	r24, 0x06	; 6
    1678:	91 05       	cpc	r25, r1
    167a:	59 f0       	breq	.+22     	; 0x1692 <M_EXTI_void_setCallback+0x3e>
    167c:	2c 81       	ldd	r18, Y+4	; 0x04
    167e:	3d 81       	ldd	r19, Y+5	; 0x05
    1680:	27 30       	cpi	r18, 0x07	; 7
    1682:	31 05       	cpc	r19, r1
    1684:	69 f0       	breq	.+26     	; 0x16a0 <M_EXTI_void_setCallback+0x4c>
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	85 30       	cpi	r24, 0x05	; 5
    168c:	91 05       	cpc	r25, r1
    168e:	79 f0       	breq	.+30     	; 0x16ae <M_EXTI_void_setCallback+0x5a>
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <M_EXTI_void_setCallback+0x66>
		{
		case EXTI_INT0_ID:
			Arr_CallBack[0]=ptrfn;
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	9a 81       	ldd	r25, Y+2	; 0x02
    1696:	90 93 1b 02 	sts	0x021B, r25
    169a:	80 93 1a 02 	sts	0x021A, r24
    169e:	0d c0       	rjmp	.+26     	; 0x16ba <M_EXTI_void_setCallback+0x66>
		   break;
		case EXTI_INT1_ID:
			Arr_CallBack[1]=ptrfn;
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	90 93 1d 02 	sts	0x021D, r25
    16a8:	80 93 1c 02 	sts	0x021C, r24
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <M_EXTI_void_setCallback+0x66>
			   break;
		case EXTI_INT2_ID:
			Arr_CallBack[2]=ptrfn;
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	90 93 1f 02 	sts	0x021F, r25
    16b6:	80 93 1e 02 	sts	0x021E, r24
			   break;
		}
}
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <__vector_1>:

ISR(INT0_vect)
{
    16ca:	1f 92       	push	r1
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	0f 92       	push	r0
    16d2:	11 24       	eor	r1, r1
    16d4:	2f 93       	push	r18
    16d6:	3f 93       	push	r19
    16d8:	4f 93       	push	r20
    16da:	5f 93       	push	r21
    16dc:	6f 93       	push	r22
    16de:	7f 93       	push	r23
    16e0:	8f 93       	push	r24
    16e2:	9f 93       	push	r25
    16e4:	af 93       	push	r26
    16e6:	bf 93       	push	r27
    16e8:	ef 93       	push	r30
    16ea:	ff 93       	push	r31
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[0]!=NULL)
    16f4:	80 91 1a 02 	lds	r24, 0x021A
    16f8:	90 91 1b 02 	lds	r25, 0x021B
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	29 f0       	breq	.+10     	; 0x170a <__vector_1+0x40>
	{
		Arr_CallBack[0]();
    1700:	e0 91 1a 02 	lds	r30, 0x021A
    1704:	f0 91 1b 02 	lds	r31, 0x021B
    1708:	09 95       	icall
	}
}
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	ff 91       	pop	r31
    1710:	ef 91       	pop	r30
    1712:	bf 91       	pop	r27
    1714:	af 91       	pop	r26
    1716:	9f 91       	pop	r25
    1718:	8f 91       	pop	r24
    171a:	7f 91       	pop	r23
    171c:	6f 91       	pop	r22
    171e:	5f 91       	pop	r21
    1720:	4f 91       	pop	r20
    1722:	3f 91       	pop	r19
    1724:	2f 91       	pop	r18
    1726:	0f 90       	pop	r0
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	0f 90       	pop	r0
    172c:	1f 90       	pop	r1
    172e:	18 95       	reti

00001730 <__vector_2>:
ISR(INT1_vect)
{
    1730:	1f 92       	push	r1
    1732:	0f 92       	push	r0
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	0f 92       	push	r0
    1738:	11 24       	eor	r1, r1
    173a:	2f 93       	push	r18
    173c:	3f 93       	push	r19
    173e:	4f 93       	push	r20
    1740:	5f 93       	push	r21
    1742:	6f 93       	push	r22
    1744:	7f 93       	push	r23
    1746:	8f 93       	push	r24
    1748:	9f 93       	push	r25
    174a:	af 93       	push	r26
    174c:	bf 93       	push	r27
    174e:	ef 93       	push	r30
    1750:	ff 93       	push	r31
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[1]!=NULL)
    175a:	80 91 1c 02 	lds	r24, 0x021C
    175e:	90 91 1d 02 	lds	r25, 0x021D
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	29 f0       	breq	.+10     	; 0x1770 <__vector_2+0x40>
		{
			Arr_CallBack[1]();
    1766:	e0 91 1c 02 	lds	r30, 0x021C
    176a:	f0 91 1d 02 	lds	r31, 0x021D
    176e:	09 95       	icall
		}
}
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	ff 91       	pop	r31
    1776:	ef 91       	pop	r30
    1778:	bf 91       	pop	r27
    177a:	af 91       	pop	r26
    177c:	9f 91       	pop	r25
    177e:	8f 91       	pop	r24
    1780:	7f 91       	pop	r23
    1782:	6f 91       	pop	r22
    1784:	5f 91       	pop	r21
    1786:	4f 91       	pop	r20
    1788:	3f 91       	pop	r19
    178a:	2f 91       	pop	r18
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	0f 90       	pop	r0
    1792:	1f 90       	pop	r1
    1794:	18 95       	reti

00001796 <__vector_3>:
ISR(INT2_vect)
{
    1796:	1f 92       	push	r1
    1798:	0f 92       	push	r0
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	0f 92       	push	r0
    179e:	11 24       	eor	r1, r1
    17a0:	2f 93       	push	r18
    17a2:	3f 93       	push	r19
    17a4:	4f 93       	push	r20
    17a6:	5f 93       	push	r21
    17a8:	6f 93       	push	r22
    17aa:	7f 93       	push	r23
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	af 93       	push	r26
    17b2:	bf 93       	push	r27
    17b4:	ef 93       	push	r30
    17b6:	ff 93       	push	r31
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
	if(Arr_CallBack[2]!=NULL)
    17c0:	80 91 1e 02 	lds	r24, 0x021E
    17c4:	90 91 1f 02 	lds	r25, 0x021F
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	29 f0       	breq	.+10     	; 0x17d6 <__vector_3+0x40>
		{
			Arr_CallBack[2]();
    17cc:	e0 91 1e 02 	lds	r30, 0x021E
    17d0:	f0 91 1f 02 	lds	r31, 0x021F
    17d4:	09 95       	icall
		}
}
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	ff 91       	pop	r31
    17dc:	ef 91       	pop	r30
    17de:	bf 91       	pop	r27
    17e0:	af 91       	pop	r26
    17e2:	9f 91       	pop	r25
    17e4:	8f 91       	pop	r24
    17e6:	7f 91       	pop	r23
    17e8:	6f 91       	pop	r22
    17ea:	5f 91       	pop	r21
    17ec:	4f 91       	pop	r20
    17ee:	3f 91       	pop	r19
    17f0:	2f 91       	pop	r18
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	0f 90       	pop	r0
    17f8:	1f 90       	pop	r1
    17fa:	18 95       	reti

000017fc <M_DIO_void_setPinDir>:
#include "DIO_pvt.h"
#include "DIO_config.h"
#include "DIO_int.h"

void M_DIO_void_setPinDir(u8 Port, PIN_T Pin, Dir_T DIRECTION)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	2d 97       	sbiw	r28, 0x0d	; 13
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	6a 83       	std	Y+2, r22	; 0x02
    1814:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3d 87       	std	Y+13, r19	; 0x0d
    181e:	2c 87       	std	Y+12, r18	; 0x0c
    1820:	8c 85       	ldd	r24, Y+12	; 0x0c
    1822:	9d 85       	ldd	r25, Y+13	; 0x0d
    1824:	82 30       	cpi	r24, 0x02	; 2
    1826:	91 05       	cpc	r25, r1
    1828:	09 f4       	brne	.+2      	; 0x182c <M_DIO_void_setPinDir+0x30>
    182a:	50 c0       	rjmp	.+160    	; 0x18cc <M_DIO_void_setPinDir+0xd0>
    182c:	2c 85       	ldd	r18, Y+12	; 0x0c
    182e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1830:	23 30       	cpi	r18, 0x03	; 3
    1832:	31 05       	cpc	r19, r1
    1834:	34 f4       	brge	.+12     	; 0x1842 <M_DIO_void_setPinDir+0x46>
    1836:	8c 85       	ldd	r24, Y+12	; 0x0c
    1838:	9d 85       	ldd	r25, Y+13	; 0x0d
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	71 f0       	breq	.+28     	; 0x185c <M_DIO_void_setPinDir+0x60>
    1840:	ec c0       	rjmp	.+472    	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
    1842:	2c 85       	ldd	r18, Y+12	; 0x0c
    1844:	3d 85       	ldd	r19, Y+13	; 0x0d
    1846:	23 30       	cpi	r18, 0x03	; 3
    1848:	31 05       	cpc	r19, r1
    184a:	09 f4       	brne	.+2      	; 0x184e <M_DIO_void_setPinDir+0x52>
    184c:	77 c0       	rjmp	.+238    	; 0x193c <M_DIO_void_setPinDir+0x140>
    184e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1850:	9d 85       	ldd	r25, Y+13	; 0x0d
    1852:	84 30       	cpi	r24, 0x04	; 4
    1854:	91 05       	cpc	r25, r1
    1856:	09 f4       	brne	.+2      	; 0x185a <M_DIO_void_setPinDir+0x5e>
    1858:	a9 c0       	rjmp	.+338    	; 0x19ac <M_DIO_void_setPinDir+0x1b0>
    185a:	df c0       	rjmp	.+446    	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
	{
	case PORTA_ID :
		switch (DIRECTION)
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	3b 87       	std	Y+11, r19	; 0x0b
    1864:	2a 87       	std	Y+10, r18	; 0x0a
    1866:	8a 85       	ldd	r24, Y+10	; 0x0a
    1868:	9b 85       	ldd	r25, Y+11	; 0x0b
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	31 f0       	breq	.+12     	; 0x187a <M_DIO_void_setPinDir+0x7e>
    186e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1870:	3b 85       	ldd	r19, Y+11	; 0x0b
    1872:	21 30       	cpi	r18, 0x01	; 1
    1874:	31 05       	cpc	r19, r1
    1876:	b1 f0       	breq	.+44     	; 0x18a4 <M_DIO_void_setPinDir+0xa8>
    1878:	d0 c0       	rjmp	.+416    	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
		{
		case IN:
			 CLR_BIT(DDRA,Pin);
    187a:	aa e3       	ldi	r26, 0x3A	; 58
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	ea e3       	ldi	r30, 0x3A	; 58
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <M_DIO_void_setPinDir+0x9c>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <M_DIO_void_setPinDir+0x98>
    189c:	80 95       	com	r24
    189e:	84 23       	and	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	bb c0       	rjmp	.+374    	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
			 break;
		case OUT:
			SET_BIT(DDRA,Pin);
    18a4:	aa e3       	ldi	r26, 0x3A	; 58
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	ea e3       	ldi	r30, 0x3A	; 58
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	48 2f       	mov	r20, r24
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 2e       	mov	r0, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <M_DIO_void_setPinDir+0xc6>
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	0a 94       	dec	r0
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <M_DIO_void_setPinDir+0xc2>
    18c6:	84 2b       	or	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	a7 c0       	rjmp	.+334    	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
			break;
		}
		break;
	case PORTB_ID :
				switch (DIRECTION)
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	39 87       	std	Y+9, r19	; 0x09
    18d4:	28 87       	std	Y+8, r18	; 0x08
    18d6:	88 85       	ldd	r24, Y+8	; 0x08
    18d8:	99 85       	ldd	r25, Y+9	; 0x09
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	31 f0       	breq	.+12     	; 0x18ea <M_DIO_void_setPinDir+0xee>
    18de:	28 85       	ldd	r18, Y+8	; 0x08
    18e0:	39 85       	ldd	r19, Y+9	; 0x09
    18e2:	21 30       	cpi	r18, 0x01	; 1
    18e4:	31 05       	cpc	r19, r1
    18e6:	b1 f0       	breq	.+44     	; 0x1914 <M_DIO_void_setPinDir+0x118>
    18e8:	98 c0       	rjmp	.+304    	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
				{
				case IN:
					 CLR_BIT(DDRB,Pin);
    18ea:	a7 e3       	ldi	r26, 0x37	; 55
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e7 e3       	ldi	r30, 0x37	; 55
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <M_DIO_void_setPinDir+0x10c>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <M_DIO_void_setPinDir+0x108>
    190c:	80 95       	com	r24
    190e:	84 23       	and	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	83 c0       	rjmp	.+262    	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
					 break;
				case OUT:
					SET_BIT(DDRB,Pin);
    1914:	a7 e3       	ldi	r26, 0x37	; 55
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e7 e3       	ldi	r30, 0x37	; 55
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <M_DIO_void_setPinDir+0x136>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <M_DIO_void_setPinDir+0x132>
    1936:	84 2b       	or	r24, r20
    1938:	8c 93       	st	X, r24
    193a:	6f c0       	rjmp	.+222    	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
					break;
				}
			break;
	case PORTC_ID:
				switch (DIRECTION)
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	3f 83       	std	Y+7, r19	; 0x07
    1944:	2e 83       	std	Y+6, r18	; 0x06
    1946:	8e 81       	ldd	r24, Y+6	; 0x06
    1948:	9f 81       	ldd	r25, Y+7	; 0x07
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	31 f0       	breq	.+12     	; 0x195a <M_DIO_void_setPinDir+0x15e>
    194e:	2e 81       	ldd	r18, Y+6	; 0x06
    1950:	3f 81       	ldd	r19, Y+7	; 0x07
    1952:	21 30       	cpi	r18, 0x01	; 1
    1954:	31 05       	cpc	r19, r1
    1956:	b1 f0       	breq	.+44     	; 0x1984 <M_DIO_void_setPinDir+0x188>
    1958:	60 c0       	rjmp	.+192    	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
				{
				case IN:
						 CLR_BIT(DDRC,Pin);
    195a:	a4 e3       	ldi	r26, 0x34	; 52
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e4 e3       	ldi	r30, 0x34	; 52
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <M_DIO_void_setPinDir+0x17c>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <M_DIO_void_setPinDir+0x178>
    197c:	80 95       	com	r24
    197e:	84 23       	and	r24, r20
    1980:	8c 93       	st	X, r24
    1982:	4b c0       	rjmp	.+150    	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
						 break;
				case OUT:
						 SET_BIT(DDRC,Pin);
    1984:	a4 e3       	ldi	r26, 0x34	; 52
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e4 e3       	ldi	r30, 0x34	; 52
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	48 2f       	mov	r20, r24
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	02 2e       	mov	r0, r18
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <M_DIO_void_setPinDir+0x1a6>
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	0a 94       	dec	r0
    19a4:	e2 f7       	brpl	.-8      	; 0x199e <M_DIO_void_setPinDir+0x1a2>
    19a6:	84 2b       	or	r24, r20
    19a8:	8c 93       	st	X, r24
    19aa:	37 c0       	rjmp	.+110    	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
						 break;
					}
				break;
	case PORTD_ID :
				 switch (DIRECTION)
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	3d 83       	std	Y+5, r19	; 0x05
    19b4:	2c 83       	std	Y+4, r18	; 0x04
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	31 f0       	breq	.+12     	; 0x19ca <M_DIO_void_setPinDir+0x1ce>
    19be:	2c 81       	ldd	r18, Y+4	; 0x04
    19c0:	3d 81       	ldd	r19, Y+5	; 0x05
    19c2:	21 30       	cpi	r18, 0x01	; 1
    19c4:	31 05       	cpc	r19, r1
    19c6:	b1 f0       	breq	.+44     	; 0x19f4 <M_DIO_void_setPinDir+0x1f8>
    19c8:	28 c0       	rjmp	.+80     	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
				 {
					case IN:
						 CLR_BIT(DDRD,Pin);
    19ca:	a1 e3       	ldi	r26, 0x31	; 49
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e1 e3       	ldi	r30, 0x31	; 49
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <M_DIO_void_setPinDir+0x1ec>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <M_DIO_void_setPinDir+0x1e8>
    19ec:	80 95       	com	r24
    19ee:	84 23       	and	r24, r20
    19f0:	8c 93       	st	X, r24
    19f2:	13 c0       	rjmp	.+38     	; 0x1a1a <M_DIO_void_setPinDir+0x21e>
						 break;
					case OUT:
						SET_BIT(DDRD,Pin);
    19f4:	a1 e3       	ldi	r26, 0x31	; 49
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e1 e3       	ldi	r30, 0x31	; 49
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <M_DIO_void_setPinDir+0x216>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <M_DIO_void_setPinDir+0x212>
    1a16:	84 2b       	or	r24, r20
    1a18:	8c 93       	st	X, r24
						 break;
				}
				break;
	}
}
    1a1a:	2d 96       	adiw	r28, 0x0d	; 13
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	de bf       	out	0x3e, r29	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	cd bf       	out	0x3d, r28	; 61
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <M_DIO_void_setPinValue>:
void M_DIO_void_setPinValue(u8 Port, u8 Pin, VALUE_T value)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	2d 97       	sbiw	r28, 0x0d	; 13
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	6a 83       	std	Y+2, r22	; 0x02
    1a44:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	3d 87       	std	Y+13, r19	; 0x0d
    1a4e:	2c 87       	std	Y+12, r18	; 0x0c
    1a50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a52:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a54:	82 30       	cpi	r24, 0x02	; 2
    1a56:	91 05       	cpc	r25, r1
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <M_DIO_void_setPinValue+0x30>
    1a5a:	50 c0       	rjmp	.+160    	; 0x1afc <M_DIO_void_setPinValue+0xd0>
    1a5c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a5e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a60:	23 30       	cpi	r18, 0x03	; 3
    1a62:	31 05       	cpc	r19, r1
    1a64:	34 f4       	brge	.+12     	; 0x1a72 <M_DIO_void_setPinValue+0x46>
    1a66:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a68:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	71 f0       	breq	.+28     	; 0x1a8c <M_DIO_void_setPinValue+0x60>
    1a70:	ec c0       	rjmp	.+472    	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
    1a72:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a74:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a76:	23 30       	cpi	r18, 0x03	; 3
    1a78:	31 05       	cpc	r19, r1
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <M_DIO_void_setPinValue+0x52>
    1a7c:	77 c0       	rjmp	.+238    	; 0x1b6c <M_DIO_void_setPinValue+0x140>
    1a7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a80:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a82:	84 30       	cpi	r24, 0x04	; 4
    1a84:	91 05       	cpc	r25, r1
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <M_DIO_void_setPinValue+0x5e>
    1a88:	a9 c0       	rjmp	.+338    	; 0x1bdc <M_DIO_void_setPinValue+0x1b0>
    1a8a:	df c0       	rjmp	.+446    	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
		{
		case PORTA_ID :
			switch (value)
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	3b 87       	std	Y+11, r19	; 0x0b
    1a94:	2a 87       	std	Y+10, r18	; 0x0a
    1a96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	31 f0       	breq	.+12     	; 0x1aaa <M_DIO_void_setPinValue+0x7e>
    1a9e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1aa0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1aa2:	21 30       	cpi	r18, 0x01	; 1
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	b1 f0       	breq	.+44     	; 0x1ad4 <M_DIO_void_setPinValue+0xa8>
    1aa8:	d0 c0       	rjmp	.+416    	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
			{
			case LOW:
				 CLR_BIT(PORTA_REG,Pin);
    1aaa:	ab e3       	ldi	r26, 0x3B	; 59
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	eb e3       	ldi	r30, 0x3B	; 59
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	02 2e       	mov	r0, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <M_DIO_void_setPinValue+0x9c>
    1ac4:	88 0f       	add	r24, r24
    1ac6:	99 1f       	adc	r25, r25
    1ac8:	0a 94       	dec	r0
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <M_DIO_void_setPinValue+0x98>
    1acc:	80 95       	com	r24
    1ace:	84 23       	and	r24, r20
    1ad0:	8c 93       	st	X, r24
    1ad2:	bb c0       	rjmp	.+374    	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
				 break;
			case HIGH:
				SET_BIT(PORTA_REG,Pin);
    1ad4:	ab e3       	ldi	r26, 0x3B	; 59
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	eb e3       	ldi	r30, 0x3B	; 59
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	48 2f       	mov	r20, r24
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	02 2e       	mov	r0, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <M_DIO_void_setPinValue+0xc6>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	0a 94       	dec	r0
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <M_DIO_void_setPinValue+0xc2>
    1af6:	84 2b       	or	r24, r20
    1af8:	8c 93       	st	X, r24
    1afa:	a7 c0       	rjmp	.+334    	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
				break;
		   }
			break;
		case PORTB_ID :
			switch (value)
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	39 87       	std	Y+9, r19	; 0x09
    1b04:	28 87       	std	Y+8, r18	; 0x08
    1b06:	88 85       	ldd	r24, Y+8	; 0x08
    1b08:	99 85       	ldd	r25, Y+9	; 0x09
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	31 f0       	breq	.+12     	; 0x1b1a <M_DIO_void_setPinValue+0xee>
    1b0e:	28 85       	ldd	r18, Y+8	; 0x08
    1b10:	39 85       	ldd	r19, Y+9	; 0x09
    1b12:	21 30       	cpi	r18, 0x01	; 1
    1b14:	31 05       	cpc	r19, r1
    1b16:	b1 f0       	breq	.+44     	; 0x1b44 <M_DIO_void_setPinValue+0x118>
    1b18:	98 c0       	rjmp	.+304    	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
			{
			case LOW:
				 CLR_BIT(PORTB_REG,Pin);
    1b1a:	a8 e3       	ldi	r26, 0x38	; 56
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e8 e3       	ldi	r30, 0x38	; 56
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <M_DIO_void_setPinValue+0x10c>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <M_DIO_void_setPinValue+0x108>
    1b3c:	80 95       	com	r24
    1b3e:	84 23       	and	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	83 c0       	rjmp	.+262    	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
				 break;
			case HIGH:
				 SET_BIT(PORTB_REG,Pin);
    1b44:	a8 e3       	ldi	r26, 0x38	; 56
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e8 e3       	ldi	r30, 0x38	; 56
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <M_DIO_void_setPinValue+0x136>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <M_DIO_void_setPinValue+0x132>
    1b66:	84 2b       	or	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	6f c0       	rjmp	.+222    	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
				 break;
			}
			break;
		case PORTC_ID:
			switch (value)
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	3f 83       	std	Y+7, r19	; 0x07
    1b74:	2e 83       	std	Y+6, r18	; 0x06
    1b76:	8e 81       	ldd	r24, Y+6	; 0x06
    1b78:	9f 81       	ldd	r25, Y+7	; 0x07
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	31 f0       	breq	.+12     	; 0x1b8a <M_DIO_void_setPinValue+0x15e>
    1b7e:	2e 81       	ldd	r18, Y+6	; 0x06
    1b80:	3f 81       	ldd	r19, Y+7	; 0x07
    1b82:	21 30       	cpi	r18, 0x01	; 1
    1b84:	31 05       	cpc	r19, r1
    1b86:	b1 f0       	breq	.+44     	; 0x1bb4 <M_DIO_void_setPinValue+0x188>
    1b88:	60 c0       	rjmp	.+192    	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
			{
			case LOW:
				 CLR_BIT(PORTC_REG,Pin);
    1b8a:	a5 e3       	ldi	r26, 0x35	; 53
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e5 e3       	ldi	r30, 0x35	; 53
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <M_DIO_void_setPinValue+0x17c>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <M_DIO_void_setPinValue+0x178>
    1bac:	80 95       	com	r24
    1bae:	84 23       	and	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	4b c0       	rjmp	.+150    	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
				break;
			case HIGH:
				 SET_BIT(PORTC_REG,Pin);
    1bb4:	a5 e3       	ldi	r26, 0x35	; 53
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e5 e3       	ldi	r30, 0x35	; 53
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <M_DIO_void_setPinValue+0x1a6>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <M_DIO_void_setPinValue+0x1a2>
    1bd6:	84 2b       	or	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	37 c0       	rjmp	.+110    	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
				break;
			}
			break;
		case PORTD_ID :
			 switch (value)
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	3d 83       	std	Y+5, r19	; 0x05
    1be4:	2c 83       	std	Y+4, r18	; 0x04
    1be6:	8c 81       	ldd	r24, Y+4	; 0x04
    1be8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	31 f0       	breq	.+12     	; 0x1bfa <M_DIO_void_setPinValue+0x1ce>
    1bee:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf2:	21 30       	cpi	r18, 0x01	; 1
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	b1 f0       	breq	.+44     	; 0x1c24 <M_DIO_void_setPinValue+0x1f8>
    1bf8:	28 c0       	rjmp	.+80     	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
			 {
				case LOW:
				   CLR_BIT(PORTD_REG,Pin);
    1bfa:	a2 e3       	ldi	r26, 0x32	; 50
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e2 e3       	ldi	r30, 0x32	; 50
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <M_DIO_void_setPinValue+0x1ec>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <M_DIO_void_setPinValue+0x1e8>
    1c1c:	80 95       	com	r24
    1c1e:	84 23       	and	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	13 c0       	rjmp	.+38     	; 0x1c4a <M_DIO_void_setPinValue+0x21e>
					break;
				case HIGH:
					SET_BIT(PORTD_REG,Pin);
    1c24:	a2 e3       	ldi	r26, 0x32	; 50
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e2 e3       	ldi	r30, 0x32	; 50
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <M_DIO_void_setPinValue+0x216>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <M_DIO_void_setPinValue+0x212>
    1c46:	84 2b       	or	r24, r20
    1c48:	8c 93       	st	X, r24
					break;
			 }
			 break;
		}
}
    1c4a:	2d 96       	adiw	r28, 0x0d	; 13
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <M_DIO_void_getPinValue>:
void M_DIO_void_getPinValue(u8 Port, u8 Pin, u8 *pvalue)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <M_DIO_void_getPinValue+0x6>
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <M_DIO_void_getPinValue+0x8>
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <M_DIO_void_getPinValue+0xa>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	6a 83       	std	Y+2, r22	; 0x02
    1c6e:	5c 83       	std	Y+4, r21	; 0x04
    1c70:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port){
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	3e 83       	std	Y+6, r19	; 0x06
    1c7a:	2d 83       	std	Y+5, r18	; 0x05
    1c7c:	4d 81       	ldd	r20, Y+5	; 0x05
    1c7e:	5e 81       	ldd	r21, Y+6	; 0x06
    1c80:	42 30       	cpi	r20, 0x02	; 2
    1c82:	51 05       	cpc	r21, r1
    1c84:	59 f1       	breq	.+86     	; 0x1cdc <M_DIO_void_getPinValue+0x80>
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8a:	83 30       	cpi	r24, 0x03	; 3
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	34 f4       	brge	.+12     	; 0x1c9c <M_DIO_void_getPinValue+0x40>
    1c90:	2d 81       	ldd	r18, Y+5	; 0x05
    1c92:	3e 81       	ldd	r19, Y+6	; 0x06
    1c94:	21 30       	cpi	r18, 0x01	; 1
    1c96:	31 05       	cpc	r19, r1
    1c98:	69 f0       	breq	.+26     	; 0x1cb4 <M_DIO_void_getPinValue+0x58>
    1c9a:	5b c0       	rjmp	.+182    	; 0x1d52 <M_DIO_void_getPinValue+0xf6>
    1c9c:	4d 81       	ldd	r20, Y+5	; 0x05
    1c9e:	5e 81       	ldd	r21, Y+6	; 0x06
    1ca0:	43 30       	cpi	r20, 0x03	; 3
    1ca2:	51 05       	cpc	r21, r1
    1ca4:	79 f1       	breq	.+94     	; 0x1d04 <M_DIO_void_getPinValue+0xa8>
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	84 30       	cpi	r24, 0x04	; 4
    1cac:	91 05       	cpc	r25, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <M_DIO_void_getPinValue+0x56>
    1cb0:	3d c0       	rjmp	.+122    	; 0x1d2c <M_DIO_void_getPinValue+0xd0>
    1cb2:	4f c0       	rjmp	.+158    	; 0x1d52 <M_DIO_void_getPinValue+0xf6>
	case PORTA_ID:
		*pvalue = GET_BIT(PINA_REG,Pin);
    1cb4:	e9 e3       	ldi	r30, 0x39	; 57
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	88 2f       	mov	r24, r24
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a9 01       	movw	r20, r18
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <M_DIO_void_getPinValue+0x70>
    1cc8:	55 95       	asr	r21
    1cca:	47 95       	ror	r20
    1ccc:	8a 95       	dec	r24
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <M_DIO_void_getPinValue+0x6c>
    1cd0:	ca 01       	movw	r24, r20
    1cd2:	81 70       	andi	r24, 0x01	; 1
    1cd4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cd6:	fc 81       	ldd	r31, Y+4	; 0x04
    1cd8:	80 83       	st	Z, r24
    1cda:	3b c0       	rjmp	.+118    	; 0x1d52 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTB_ID:
		*pvalue=GET_BIT(PINB_REG,Pin);
    1cdc:	e6 e3       	ldi	r30, 0x36	; 54
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	88 2f       	mov	r24, r24
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	a9 01       	movw	r20, r18
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <M_DIO_void_getPinValue+0x98>
    1cf0:	55 95       	asr	r21
    1cf2:	47 95       	ror	r20
    1cf4:	8a 95       	dec	r24
    1cf6:	e2 f7       	brpl	.-8      	; 0x1cf0 <M_DIO_void_getPinValue+0x94>
    1cf8:	ca 01       	movw	r24, r20
    1cfa:	81 70       	andi	r24, 0x01	; 1
    1cfc:	eb 81       	ldd	r30, Y+3	; 0x03
    1cfe:	fc 81       	ldd	r31, Y+4	; 0x04
    1d00:	80 83       	st	Z, r24
    1d02:	27 c0       	rjmp	.+78     	; 0x1d52 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTC_ID:
		*pvalue=GET_BIT(PINC_REG,Pin);
    1d04:	e3 e3       	ldi	r30, 0x33	; 51
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a9 01       	movw	r20, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <M_DIO_void_getPinValue+0xc0>
    1d18:	55 95       	asr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	8a 95       	dec	r24
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <M_DIO_void_getPinValue+0xbc>
    1d20:	ca 01       	movw	r24, r20
    1d22:	81 70       	andi	r24, 0x01	; 1
    1d24:	eb 81       	ldd	r30, Y+3	; 0x03
    1d26:	fc 81       	ldd	r31, Y+4	; 0x04
    1d28:	80 83       	st	Z, r24
    1d2a:	13 c0       	rjmp	.+38     	; 0x1d52 <M_DIO_void_getPinValue+0xf6>
		break;
	case PORTD_ID:
		*pvalue=GET_BIT(PIND_REG,Pin);
    1d2c:	e0 e3       	ldi	r30, 0x30	; 48
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	28 2f       	mov	r18, r24
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a9 01       	movw	r20, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <M_DIO_void_getPinValue+0xe8>
    1d40:	55 95       	asr	r21
    1d42:	47 95       	ror	r20
    1d44:	8a 95       	dec	r24
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <M_DIO_void_getPinValue+0xe4>
    1d48:	ca 01       	movw	r24, r20
    1d4a:	81 70       	andi	r24, 0x01	; 1
    1d4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d50:	80 83       	st	Z, r24
		break;
	}
}
    1d52:	26 96       	adiw	r28, 0x06	; 6
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <M_DIO_void_TogPinValue>:
void M_DIO_void_TogPinValue(u8 Port, u8 Pin)
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <M_DIO_void_TogPinValue+0x6>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <M_DIO_void_TogPinValue+0x8>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	6a 83       	std	Y+2, r22	; 0x02
	switch (Port){
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	3c 83       	std	Y+4, r19	; 0x04
    1d7c:	2b 83       	std	Y+3, r18	; 0x03
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	9c 81       	ldd	r25, Y+4	; 0x04
    1d82:	82 30       	cpi	r24, 0x02	; 2
    1d84:	91 05       	cpc	r25, r1
    1d86:	51 f1       	breq	.+84     	; 0x1ddc <M_DIO_void_TogPinValue+0x78>
    1d88:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8c:	23 30       	cpi	r18, 0x03	; 3
    1d8e:	31 05       	cpc	r19, r1
    1d90:	34 f4       	brge	.+12     	; 0x1d9e <M_DIO_void_TogPinValue+0x3a>
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	9c 81       	ldd	r25, Y+4	; 0x04
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	91 05       	cpc	r25, r1
    1d9a:	61 f0       	breq	.+24     	; 0x1db4 <M_DIO_void_TogPinValue+0x50>
    1d9c:	5a c0       	rjmp	.+180    	; 0x1e52 <M_DIO_void_TogPinValue+0xee>
    1d9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1da0:	3c 81       	ldd	r19, Y+4	; 0x04
    1da2:	23 30       	cpi	r18, 0x03	; 3
    1da4:	31 05       	cpc	r19, r1
    1da6:	71 f1       	breq	.+92     	; 0x1e04 <M_DIO_void_TogPinValue+0xa0>
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	84 30       	cpi	r24, 0x04	; 4
    1dae:	91 05       	cpc	r25, r1
    1db0:	e9 f1       	breq	.+122    	; 0x1e2c <M_DIO_void_TogPinValue+0xc8>
    1db2:	4f c0       	rjmp	.+158    	; 0x1e52 <M_DIO_void_TogPinValue+0xee>
		case PORTA_ID:
			TOG_BIT(PORTA_REG,Pin);
    1db4:	ab e3       	ldi	r26, 0x3B	; 59
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	eb e3       	ldi	r30, 0x3B	; 59
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <M_DIO_void_TogPinValue+0x6e>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <M_DIO_void_TogPinValue+0x6a>
    1dd6:	84 27       	eor	r24, r20
    1dd8:	8c 93       	st	X, r24
    1dda:	3b c0       	rjmp	.+118    	; 0x1e52 <M_DIO_void_TogPinValue+0xee>
			break;
		case PORTB_ID:
			TOG_BIT(PORTB_REG,Pin);
    1ddc:	a8 e3       	ldi	r26, 0x38	; 56
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e8 e3       	ldi	r30, 0x38	; 56
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	48 2f       	mov	r20, r24
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	02 2e       	mov	r0, r18
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <M_DIO_void_TogPinValue+0x96>
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	0a 94       	dec	r0
    1dfc:	e2 f7       	brpl	.-8      	; 0x1df6 <M_DIO_void_TogPinValue+0x92>
    1dfe:	84 27       	eor	r24, r20
    1e00:	8c 93       	st	X, r24
    1e02:	27 c0       	rjmp	.+78     	; 0x1e52 <M_DIO_void_TogPinValue+0xee>
			break;
		case PORTC_ID:
			TOG_BIT(PORTC_REG,Pin);
    1e04:	a5 e3       	ldi	r26, 0x35	; 53
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e5 e3       	ldi	r30, 0x35	; 53
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <M_DIO_void_TogPinValue+0xbe>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <M_DIO_void_TogPinValue+0xba>
    1e26:	84 27       	eor	r24, r20
    1e28:	8c 93       	st	X, r24
    1e2a:	13 c0       	rjmp	.+38     	; 0x1e52 <M_DIO_void_TogPinValue+0xee>
			break;
		case PORTD_ID:
			TOG_BIT(PORTD_REG,Pin);
    1e2c:	a2 e3       	ldi	r26, 0x32	; 50
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e2 e3       	ldi	r30, 0x32	; 50
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	48 2f       	mov	r20, r24
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	02 2e       	mov	r0, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <M_DIO_void_TogPinValue+0xe6>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <M_DIO_void_TogPinValue+0xe2>
    1e4e:	84 27       	eor	r24, r20
    1e50:	8c 93       	st	X, r24
			break;
		}


}
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	cf 91       	pop	r28
    1e5c:	df 91       	pop	r29
    1e5e:	08 95       	ret

00001e60 <M_ADC_voidInit>:
#include"ADC_priv.h"
#include"ADC_config.h"
#include "ADC_int.h"

void M_ADC_voidInit(prescaler_t copy_prescaler,vref_t copy_vref)
{
    1e60:	df 93       	push	r29
    1e62:	cf 93       	push	r28
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <M_ADC_voidInit+0x6>
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	6a 83       	std	Y+2, r22	; 0x02


//choose prescaller
	ADCSRA_REG&=ADC_PRESCALER;
    1e6e:	a6 e2       	ldi	r26, 0x26	; 38
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e6 e2       	ldi	r30, 0x26	; 38
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	88 7f       	andi	r24, 0xF8	; 248
    1e7a:	8c 93       	st	X, r24
	//INSERT VALUE
	ADCSRA_REG|=copy_prescaler;
    1e7c:	a6 e2       	ldi	r26, 0x26	; 38
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e6 e2       	ldi	r30, 0x26	; 38
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	90 81       	ld	r25, Z
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	89 2b       	or	r24, r25
    1e8a:	8c 93       	st	X, r24

//SET_BIT(ADCSRA_REG,ADPS0);
//SET_BIT(ADCSRA_REG,ADPS1);
//SET_BIT(ADCSRA_REG,ADPS2);
//STEP 2 disable interrupt
CLR_BIT(ADCSRA_REG,ADIE);
    1e8c:	a6 e2       	ldi	r26, 0x26	; 38
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e6 e2       	ldi	r30, 0x26	; 38
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	87 7f       	andi	r24, 0xF7	; 247
    1e98:	8c 93       	st	X, r24
//STEP 3config right adjust
CLR_BIT(ADMUX_REG,ADLAR_BIT);
    1e9a:	a7 e2       	ldi	r26, 0x27	; 39
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e7 e2       	ldi	r30, 0x27	; 39
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8f 7d       	andi	r24, 0xDF	; 223
    1ea6:	8c 93       	st	X, r24

// disable auto trigger

// SET vref references
 ADMUX_REG &= 0b00111111;
    1ea8:	a7 e2       	ldi	r26, 0x27	; 39
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e7 e2       	ldi	r30, 0x27	; 39
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8f 73       	andi	r24, 0x3F	; 63
    1eb4:	8c 93       	st	X, r24
SET_BIT(ADMUX_REG,REFS0_BIT);
    1eb6:	a7 e2       	ldi	r26, 0x27	; 39
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e7 e2       	ldi	r30, 0x27	; 39
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	80 64       	ori	r24, 0x40	; 64
    1ec2:	8c 93       	st	X, r24
//ENABLE ADC
SET_BIT(ADCSRA_REG,ADEN);
    1ec4:	a6 e2       	ldi	r26, 0x26	; 38
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e6 e2       	ldi	r30, 0x26	; 38
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	80 68       	ori	r24, 0x80	; 128
    1ed0:	8c 93       	st	X, r24


}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <M_ADC_voidRead>:
u16 M_ADC_voidRead(channel_t copy_channel)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <M_ADC_voidRead+0x6>
    1ee2:	0f 92       	push	r0
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	8b 83       	std	Y+3, r24	; 0x03
     u16 Value;
	//config channel
	   //APPLY NMASK
	ADMUX_REG&=ADC_CHANNEL_MASK;
    1eea:	a7 e2       	ldi	r26, 0x27	; 39
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e7 e2       	ldi	r30, 0x27	; 39
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 7e       	andi	r24, 0xE0	; 224
    1ef6:	8c 93       	st	X, r24
	   //STEP INSERT VALUE'
	ADMUX_REG|=copy_channel;
    1ef8:	a7 e2       	ldi	r26, 0x27	; 39
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e7 e2       	ldi	r30, 0x27	; 39
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	90 81       	ld	r25, Z
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	89 2b       	or	r24, r25
    1f06:	8c 93       	st	X, r24

	// single conversion START CONVERSION;
   SET_BIT(ADCSRA_REG,ADSC);
    1f08:	a6 e2       	ldi	r26, 0x26	; 38
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e6 e2       	ldi	r30, 0x26	; 38
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	80 64       	ori	r24, 0x40	; 64
    1f14:	8c 93       	st	X, r24

//step 3 pollinfg wait untill conversion is done
   while((GET_BIT(ADCSRA_REG,ADSC))==0);
    1f16:	e6 e2       	ldi	r30, 0x26	; 38
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	82 95       	swap	r24
    1f1e:	86 95       	lsr	r24
    1f20:	86 95       	lsr	r24
    1f22:	83 70       	andi	r24, 0x03	; 3
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	81 70       	andi	r24, 0x01	; 1
    1f2a:	90 70       	andi	r25, 0x00	; 0
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	99 f3       	breq	.-26     	; 0x1f16 <M_ADC_voidRead+0x3a>


//step 4 return digital value

 Value=ADCL_REG;
    1f30:	e4 e2       	ldi	r30, 0x24	; 36
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	91 81       	ldd	r25, Z+1	; 0x01
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01
 return Value;
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <H_TEMPSENSOR_void_Init>:
#include "ADC_int.h"
#include "LM35_priv.h"
#include "LM35_config.h"
#include "LM35_int.h"
void H_TEMPSENSOR_void_Init()
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
   //set direction of temp Sensor channel  pin as input
	M_DIO_void_setPinDir(PORTA_ID,TEMP_SENSOR_CHANNEL, IN);
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	60 e0       	ldi	r22, 0x00	; 0
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	// ADC init
	M_ADC_voidInit(prescaler_128, vref_Avcc);
    1f5e:	87 e0       	ldi	r24, 0x07	; 7
    1f60:	61 e0       	ldi	r22, 0x01	; 1
    1f62:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <M_ADC_voidInit>

}
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <H_TEMPSENSOR_u8_readTemp>:

u8   H_TEMPSENSOR_u8_readTemp()
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	27 97       	sbiw	r28, 0x07	; 7
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
	// step 1 : call adc to convert (read digital value)
	u16 adc_read = M_ADC_voidRead(TEMP_SENSOR_CHANNEL);
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <M_ADC_voidRead>
    1f86:	9f 83       	std	Y+7, r25	; 0x07
    1f88:	8e 83       	std	Y+6, r24	; 0x06
	// step 2: convert digital value to analog
    u32 read_mv =   ( (u32)adc_read * TEMP_VREF)/ TEMP_RES;
    1f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8e:	cc 01       	movw	r24, r24
    1f90:	a0 e0       	ldi	r26, 0x00	; 0
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	28 e8       	ldi	r18, 0x88	; 136
    1f96:	33 e1       	ldi	r19, 0x13	; 19
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 68 25 	call	0x4ad0	; 0x4ad0 <__mulsi3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	07 2e       	mov	r0, r23
    1faa:	7a e0       	ldi	r23, 0x0A	; 10
    1fac:	b6 95       	lsr	r27
    1fae:	a7 95       	ror	r26
    1fb0:	97 95       	ror	r25
    1fb2:	87 95       	ror	r24
    1fb4:	7a 95       	dec	r23
    1fb6:	d1 f7       	brne	.-12     	; 0x1fac <H_TEMPSENSOR_u8_readTemp+0x40>
    1fb8:	70 2d       	mov	r23, r0
    1fba:	8a 83       	std	Y+2, r24	; 0x02
    1fbc:	9b 83       	std	Y+3, r25	; 0x03
    1fbe:	ac 83       	std	Y+4, r26	; 0x04
    1fc0:	bd 83       	std	Y+5, r27	; 0x05
    //step 3 : convert from mv to degree C
    u8 temp =  read_mv / 10;
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc6:	ac 81       	ldd	r26, Y+4	; 0x04
    1fc8:	bd 81       	ldd	r27, Y+5	; 0x05
    1fca:	2a e0       	ldi	r18, 0x0A	; 10
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__udivmodsi4>
    1fda:	da 01       	movw	r26, r20
    1fdc:	c9 01       	movw	r24, r18
    1fde:	89 83       	std	Y+1, r24	; 0x01
    //step 4 : return temp
    return temp;
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe2:	27 96       	adiw	r28, 0x07	; 7
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <H_Led_void_ledInit>:
#include "LED_priv.h"
#include"LED_config.h"
#include"LED_int.h"

void  H_Led_void_ledInit(u8 LedID)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <H_Led_void_ledInit+0x6>
    1ffa:	0f 92       	push	r0
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	3b 83       	std	Y+3, r19	; 0x03
    200a:	2a 83       	std	Y+2, r18	; 0x02
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	9b 81       	ldd	r25, Y+3	; 0x03
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	91 05       	cpc	r25, r1
    2014:	79 f0       	breq	.+30     	; 0x2034 <H_Led_void_ledInit+0x40>
    2016:	2a 81       	ldd	r18, Y+2	; 0x02
    2018:	3b 81       	ldd	r19, Y+3	; 0x03
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	31 05       	cpc	r19, r1
    201e:	81 f0       	breq	.+32     	; 0x2040 <H_Led_void_ledInit+0x4c>
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	89 f4       	brne	.+34     	; 0x204a <H_Led_void_ledInit+0x56>
	{
	case RED_LED :
			M_DIO_void_setPinDir(LED_RED_PORT,  LED_RED_PIN , OUT);
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
    2032:	0b c0       	rjmp	.+22     	; 0x204a <H_Led_void_ledInit+0x56>
		break;
	case GRN_LED :
			M_DIO_void_setPinDir(LED_GRN_PORT,  LED_GRN_PIN , OUT);
    2034:	83 e0       	ldi	r24, 0x03	; 3
    2036:	62 e0       	ldi	r22, 0x02	; 2
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
    203e:	05 c0       	rjmp	.+10     	; 0x204a <H_Led_void_ledInit+0x56>
			break;
	case BLU_LED :
			M_DIO_void_setPinDir(LED_BLU_PORT,  LED_BLU_PIN , OUT);
    2040:	83 e0       	ldi	r24, 0x03	; 3
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
			break;
	}
}
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <H_Led_void_setON>:


void  H_Led_void_setON(u8 LedID)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	00 d0       	rcall	.+0      	; 0x205c <H_Led_void_setON+0x6>
    205c:	0f 92       	push	r0
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	3b 83       	std	Y+3, r19	; 0x03
    206c:	2a 83       	std	Y+2, r18	; 0x02
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	9b 81       	ldd	r25, Y+3	; 0x03
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	91 05       	cpc	r25, r1
    2076:	79 f0       	breq	.+30     	; 0x2096 <H_Led_void_setON+0x40>
    2078:	2a 81       	ldd	r18, Y+2	; 0x02
    207a:	3b 81       	ldd	r19, Y+3	; 0x03
    207c:	22 30       	cpi	r18, 0x02	; 2
    207e:	31 05       	cpc	r19, r1
    2080:	81 f0       	breq	.+32     	; 0x20a2 <H_Led_void_setON+0x4c>
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	9b 81       	ldd	r25, Y+3	; 0x03
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	89 f4       	brne	.+34     	; 0x20ac <H_Led_void_setON+0x56>
	{
	case RED_LED :
#if (LED_RED_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,HIGH);
    208a:	83 e0       	ldi	r24, 0x03	; 3
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    2094:	0b c0       	rjmp	.+22     	; 0x20ac <H_Led_void_setON+0x56>
#endif
		break;

	case GRN_LED :
#if (LED_GRN_DIRECTION == LED_FORWARD )
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
    2096:	83 e0       	ldi	r24, 0x03	; 3
    2098:	62 e0       	ldi	r22, 0x02	; 2
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    20a0:	05 c0       	rjmp	.+10     	; 0x20ac <H_Led_void_setON+0x56>
		M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
#endif
		break;
	case BLU_LED :
	#if (LED_BLU_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
    20a2:	83 e0       	ldi	r24, 0x03	; 3
    20a4:	61 e0       	ldi	r22, 0x01	; 1
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
			break;



	}
}
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <H_Led_void_setOFF>:
void  H_Led_void_setOFF(u8 LedID)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <H_Led_void_setOFF+0x6>
    20be:	0f 92       	push	r0
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	89 83       	std	Y+1, r24	; 0x01
	switch(LedID)
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	3b 83       	std	Y+3, r19	; 0x03
    20ce:	2a 83       	std	Y+2, r18	; 0x02
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	9b 81       	ldd	r25, Y+3	; 0x03
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	91 05       	cpc	r25, r1
    20d8:	79 f0       	breq	.+30     	; 0x20f8 <H_Led_void_setOFF+0x40>
    20da:	2a 81       	ldd	r18, Y+2	; 0x02
    20dc:	3b 81       	ldd	r19, Y+3	; 0x03
    20de:	22 30       	cpi	r18, 0x02	; 2
    20e0:	31 05       	cpc	r19, r1
    20e2:	81 f0       	breq	.+32     	; 0x2104 <H_Led_void_setOFF+0x4c>
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	9b 81       	ldd	r25, Y+3	; 0x03
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	89 f4       	brne	.+34     	; 0x210e <H_Led_void_setOFF+0x56>
		{
		case RED_LED :
	#if (LED_RED_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_RED_PORT,LED_RED_PIN,LOW);
    20ec:	83 e0       	ldi	r24, 0x03	; 3
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    20f6:	0b c0       	rjmp	.+22     	; 0x210e <H_Led_void_setOFF+0x56>
	#endif
			break;

		case GRN_LED :
	#if (LED_GRN_DIRECTION == LED_FORWARD )
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
    20f8:	83 e0       	ldi	r24, 0x03	; 3
    20fa:	62 e0       	ldi	r22, 0x02	; 2
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    2102:	05 c0       	rjmp	.+10     	; 0x210e <H_Led_void_setOFF+0x56>
			M_DIO_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
	#endif
			break;
		case BLU_LED :
		#if (LED_BLU_DIRECTION == LED_FORWARD )
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,LOW);
    2104:	83 e0       	ldi	r24, 0x03	; 3
    2106:	61 e0       	ldi	r22, 0x01	; 1
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
				M_DIO_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
		#endif
				break;

		}
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <H_Led_void_toggle>:

void  H_Led_void_toggle(u8 LedID)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <H_Led_void_toggle+0x6>
    2120:	0f 92       	push	r0
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	89 83       	std	Y+1, r24	; 0x01
	switch (LedID)
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	28 2f       	mov	r18, r24
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	3b 83       	std	Y+3, r19	; 0x03
    2130:	2a 83       	std	Y+2, r18	; 0x02
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	9b 81       	ldd	r25, Y+3	; 0x03
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	91 05       	cpc	r25, r1
    213a:	71 f0       	breq	.+28     	; 0x2158 <H_Led_void_toggle+0x3e>
    213c:	2a 81       	ldd	r18, Y+2	; 0x02
    213e:	3b 81       	ldd	r19, Y+3	; 0x03
    2140:	22 30       	cpi	r18, 0x02	; 2
    2142:	31 05       	cpc	r19, r1
    2144:	71 f0       	breq	.+28     	; 0x2162 <H_Led_void_toggle+0x48>
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	9b 81       	ldd	r25, Y+3	; 0x03
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	71 f4       	brne	.+28     	; 0x216a <H_Led_void_toggle+0x50>
		{
		case RED_LED :
			 M_DIO_void_TogPinValue(LED_RED_PORT,LED_RED_PIN);
    214e:	83 e0       	ldi	r24, 0x03	; 3
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <M_DIO_void_TogPinValue>
    2156:	09 c0       	rjmp	.+18     	; 0x216a <H_Led_void_toggle+0x50>

			break;
		case GRN_LED :
			 M_DIO_void_TogPinValue(LED_GRN_PORT, LED_GRN_PIN);
    2158:	83 e0       	ldi	r24, 0x03	; 3
    215a:	62 e0       	ldi	r22, 0x02	; 2
    215c:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <M_DIO_void_TogPinValue>
    2160:	04 c0       	rjmp	.+8      	; 0x216a <H_Led_void_toggle+0x50>

				break;
		case BLU_LED :
			 M_DIO_void_TogPinValue(LED_BLU_PORT,LED_BLU_PIN);
    2162:	83 e0       	ldi	r24, 0x03	; 3
    2164:	61 e0       	ldi	r22, 0x01	; 1
    2166:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <M_DIO_void_TogPinValue>

				break;
		}
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <Animation1>:

void Animation1()
{
    2176:	0f 93       	push	r16
    2178:	1f 93       	push	r17
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	c4 55       	subi	r28, 0x54	; 84
    2184:	d0 40       	sbci	r29, 0x00	; 0
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    2196:	82 e0       	ldi	r24, 0x02	; 2
    2198:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
    219c:	fe 01       	movw	r30, r28
    219e:	ef 5a       	subi	r30, 0xAF	; 175
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	aa ef       	ldi	r26, 0xFA	; 250
    21a8:	b3 e4       	ldi	r27, 0x43	; 67
    21aa:	80 83       	st	Z, r24
    21ac:	91 83       	std	Z+1, r25	; 0x01
    21ae:	a2 83       	std	Z+2, r26	; 0x02
    21b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b2:	8e 01       	movw	r16, r28
    21b4:	03 5b       	subi	r16, 0xB3	; 179
    21b6:	1f 4f       	sbci	r17, 0xFF	; 255
    21b8:	fe 01       	movw	r30, r28
    21ba:	ef 5a       	subi	r30, 0xAF	; 175
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	60 81       	ld	r22, Z
    21c0:	71 81       	ldd	r23, Z+1	; 0x01
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	4a e7       	ldi	r20, 0x7A	; 122
    21cc:	55 e4       	ldi	r21, 0x45	; 69
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	f8 01       	movw	r30, r16
    21d8:	80 83       	st	Z, r24
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	a2 83       	std	Z+2, r26	; 0x02
    21de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21e0:	fe 01       	movw	r30, r28
    21e2:	e3 5b       	subi	r30, 0xB3	; 179
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	60 81       	ld	r22, Z
    21e8:	71 81       	ldd	r23, Z+1	; 0x01
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e8       	ldi	r20, 0x80	; 128
    21f4:	5f e3       	ldi	r21, 0x3F	; 63
    21f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21fa:	88 23       	and	r24, r24
    21fc:	44 f4       	brge	.+16     	; 0x220e <Animation1+0x98>
		__ticks = 1;
    21fe:	fe 01       	movw	r30, r28
    2200:	e5 5b       	subi	r30, 0xB5	; 181
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	80 83       	st	Z, r24
    220c:	64 c0       	rjmp	.+200    	; 0x22d6 <Animation1+0x160>
	else if (__tmp > 65535)
    220e:	fe 01       	movw	r30, r28
    2210:	e3 5b       	subi	r30, 0xB3	; 179
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	60 81       	ld	r22, Z
    2216:	71 81       	ldd	r23, Z+1	; 0x01
    2218:	82 81       	ldd	r24, Z+2	; 0x02
    221a:	93 81       	ldd	r25, Z+3	; 0x03
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	3f ef       	ldi	r19, 0xFF	; 255
    2220:	4f e7       	ldi	r20, 0x7F	; 127
    2222:	57 e4       	ldi	r21, 0x47	; 71
    2224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2228:	18 16       	cp	r1, r24
    222a:	0c f0       	brlt	.+2      	; 0x222e <Animation1+0xb8>
    222c:	43 c0       	rjmp	.+134    	; 0x22b4 <Animation1+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222e:	fe 01       	movw	r30, r28
    2230:	ef 5a       	subi	r30, 0xAF	; 175
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	60 81       	ld	r22, Z
    2236:	71 81       	ldd	r23, Z+1	; 0x01
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e2       	ldi	r20, 0x20	; 32
    2242:	51 e4       	ldi	r21, 0x41	; 65
    2244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	8e 01       	movw	r16, r28
    224e:	05 5b       	subi	r16, 0xB5	; 181
    2250:	1f 4f       	sbci	r17, 0xFF	; 255
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	f8 01       	movw	r30, r16
    2260:	91 83       	std	Z+1, r25	; 0x01
    2262:	80 83       	st	Z, r24
    2264:	1f c0       	rjmp	.+62     	; 0x22a4 <Animation1+0x12e>
    2266:	fe 01       	movw	r30, r28
    2268:	e7 5b       	subi	r30, 0xB7	; 183
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	80 e9       	ldi	r24, 0x90	; 144
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	91 83       	std	Z+1, r25	; 0x01
    2272:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2274:	fe 01       	movw	r30, r28
    2276:	e7 5b       	subi	r30, 0xB7	; 183
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 81       	ld	r24, Z
    227c:	91 81       	ldd	r25, Z+1	; 0x01
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <Animation1+0x108>
    2282:	fe 01       	movw	r30, r28
    2284:	e7 5b       	subi	r30, 0xB7	; 183
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	91 83       	std	Z+1, r25	; 0x01
    228a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228c:	de 01       	movw	r26, r28
    228e:	a5 5b       	subi	r26, 0xB5	; 181
    2290:	bf 4f       	sbci	r27, 0xFF	; 255
    2292:	fe 01       	movw	r30, r28
    2294:	e5 5b       	subi	r30, 0xB5	; 181
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	91 81       	ldd	r25, Z+1	; 0x01
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	11 96       	adiw	r26, 0x01	; 1
    22a0:	9c 93       	st	X, r25
    22a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a4:	fe 01       	movw	r30, r28
    22a6:	e5 5b       	subi	r30, 0xB5	; 181
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	d1 f6       	brne	.-76     	; 0x2266 <Animation1+0xf0>
    22b2:	27 c0       	rjmp	.+78     	; 0x2302 <Animation1+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b4:	8e 01       	movw	r16, r28
    22b6:	05 5b       	subi	r16, 0xB5	; 181
    22b8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ba:	fe 01       	movw	r30, r28
    22bc:	e3 5b       	subi	r30, 0xB3	; 179
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	93 81       	ldd	r25, Z+3	; 0x03
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	f8 01       	movw	r30, r16
    22d2:	91 83       	std	Z+1, r25	; 0x01
    22d4:	80 83       	st	Z, r24
    22d6:	de 01       	movw	r26, r28
    22d8:	a9 5b       	subi	r26, 0xB9	; 185
    22da:	bf 4f       	sbci	r27, 0xFF	; 255
    22dc:	fe 01       	movw	r30, r28
    22de:	e5 5b       	subi	r30, 0xB5	; 181
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	8d 93       	st	X+, r24
    22e8:	9c 93       	st	X, r25
    22ea:	fe 01       	movw	r30, r28
    22ec:	e9 5b       	subi	r30, 0xB9	; 185
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	80 81       	ld	r24, Z
    22f2:	91 81       	ldd	r25, Z+1	; 0x01
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <Animation1+0x17e>
    22f8:	fe 01       	movw	r30, r28
    22fa:	e9 5b       	subi	r30, 0xB9	; 185
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	91 83       	std	Z+1, r25	; 0x01
    2300:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    2308:	82 e0       	ldi	r24, 0x02	; 2
    230a:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
    230e:	fe 01       	movw	r30, r28
    2310:	ed 5b       	subi	r30, 0xBD	; 189
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	aa ef       	ldi	r26, 0xFA	; 250
    231a:	b3 e4       	ldi	r27, 0x43	; 67
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	8e 01       	movw	r16, r28
    2326:	01 5c       	subi	r16, 0xC1	; 193
    2328:	1f 4f       	sbci	r17, 0xFF	; 255
    232a:	fe 01       	movw	r30, r28
    232c:	ed 5b       	subi	r30, 0xBD	; 189
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4a e7       	ldi	r20, 0x7A	; 122
    233e:	55 e4       	ldi	r21, 0x45	; 69
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	f8 01       	movw	r30, r16
    234a:	80 83       	st	Z, r24
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	a2 83       	std	Z+2, r26	; 0x02
    2350:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2352:	fe 01       	movw	r30, r28
    2354:	ff 96       	adiw	r30, 0x3f	; 63
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e8       	ldi	r20, 0x80	; 128
    2364:	5f e3       	ldi	r21, 0x3F	; 63
    2366:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    236a:	88 23       	and	r24, r24
    236c:	2c f4       	brge	.+10     	; 0x2378 <Animation1+0x202>
		__ticks = 1;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	9e af       	std	Y+62, r25	; 0x3e
    2374:	8d af       	std	Y+61, r24	; 0x3d
    2376:	46 c0       	rjmp	.+140    	; 0x2404 <Animation1+0x28e>
	else if (__tmp > 65535)
    2378:	fe 01       	movw	r30, r28
    237a:	ff 96       	adiw	r30, 0x3f	; 63
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	93 81       	ldd	r25, Z+3	; 0x03
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	3f ef       	ldi	r19, 0xFF	; 255
    2388:	4f e7       	ldi	r20, 0x7F	; 127
    238a:	57 e4       	ldi	r21, 0x47	; 71
    238c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2390:	18 16       	cp	r1, r24
    2392:	64 f5       	brge	.+88     	; 0x23ec <Animation1+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2394:	fe 01       	movw	r30, r28
    2396:	ed 5b       	subi	r30, 0xBD	; 189
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e2       	ldi	r20, 0x20	; 32
    23a8:	51 e4       	ldi	r21, 0x41	; 65
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9e af       	std	Y+62, r25	; 0x3e
    23c0:	8d af       	std	Y+61, r24	; 0x3d
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <Animation1+0x26c>
    23c4:	80 e9       	ldi	r24, 0x90	; 144
    23c6:	91 e0       	ldi	r25, 0x01	; 1
    23c8:	9c af       	std	Y+60, r25	; 0x3c
    23ca:	8b af       	std	Y+59, r24	; 0x3b
    23cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    23ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <Animation1+0x25a>
    23d4:	9c af       	std	Y+60, r25	; 0x3c
    23d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    23da:	9e ad       	ldd	r25, Y+62	; 0x3e
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	9e af       	std	Y+62, r25	; 0x3e
    23e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    23e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	69 f7       	brne	.-38     	; 0x23c4 <Animation1+0x24e>
    23ea:	16 c0       	rjmp	.+44     	; 0x2418 <Animation1+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ec:	fe 01       	movw	r30, r28
    23ee:	ff 96       	adiw	r30, 0x3f	; 63
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	9e af       	std	Y+62, r25	; 0x3e
    2402:	8d af       	std	Y+61, r24	; 0x3d
    2404:	8d ad       	ldd	r24, Y+61	; 0x3d
    2406:	9e ad       	ldd	r25, Y+62	; 0x3e
    2408:	9a af       	std	Y+58, r25	; 0x3a
    240a:	89 af       	std	Y+57, r24	; 0x39
    240c:	89 ad       	ldd	r24, Y+57	; 0x39
    240e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <Animation1+0x29a>
    2414:	9a af       	std	Y+58, r25	; 0x3a
    2416:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    2418:	82 e0       	ldi	r24, 0x02	; 2
    241a:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	aa ef       	ldi	r26, 0xFA	; 250
    242a:	b3 e4       	ldi	r27, 0x43	; 67
    242c:	8d ab       	std	Y+53, r24	; 0x35
    242e:	9e ab       	std	Y+54, r25	; 0x36
    2430:	af ab       	std	Y+55, r26	; 0x37
    2432:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2434:	6d a9       	ldd	r22, Y+53	; 0x35
    2436:	7e a9       	ldd	r23, Y+54	; 0x36
    2438:	8f a9       	ldd	r24, Y+55	; 0x37
    243a:	98 ad       	ldd	r25, Y+56	; 0x38
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	4a e7       	ldi	r20, 0x7A	; 122
    2442:	55 e4       	ldi	r21, 0x45	; 69
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	89 ab       	std	Y+49, r24	; 0x31
    244e:	9a ab       	std	Y+50, r25	; 0x32
    2450:	ab ab       	std	Y+51, r26	; 0x33
    2452:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2454:	69 a9       	ldd	r22, Y+49	; 0x31
    2456:	7a a9       	ldd	r23, Y+50	; 0x32
    2458:	8b a9       	ldd	r24, Y+51	; 0x33
    245a:	9c a9       	ldd	r25, Y+52	; 0x34
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e8       	ldi	r20, 0x80	; 128
    2462:	5f e3       	ldi	r21, 0x3F	; 63
    2464:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2468:	88 23       	and	r24, r24
    246a:	2c f4       	brge	.+10     	; 0x2476 <Animation1+0x300>
		__ticks = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	98 ab       	std	Y+48, r25	; 0x30
    2472:	8f a7       	std	Y+47, r24	; 0x2f
    2474:	3f c0       	rjmp	.+126    	; 0x24f4 <Animation1+0x37e>
	else if (__tmp > 65535)
    2476:	69 a9       	ldd	r22, Y+49	; 0x31
    2478:	7a a9       	ldd	r23, Y+50	; 0x32
    247a:	8b a9       	ldd	r24, Y+51	; 0x33
    247c:	9c a9       	ldd	r25, Y+52	; 0x34
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	3f ef       	ldi	r19, 0xFF	; 255
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	57 e4       	ldi	r21, 0x47	; 71
    2486:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	4c f5       	brge	.+82     	; 0x24e0 <Animation1+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248e:	6d a9       	ldd	r22, Y+53	; 0x35
    2490:	7e a9       	ldd	r23, Y+54	; 0x36
    2492:	8f a9       	ldd	r24, Y+55	; 0x37
    2494:	98 ad       	ldd	r25, Y+56	; 0x38
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	98 ab       	std	Y+48, r25	; 0x30
    24b4:	8f a7       	std	Y+47, r24	; 0x2f
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <Animation1+0x360>
    24b8:	80 e9       	ldi	r24, 0x90	; 144
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	9e a7       	std	Y+46, r25	; 0x2e
    24be:	8d a7       	std	Y+45, r24	; 0x2d
    24c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    24c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <Animation1+0x34e>
    24c8:	9e a7       	std	Y+46, r25	; 0x2e
    24ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ce:	98 a9       	ldd	r25, Y+48	; 0x30
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	98 ab       	std	Y+48, r25	; 0x30
    24d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d8:	98 a9       	ldd	r25, Y+48	; 0x30
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <Animation1+0x342>
    24de:	14 c0       	rjmp	.+40     	; 0x2508 <Animation1+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	69 a9       	ldd	r22, Y+49	; 0x31
    24e2:	7a a9       	ldd	r23, Y+50	; 0x32
    24e4:	8b a9       	ldd	r24, Y+51	; 0x33
    24e6:	9c a9       	ldd	r25, Y+52	; 0x34
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	98 ab       	std	Y+48, r25	; 0x30
    24f2:	8f a7       	std	Y+47, r24	; 0x2f
    24f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f6:	98 a9       	ldd	r25, Y+48	; 0x30
    24f8:	9c a7       	std	Y+44, r25	; 0x2c
    24fa:	8b a7       	std	Y+43, r24	; 0x2b
    24fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    24fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <Animation1+0x38a>
    2504:	9c a7       	std	Y+44, r25	; 0x2c
    2506:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    2508:	82 e0       	ldi	r24, 0x02	; 2
    250a:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
    H_Led_void_setOFF(GRN_LED);
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	aa ef       	ldi	r26, 0xFA	; 250
    251a:	b3 e4       	ldi	r27, 0x43	; 67
    251c:	8f a3       	std	Y+39, r24	; 0x27
    251e:	98 a7       	std	Y+40, r25	; 0x28
    2520:	a9 a7       	std	Y+41, r26	; 0x29
    2522:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2524:	6f a1       	ldd	r22, Y+39	; 0x27
    2526:	78 a5       	ldd	r23, Y+40	; 0x28
    2528:	89 a5       	ldd	r24, Y+41	; 0x29
    252a:	9a a5       	ldd	r25, Y+42	; 0x2a
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	4a e7       	ldi	r20, 0x7A	; 122
    2532:	55 e4       	ldi	r21, 0x45	; 69
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	8b a3       	std	Y+35, r24	; 0x23
    253e:	9c a3       	std	Y+36, r25	; 0x24
    2540:	ad a3       	std	Y+37, r26	; 0x25
    2542:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2544:	6b a1       	ldd	r22, Y+35	; 0x23
    2546:	7c a1       	ldd	r23, Y+36	; 0x24
    2548:	8d a1       	ldd	r24, Y+37	; 0x25
    254a:	9e a1       	ldd	r25, Y+38	; 0x26
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e8       	ldi	r20, 0x80	; 128
    2552:	5f e3       	ldi	r21, 0x3F	; 63
    2554:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2558:	88 23       	and	r24, r24
    255a:	2c f4       	brge	.+10     	; 0x2566 <Animation1+0x3f0>
		__ticks = 1;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9a a3       	std	Y+34, r25	; 0x22
    2562:	89 a3       	std	Y+33, r24	; 0x21
    2564:	3f c0       	rjmp	.+126    	; 0x25e4 <Animation1+0x46e>
	else if (__tmp > 65535)
    2566:	6b a1       	ldd	r22, Y+35	; 0x23
    2568:	7c a1       	ldd	r23, Y+36	; 0x24
    256a:	8d a1       	ldd	r24, Y+37	; 0x25
    256c:	9e a1       	ldd	r25, Y+38	; 0x26
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	3f ef       	ldi	r19, 0xFF	; 255
    2572:	4f e7       	ldi	r20, 0x7F	; 127
    2574:	57 e4       	ldi	r21, 0x47	; 71
    2576:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    257a:	18 16       	cp	r1, r24
    257c:	4c f5       	brge	.+82     	; 0x25d0 <Animation1+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257e:	6f a1       	ldd	r22, Y+39	; 0x27
    2580:	78 a5       	ldd	r23, Y+40	; 0x28
    2582:	89 a5       	ldd	r24, Y+41	; 0x29
    2584:	9a a5       	ldd	r25, Y+42	; 0x2a
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e2       	ldi	r20, 0x20	; 32
    258c:	51 e4       	ldi	r21, 0x41	; 65
    258e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9a a3       	std	Y+34, r25	; 0x22
    25a4:	89 a3       	std	Y+33, r24	; 0x21
    25a6:	0f c0       	rjmp	.+30     	; 0x25c6 <Animation1+0x450>
    25a8:	80 e9       	ldi	r24, 0x90	; 144
    25aa:	91 e0       	ldi	r25, 0x01	; 1
    25ac:	98 a3       	std	Y+32, r25	; 0x20
    25ae:	8f 8f       	std	Y+31, r24	; 0x1f
    25b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b2:	98 a1       	ldd	r25, Y+32	; 0x20
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <Animation1+0x43e>
    25b8:	98 a3       	std	Y+32, r25	; 0x20
    25ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25bc:	89 a1       	ldd	r24, Y+33	; 0x21
    25be:	9a a1       	ldd	r25, Y+34	; 0x22
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	9a a3       	std	Y+34, r25	; 0x22
    25c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c6:	89 a1       	ldd	r24, Y+33	; 0x21
    25c8:	9a a1       	ldd	r25, Y+34	; 0x22
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	69 f7       	brne	.-38     	; 0x25a8 <Animation1+0x432>
    25ce:	14 c0       	rjmp	.+40     	; 0x25f8 <Animation1+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d0:	6b a1       	ldd	r22, Y+35	; 0x23
    25d2:	7c a1       	ldd	r23, Y+36	; 0x24
    25d4:	8d a1       	ldd	r24, Y+37	; 0x25
    25d6:	9e a1       	ldd	r25, Y+38	; 0x26
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	9a a3       	std	Y+34, r25	; 0x22
    25e2:	89 a3       	std	Y+33, r24	; 0x21
    25e4:	89 a1       	ldd	r24, Y+33	; 0x21
    25e6:	9a a1       	ldd	r25, Y+34	; 0x22
    25e8:	9e 8f       	std	Y+30, r25	; 0x1e
    25ea:	8d 8f       	std	Y+29, r24	; 0x1d
    25ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <Animation1+0x47a>
    25f4:	9e 8f       	std	Y+30, r25	; 0x1e
    25f6:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(RED_LED);
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
    H_Led_void_setON(GRN_LED);
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	aa ef       	ldi	r26, 0xFA	; 250
    260a:	b3 e4       	ldi	r27, 0x43	; 67
    260c:	89 8f       	std	Y+25, r24	; 0x19
    260e:	9a 8f       	std	Y+26, r25	; 0x1a
    2610:	ab 8f       	std	Y+27, r26	; 0x1b
    2612:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	69 8d       	ldd	r22, Y+25	; 0x19
    2616:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    261a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a e7       	ldi	r20, 0x7A	; 122
    2622:	55 e4       	ldi	r21, 0x45	; 69
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8d 8b       	std	Y+21, r24	; 0x15
    262e:	9e 8b       	std	Y+22, r25	; 0x16
    2630:	af 8b       	std	Y+23, r26	; 0x17
    2632:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2634:	6d 89       	ldd	r22, Y+21	; 0x15
    2636:	7e 89       	ldd	r23, Y+22	; 0x16
    2638:	8f 89       	ldd	r24, Y+23	; 0x17
    263a:	98 8d       	ldd	r25, Y+24	; 0x18
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <Animation1+0x4e0>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9c 8b       	std	Y+20, r25	; 0x14
    2652:	8b 8b       	std	Y+19, r24	; 0x13
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <Animation1+0x55e>
	else if (__tmp > 65535)
    2656:	6d 89       	ldd	r22, Y+21	; 0x15
    2658:	7e 89       	ldd	r23, Y+22	; 0x16
    265a:	8f 89       	ldd	r24, Y+23	; 0x17
    265c:	98 8d       	ldd	r25, Y+24	; 0x18
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <Animation1+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	69 8d       	ldd	r22, Y+25	; 0x19
    2670:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2672:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2674:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9c 8b       	std	Y+20, r25	; 0x14
    2694:	8b 8b       	std	Y+19, r24	; 0x13
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <Animation1+0x540>
    2698:	80 e9       	ldi	r24, 0x90	; 144
    269a:	91 e0       	ldi	r25, 0x01	; 1
    269c:	9a 8b       	std	Y+18, r25	; 0x12
    269e:	89 8b       	std	Y+17, r24	; 0x11
    26a0:	89 89       	ldd	r24, Y+17	; 0x11
    26a2:	9a 89       	ldd	r25, Y+18	; 0x12
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <Animation1+0x52e>
    26a8:	9a 8b       	std	Y+18, r25	; 0x12
    26aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	8b 89       	ldd	r24, Y+19	; 0x13
    26ae:	9c 89       	ldd	r25, Y+20	; 0x14
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	9c 8b       	std	Y+20, r25	; 0x14
    26b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <Animation1+0x522>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <Animation1+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	6d 89       	ldd	r22, Y+21	; 0x15
    26c2:	7e 89       	ldd	r23, Y+22	; 0x16
    26c4:	8f 89       	ldd	r24, Y+23	; 0x17
    26c6:	98 8d       	ldd	r25, Y+24	; 0x18
    26c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9c 8b       	std	Y+20, r25	; 0x14
    26d2:	8b 8b       	std	Y+19, r24	; 0x13
    26d4:	8b 89       	ldd	r24, Y+19	; 0x13
    26d6:	9c 89       	ldd	r25, Y+20	; 0x14
    26d8:	98 8b       	std	Y+16, r25	; 0x10
    26da:	8f 87       	std	Y+15, r24	; 0x0f
    26dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    26de:	98 89       	ldd	r25, Y+16	; 0x10
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <Animation1+0x56a>
    26e4:	98 8b       	std	Y+16, r25	; 0x10
    26e6:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
     H_Led_void_setOFF(RED_LED);
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
     H_Led_void_setOFF(GRN_LED);
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	aa ef       	ldi	r26, 0xFA	; 250
    26fa:	b3 e4       	ldi	r27, 0x43	; 67
    26fc:	8b 87       	std	Y+11, r24	; 0x0b
    26fe:	9c 87       	std	Y+12, r25	; 0x0c
    2700:	ad 87       	std	Y+13, r26	; 0x0d
    2702:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2704:	6b 85       	ldd	r22, Y+11	; 0x0b
    2706:	7c 85       	ldd	r23, Y+12	; 0x0c
    2708:	8d 85       	ldd	r24, Y+13	; 0x0d
    270a:	9e 85       	ldd	r25, Y+14	; 0x0e
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a e7       	ldi	r20, 0x7A	; 122
    2712:	55 e4       	ldi	r21, 0x45	; 69
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8f 83       	std	Y+7, r24	; 0x07
    271e:	98 87       	std	Y+8, r25	; 0x08
    2720:	a9 87       	std	Y+9, r26	; 0x09
    2722:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2724:	6f 81       	ldd	r22, Y+7	; 0x07
    2726:	78 85       	ldd	r23, Y+8	; 0x08
    2728:	89 85       	ldd	r24, Y+9	; 0x09
    272a:	9a 85       	ldd	r25, Y+10	; 0x0a
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e8       	ldi	r20, 0x80	; 128
    2732:	5f e3       	ldi	r21, 0x3F	; 63
    2734:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2738:	88 23       	and	r24, r24
    273a:	2c f4       	brge	.+10     	; 0x2746 <Animation1+0x5d0>
		__ticks = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
    2744:	3f c0       	rjmp	.+126    	; 0x27c4 <Animation1+0x64e>
	else if (__tmp > 65535)
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	3f ef       	ldi	r19, 0xFF	; 255
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	57 e4       	ldi	r21, 0x47	; 71
    2756:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    275a:	18 16       	cp	r1, r24
    275c:	4c f5       	brge	.+82     	; 0x27b0 <Animation1+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2760:	7c 85       	ldd	r23, Y+12	; 0x0c
    2762:	8d 85       	ldd	r24, Y+13	; 0x0d
    2764:	9e 85       	ldd	r25, Y+14	; 0x0e
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e2       	ldi	r20, 0x20	; 32
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <Animation1+0x630>
    2788:	80 e9       	ldi	r24, 0x90	; 144
    278a:	91 e0       	ldi	r25, 0x01	; 1
    278c:	9c 83       	std	Y+4, r25	; 0x04
    278e:	8b 83       	std	Y+3, r24	; 0x03
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <Animation1+0x61e>
    2798:	9c 83       	std	Y+4, r25	; 0x04
    279a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	9e 81       	ldd	r25, Y+6	; 0x06
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	69 f7       	brne	.-38     	; 0x2788 <Animation1+0x612>
    27ae:	14 c0       	rjmp	.+40     	; 0x27d8 <Animation1+0x662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b0:	6f 81       	ldd	r22, Y+7	; 0x07
    27b2:	78 85       	ldd	r23, Y+8	; 0x08
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9e 83       	std	Y+6, r25	; 0x06
    27c2:	8d 83       	std	Y+5, r24	; 0x05
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	9e 81       	ldd	r25, Y+6	; 0x06
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <Animation1+0x65a>
    27d4:	9a 83       	std	Y+2, r25	; 0x02
    27d6:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    27d8:	cc 5a       	subi	r28, 0xAC	; 172
    27da:	df 4f       	sbci	r29, 0xFF	; 255
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	cf 91       	pop	r28
    27e8:	df 91       	pop	r29
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	08 95       	ret

000027f0 <Animation2>:
void Animation2()
{
    27f0:	0f 93       	push	r16
    27f2:	1f 93       	push	r17
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	c4 55       	subi	r28, 0x54	; 84
    27fe:	d0 40       	sbci	r29, 0x00	; 0
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
    2810:	fe 01       	movw	r30, r28
    2812:	ef 5a       	subi	r30, 0xAF	; 175
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	aa ef       	ldi	r26, 0xFA	; 250
    281c:	b3 e4       	ldi	r27, 0x43	; 67
    281e:	80 83       	st	Z, r24
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	a2 83       	std	Z+2, r26	; 0x02
    2824:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2826:	8e 01       	movw	r16, r28
    2828:	03 5b       	subi	r16, 0xB3	; 179
    282a:	1f 4f       	sbci	r17, 0xFF	; 255
    282c:	fe 01       	movw	r30, r28
    282e:	ef 5a       	subi	r30, 0xAF	; 175
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	60 81       	ld	r22, Z
    2834:	71 81       	ldd	r23, Z+1	; 0x01
    2836:	82 81       	ldd	r24, Z+2	; 0x02
    2838:	93 81       	ldd	r25, Z+3	; 0x03
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a e7       	ldi	r20, 0x7A	; 122
    2840:	55 e4       	ldi	r21, 0x45	; 69
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	f8 01       	movw	r30, r16
    284c:	80 83       	st	Z, r24
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	a2 83       	std	Z+2, r26	; 0x02
    2852:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2854:	fe 01       	movw	r30, r28
    2856:	e3 5b       	subi	r30, 0xB3	; 179
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e8       	ldi	r20, 0x80	; 128
    2868:	5f e3       	ldi	r21, 0x3F	; 63
    286a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    286e:	88 23       	and	r24, r24
    2870:	44 f4       	brge	.+16     	; 0x2882 <Animation2+0x92>
		__ticks = 1;
    2872:	fe 01       	movw	r30, r28
    2874:	e5 5b       	subi	r30, 0xB5	; 181
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
    2880:	64 c0       	rjmp	.+200    	; 0x294a <Animation2+0x15a>
	else if (__tmp > 65535)
    2882:	fe 01       	movw	r30, r28
    2884:	e3 5b       	subi	r30, 0xB3	; 179
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	60 81       	ld	r22, Z
    288a:	71 81       	ldd	r23, Z+1	; 0x01
    288c:	82 81       	ldd	r24, Z+2	; 0x02
    288e:	93 81       	ldd	r25, Z+3	; 0x03
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	3f ef       	ldi	r19, 0xFF	; 255
    2894:	4f e7       	ldi	r20, 0x7F	; 127
    2896:	57 e4       	ldi	r21, 0x47	; 71
    2898:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    289c:	18 16       	cp	r1, r24
    289e:	0c f0       	brlt	.+2      	; 0x28a2 <Animation2+0xb2>
    28a0:	43 c0       	rjmp	.+134    	; 0x2928 <Animation2+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a2:	fe 01       	movw	r30, r28
    28a4:	ef 5a       	subi	r30, 0xAF	; 175
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e2       	ldi	r20, 0x20	; 32
    28b6:	51 e4       	ldi	r21, 0x41	; 65
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	8e 01       	movw	r16, r28
    28c2:	05 5b       	subi	r16, 0xB5	; 181
    28c4:	1f 4f       	sbci	r17, 0xFF	; 255
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	f8 01       	movw	r30, r16
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	1f c0       	rjmp	.+62     	; 0x2918 <Animation2+0x128>
    28da:	fe 01       	movw	r30, r28
    28dc:	e7 5b       	subi	r30, 0xB7	; 183
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	80 e9       	ldi	r24, 0x90	; 144
    28e2:	91 e0       	ldi	r25, 0x01	; 1
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    28e8:	fe 01       	movw	r30, r28
    28ea:	e7 5b       	subi	r30, 0xB7	; 183
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <Animation2+0x102>
    28f6:	fe 01       	movw	r30, r28
    28f8:	e7 5b       	subi	r30, 0xB7	; 183
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	de 01       	movw	r26, r28
    2902:	a5 5b       	subi	r26, 0xB5	; 181
    2904:	bf 4f       	sbci	r27, 0xFF	; 255
    2906:	fe 01       	movw	r30, r28
    2908:	e5 5b       	subi	r30, 0xB5	; 181
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	80 81       	ld	r24, Z
    290e:	91 81       	ldd	r25, Z+1	; 0x01
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	11 96       	adiw	r26, 0x01	; 1
    2914:	9c 93       	st	X, r25
    2916:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2918:	fe 01       	movw	r30, r28
    291a:	e5 5b       	subi	r30, 0xB5	; 181
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	d1 f6       	brne	.-76     	; 0x28da <Animation2+0xea>
    2926:	27 c0       	rjmp	.+78     	; 0x2976 <Animation2+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2928:	8e 01       	movw	r16, r28
    292a:	05 5b       	subi	r16, 0xB5	; 181
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	fe 01       	movw	r30, r28
    2930:	e3 5b       	subi	r30, 0xB3	; 179
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	f8 01       	movw	r30, r16
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	de 01       	movw	r26, r28
    294c:	a9 5b       	subi	r26, 0xB9	; 185
    294e:	bf 4f       	sbci	r27, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e5 5b       	subi	r30, 0xB5	; 181
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	8d 93       	st	X+, r24
    295c:	9c 93       	st	X, r25
    295e:	fe 01       	movw	r30, r28
    2960:	e9 5b       	subi	r30, 0xB9	; 185
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 81       	ld	r24, Z
    2966:	91 81       	ldd	r25, Z+1	; 0x01
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <Animation2+0x178>
    296c:	fe 01       	movw	r30, r28
    296e:	e9 5b       	subi	r30, 0xB9	; 185
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	80 83       	st	Z, r24
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
    297c:	fe 01       	movw	r30, r28
    297e:	ed 5b       	subi	r30, 0xBD	; 189
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	aa ef       	ldi	r26, 0xFA	; 250
    2988:	b3 e4       	ldi	r27, 0x43	; 67
    298a:	80 83       	st	Z, r24
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	a2 83       	std	Z+2, r26	; 0x02
    2990:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2992:	8e 01       	movw	r16, r28
    2994:	01 5c       	subi	r16, 0xC1	; 193
    2996:	1f 4f       	sbci	r17, 0xFF	; 255
    2998:	fe 01       	movw	r30, r28
    299a:	ed 5b       	subi	r30, 0xBD	; 189
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	60 81       	ld	r22, Z
    29a0:	71 81       	ldd	r23, Z+1	; 0x01
    29a2:	82 81       	ldd	r24, Z+2	; 0x02
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	4a e7       	ldi	r20, 0x7A	; 122
    29ac:	55 e4       	ldi	r21, 0x45	; 69
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	f8 01       	movw	r30, r16
    29b8:	80 83       	st	Z, r24
    29ba:	91 83       	std	Z+1, r25	; 0x01
    29bc:	a2 83       	std	Z+2, r26	; 0x02
    29be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29c0:	fe 01       	movw	r30, r28
    29c2:	ff 96       	adiw	r30, 0x3f	; 63
    29c4:	60 81       	ld	r22, Z
    29c6:	71 81       	ldd	r23, Z+1	; 0x01
    29c8:	82 81       	ldd	r24, Z+2	; 0x02
    29ca:	93 81       	ldd	r25, Z+3	; 0x03
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 e8       	ldi	r20, 0x80	; 128
    29d2:	5f e3       	ldi	r21, 0x3F	; 63
    29d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d8:	88 23       	and	r24, r24
    29da:	2c f4       	brge	.+10     	; 0x29e6 <Animation2+0x1f6>
		__ticks = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9e af       	std	Y+62, r25	; 0x3e
    29e2:	8d af       	std	Y+61, r24	; 0x3d
    29e4:	46 c0       	rjmp	.+140    	; 0x2a72 <Animation2+0x282>
	else if (__tmp > 65535)
    29e6:	fe 01       	movw	r30, r28
    29e8:	ff 96       	adiw	r30, 0x3f	; 63
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	3f ef       	ldi	r19, 0xFF	; 255
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	57 e4       	ldi	r21, 0x47	; 71
    29fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	64 f5       	brge	.+88     	; 0x2a5a <Animation2+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a02:	fe 01       	movw	r30, r28
    2a04:	ed 5b       	subi	r30, 0xBD	; 189
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	60 81       	ld	r22, Z
    2a0a:	71 81       	ldd	r23, Z+1	; 0x01
    2a0c:	82 81       	ldd	r24, Z+2	; 0x02
    2a0e:	93 81       	ldd	r25, Z+3	; 0x03
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e2       	ldi	r20, 0x20	; 32
    2a16:	51 e4       	ldi	r21, 0x41	; 65
    2a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9e af       	std	Y+62, r25	; 0x3e
    2a2e:	8d af       	std	Y+61, r24	; 0x3d
    2a30:	0f c0       	rjmp	.+30     	; 0x2a50 <Animation2+0x260>
    2a32:	80 e9       	ldi	r24, 0x90	; 144
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	9c af       	std	Y+60, r25	; 0x3c
    2a38:	8b af       	std	Y+59, r24	; 0x3b
    2a3a:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a3c:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <Animation2+0x24e>
    2a42:	9c af       	std	Y+60, r25	; 0x3c
    2a44:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a46:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a48:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	9e af       	std	Y+62, r25	; 0x3e
    2a4e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a50:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a52:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	69 f7       	brne	.-38     	; 0x2a32 <Animation2+0x242>
    2a58:	16 c0       	rjmp	.+44     	; 0x2a86 <Animation2+0x296>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	ff 96       	adiw	r30, 0x3f	; 63
    2a5e:	60 81       	ld	r22, Z
    2a60:	71 81       	ldd	r23, Z+1	; 0x01
    2a62:	82 81       	ldd	r24, Z+2	; 0x02
    2a64:	93 81       	ldd	r25, Z+3	; 0x03
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9e af       	std	Y+62, r25	; 0x3e
    2a70:	8d af       	std	Y+61, r24	; 0x3d
    2a72:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a74:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a76:	9a af       	std	Y+58, r25	; 0x3a
    2a78:	89 af       	std	Y+57, r24	; 0x39
    2a7a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a7c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <Animation2+0x28e>
    2a82:	9a af       	std	Y+58, r25	; 0x3a
    2a84:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
    H_Led_void_setON(BLU_LED);
    2a86:	82 e0       	ldi	r24, 0x02	; 2
    2a88:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	aa ef       	ldi	r26, 0xFA	; 250
    2a92:	b3 e4       	ldi	r27, 0x43	; 67
    2a94:	8d ab       	std	Y+53, r24	; 0x35
    2a96:	9e ab       	std	Y+54, r25	; 0x36
    2a98:	af ab       	std	Y+55, r26	; 0x37
    2a9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a9e:	7e a9       	ldd	r23, Y+54	; 0x36
    2aa0:	8f a9       	ldd	r24, Y+55	; 0x37
    2aa2:	98 ad       	ldd	r25, Y+56	; 0x38
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a e7       	ldi	r20, 0x7A	; 122
    2aaa:	55 e4       	ldi	r21, 0x45	; 69
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	89 ab       	std	Y+49, r24	; 0x31
    2ab6:	9a ab       	std	Y+50, r25	; 0x32
    2ab8:	ab ab       	std	Y+51, r26	; 0x33
    2aba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2abc:	69 a9       	ldd	r22, Y+49	; 0x31
    2abe:	7a a9       	ldd	r23, Y+50	; 0x32
    2ac0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ac2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <Animation2+0x2ee>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	98 ab       	std	Y+48, r25	; 0x30
    2ada:	8f a7       	std	Y+47, r24	; 0x2f
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <Animation2+0x36c>
	else if (__tmp > 65535)
    2ade:	69 a9       	ldd	r22, Y+49	; 0x31
    2ae0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ae2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <Animation2+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	6d a9       	ldd	r22, Y+53	; 0x35
    2af8:	7e a9       	ldd	r23, Y+54	; 0x36
    2afa:	8f a9       	ldd	r24, Y+55	; 0x37
    2afc:	98 ad       	ldd	r25, Y+56	; 0x38
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	98 ab       	std	Y+48, r25	; 0x30
    2b1c:	8f a7       	std	Y+47, r24	; 0x2f
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <Animation2+0x34e>
    2b20:	80 e9       	ldi	r24, 0x90	; 144
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	9e a7       	std	Y+46, r25	; 0x2e
    2b26:	8d a7       	std	Y+45, r24	; 0x2d
    2b28:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <Animation2+0x33c>
    2b30:	9e a7       	std	Y+46, r25	; 0x2e
    2b32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b36:	98 a9       	ldd	r25, Y+48	; 0x30
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	98 ab       	std	Y+48, r25	; 0x30
    2b3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b40:	98 a9       	ldd	r25, Y+48	; 0x30
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <Animation2+0x330>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <Animation2+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	69 a9       	ldd	r22, Y+49	; 0x31
    2b4a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b4c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b4e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	98 ab       	std	Y+48, r25	; 0x30
    2b5a:	8f a7       	std	Y+47, r24	; 0x2f
    2b5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b5e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b60:	9c a7       	std	Y+44, r25	; 0x2c
    2b62:	8b a7       	std	Y+43, r24	; 0x2b
    2b64:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b66:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <Animation2+0x378>
    2b6c:	9c a7       	std	Y+44, r25	; 0x2c
    2b6e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(500);
    H_Led_void_setOFF(BLU_LED);
    2b70:	82 e0       	ldi	r24, 0x02	; 2
    2b72:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	aa ef       	ldi	r26, 0xFA	; 250
    2b7c:	b3 e4       	ldi	r27, 0x43	; 67
    2b7e:	8f a3       	std	Y+39, r24	; 0x27
    2b80:	98 a7       	std	Y+40, r25	; 0x28
    2b82:	a9 a7       	std	Y+41, r26	; 0x29
    2b84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b86:	6f a1       	ldd	r22, Y+39	; 0x27
    2b88:	78 a5       	ldd	r23, Y+40	; 0x28
    2b8a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	4a e7       	ldi	r20, 0x7A	; 122
    2b94:	55 e4       	ldi	r21, 0x45	; 69
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	8b a3       	std	Y+35, r24	; 0x23
    2ba0:	9c a3       	std	Y+36, r25	; 0x24
    2ba2:	ad a3       	std	Y+37, r26	; 0x25
    2ba4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ba6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba8:	7c a1       	ldd	r23, Y+36	; 0x24
    2baa:	8d a1       	ldd	r24, Y+37	; 0x25
    2bac:	9e a1       	ldd	r25, Y+38	; 0x26
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e8       	ldi	r20, 0x80	; 128
    2bb4:	5f e3       	ldi	r21, 0x3F	; 63
    2bb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bba:	88 23       	and	r24, r24
    2bbc:	2c f4       	brge	.+10     	; 0x2bc8 <Animation2+0x3d8>
		__ticks = 1;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	9a a3       	std	Y+34, r25	; 0x22
    2bc4:	89 a3       	std	Y+33, r24	; 0x21
    2bc6:	3f c0       	rjmp	.+126    	; 0x2c46 <Animation2+0x456>
	else if (__tmp > 65535)
    2bc8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bca:	7c a1       	ldd	r23, Y+36	; 0x24
    2bcc:	8d a1       	ldd	r24, Y+37	; 0x25
    2bce:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	3f ef       	ldi	r19, 0xFF	; 255
    2bd4:	4f e7       	ldi	r20, 0x7F	; 127
    2bd6:	57 e4       	ldi	r21, 0x47	; 71
    2bd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bdc:	18 16       	cp	r1, r24
    2bde:	4c f5       	brge	.+82     	; 0x2c32 <Animation2+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be0:	6f a1       	ldd	r22, Y+39	; 0x27
    2be2:	78 a5       	ldd	r23, Y+40	; 0x28
    2be4:	89 a5       	ldd	r24, Y+41	; 0x29
    2be6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e2       	ldi	r20, 0x20	; 32
    2bee:	51 e4       	ldi	r21, 0x41	; 65
    2bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9a a3       	std	Y+34, r25	; 0x22
    2c06:	89 a3       	std	Y+33, r24	; 0x21
    2c08:	0f c0       	rjmp	.+30     	; 0x2c28 <Animation2+0x438>
    2c0a:	80 e9       	ldi	r24, 0x90	; 144
    2c0c:	91 e0       	ldi	r25, 0x01	; 1
    2c0e:	98 a3       	std	Y+32, r25	; 0x20
    2c10:	8f 8f       	std	Y+31, r24	; 0x1f
    2c12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c14:	98 a1       	ldd	r25, Y+32	; 0x20
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <Animation2+0x426>
    2c1a:	98 a3       	std	Y+32, r25	; 0x20
    2c1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c20:	9a a1       	ldd	r25, Y+34	; 0x22
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	9a a3       	std	Y+34, r25	; 0x22
    2c26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c28:	89 a1       	ldd	r24, Y+33	; 0x21
    2c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	69 f7       	brne	.-38     	; 0x2c0a <Animation2+0x41a>
    2c30:	14 c0       	rjmp	.+40     	; 0x2c5a <Animation2+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c32:	6b a1       	ldd	r22, Y+35	; 0x23
    2c34:	7c a1       	ldd	r23, Y+36	; 0x24
    2c36:	8d a1       	ldd	r24, Y+37	; 0x25
    2c38:	9e a1       	ldd	r25, Y+38	; 0x26
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	9a a3       	std	Y+34, r25	; 0x22
    2c44:	89 a3       	std	Y+33, r24	; 0x21
    2c46:	89 a1       	ldd	r24, Y+33	; 0x21
    2c48:	9a a1       	ldd	r25, Y+34	; 0x22
    2c4a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c4c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <Animation2+0x462>
    2c56:	9e 8f       	std	Y+30, r25	; 0x1e
    2c58:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(500);
    H_Led_void_setON(GRN_LED);
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	aa ef       	ldi	r26, 0xFA	; 250
    2c66:	b3 e4       	ldi	r27, 0x43	; 67
    2c68:	89 8f       	std	Y+25, r24	; 0x19
    2c6a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c6c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c70:	69 8d       	ldd	r22, Y+25	; 0x19
    2c72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	4a e7       	ldi	r20, 0x7A	; 122
    2c7e:	55 e4       	ldi	r21, 0x45	; 69
    2c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	8d 8b       	std	Y+21, r24	; 0x15
    2c8a:	9e 8b       	std	Y+22, r25	; 0x16
    2c8c:	af 8b       	std	Y+23, r26	; 0x17
    2c8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c90:	6d 89       	ldd	r22, Y+21	; 0x15
    2c92:	7e 89       	ldd	r23, Y+22	; 0x16
    2c94:	8f 89       	ldd	r24, Y+23	; 0x17
    2c96:	98 8d       	ldd	r25, Y+24	; 0x18
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e8       	ldi	r20, 0x80	; 128
    2c9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ca0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ca4:	88 23       	and	r24, r24
    2ca6:	2c f4       	brge	.+10     	; 0x2cb2 <Animation2+0x4c2>
		__ticks = 1;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	9c 8b       	std	Y+20, r25	; 0x14
    2cae:	8b 8b       	std	Y+19, r24	; 0x13
    2cb0:	3f c0       	rjmp	.+126    	; 0x2d30 <Animation2+0x540>
	else if (__tmp > 65535)
    2cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	3f ef       	ldi	r19, 0xFF	; 255
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	57 e4       	ldi	r21, 0x47	; 71
    2cc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cc6:	18 16       	cp	r1, r24
    2cc8:	4c f5       	brge	.+82     	; 0x2d1c <Animation2+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cca:	69 8d       	ldd	r22, Y+25	; 0x19
    2ccc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e2       	ldi	r20, 0x20	; 32
    2cd8:	51 e4       	ldi	r21, 0x41	; 65
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	9c 8b       	std	Y+20, r25	; 0x14
    2cf0:	8b 8b       	std	Y+19, r24	; 0x13
    2cf2:	0f c0       	rjmp	.+30     	; 0x2d12 <Animation2+0x522>
    2cf4:	80 e9       	ldi	r24, 0x90	; 144
    2cf6:	91 e0       	ldi	r25, 0x01	; 1
    2cf8:	9a 8b       	std	Y+18, r25	; 0x12
    2cfa:	89 8b       	std	Y+17, r24	; 0x11
    2cfc:	89 89       	ldd	r24, Y+17	; 0x11
    2cfe:	9a 89       	ldd	r25, Y+18	; 0x12
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <Animation2+0x510>
    2d04:	9a 8b       	std	Y+18, r25	; 0x12
    2d06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d08:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	9c 8b       	std	Y+20, r25	; 0x14
    2d10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d12:	8b 89       	ldd	r24, Y+19	; 0x13
    2d14:	9c 89       	ldd	r25, Y+20	; 0x14
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	69 f7       	brne	.-38     	; 0x2cf4 <Animation2+0x504>
    2d1a:	14 c0       	rjmp	.+40     	; 0x2d44 <Animation2+0x554>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d20:	8f 89       	ldd	r24, Y+23	; 0x17
    2d22:	98 8d       	ldd	r25, Y+24	; 0x18
    2d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	9c 8b       	std	Y+20, r25	; 0x14
    2d2e:	8b 8b       	std	Y+19, r24	; 0x13
    2d30:	8b 89       	ldd	r24, Y+19	; 0x13
    2d32:	9c 89       	ldd	r25, Y+20	; 0x14
    2d34:	98 8b       	std	Y+16, r25	; 0x10
    2d36:	8f 87       	std	Y+15, r24	; 0x0f
    2d38:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3a:	98 89       	ldd	r25, Y+16	; 0x10
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <Animation2+0x54c>
    2d40:	98 8b       	std	Y+16, r25	; 0x10
    2d42:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(500);
    H_Led_void_setOFF(GRN_LED);
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	aa ef       	ldi	r26, 0xFA	; 250
    2d50:	b3 e4       	ldi	r27, 0x43	; 67
    2d52:	8b 87       	std	Y+11, r24	; 0x0b
    2d54:	9c 87       	std	Y+12, r25	; 0x0c
    2d56:	ad 87       	std	Y+13, r26	; 0x0d
    2d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	4a e7       	ldi	r20, 0x7A	; 122
    2d68:	55 e4       	ldi	r21, 0x45	; 69
    2d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	8f 83       	std	Y+7, r24	; 0x07
    2d74:	98 87       	std	Y+8, r25	; 0x08
    2d76:	a9 87       	std	Y+9, r26	; 0x09
    2d78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7c:	78 85       	ldd	r23, Y+8	; 0x08
    2d7e:	89 85       	ldd	r24, Y+9	; 0x09
    2d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e8       	ldi	r20, 0x80	; 128
    2d88:	5f e3       	ldi	r21, 0x3F	; 63
    2d8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d8e:	88 23       	and	r24, r24
    2d90:	2c f4       	brge	.+10     	; 0x2d9c <Animation2+0x5ac>
		__ticks = 1;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	3f c0       	rjmp	.+126    	; 0x2e1a <Animation2+0x62a>
	else if (__tmp > 65535)
    2d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9e:	78 85       	ldd	r23, Y+8	; 0x08
    2da0:	89 85       	ldd	r24, Y+9	; 0x09
    2da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	3f ef       	ldi	r19, 0xFF	; 255
    2da8:	4f e7       	ldi	r20, 0x7F	; 127
    2daa:	57 e4       	ldi	r21, 0x47	; 71
    2dac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2db0:	18 16       	cp	r1, r24
    2db2:	4c f5       	brge	.+82     	; 0x2e06 <Animation2+0x616>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e2       	ldi	r20, 0x20	; 32
    2dc2:	51 e4       	ldi	r21, 0x41	; 65
    2dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	0f c0       	rjmp	.+30     	; 0x2dfc <Animation2+0x60c>
    2dde:	80 e9       	ldi	r24, 0x90	; 144
    2de0:	91 e0       	ldi	r25, 0x01	; 1
    2de2:	9c 83       	std	Y+4, r25	; 0x04
    2de4:	8b 83       	std	Y+3, r24	; 0x03
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <Animation2+0x5fa>
    2dee:	9c 83       	std	Y+4, r25	; 0x04
    2df0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	69 f7       	brne	.-38     	; 0x2dde <Animation2+0x5ee>
    2e04:	14 c0       	rjmp	.+40     	; 0x2e2e <Animation2+0x63e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e06:	6f 81       	ldd	r22, Y+7	; 0x07
    2e08:	78 85       	ldd	r23, Y+8	; 0x08
    2e0a:	89 85       	ldd	r24, Y+9	; 0x09
    2e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <Animation2+0x636>
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(500);

}
    2e2e:	cc 5a       	subi	r28, 0xAC	; 172
    2e30:	df 4f       	sbci	r29, 0xFF	; 255
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	08 95       	ret

00002e46 <Animation3>:
void Animation3()
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	6c 97       	sbiw	r28, 0x1c	; 28
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
	H_Led_void_setON(RED_LED);
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    2e60:	82 e0       	ldi	r24, 0x02	; 2
    2e62:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
	H_Led_void_setON(GRN_LED);
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	aa ef       	ldi	r26, 0xFA	; 250
    2e72:	b3 e4       	ldi	r27, 0x43	; 67
    2e74:	89 8f       	std	Y+25, r24	; 0x19
    2e76:	9a 8f       	std	Y+26, r25	; 0x1a
    2e78:	ab 8f       	std	Y+27, r26	; 0x1b
    2e7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4a e7       	ldi	r20, 0x7A	; 122
    2e8a:	55 e4       	ldi	r21, 0x45	; 69
    2e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	8d 8b       	std	Y+21, r24	; 0x15
    2e96:	9e 8b       	std	Y+22, r25	; 0x16
    2e98:	af 8b       	std	Y+23, r26	; 0x17
    2e9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e8       	ldi	r20, 0x80	; 128
    2eaa:	5f e3       	ldi	r21, 0x3F	; 63
    2eac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb0:	88 23       	and	r24, r24
    2eb2:	2c f4       	brge	.+10     	; 0x2ebe <Animation3+0x78>
		__ticks = 1;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	9c 8b       	std	Y+20, r25	; 0x14
    2eba:	8b 8b       	std	Y+19, r24	; 0x13
    2ebc:	3f c0       	rjmp	.+126    	; 0x2f3c <Animation3+0xf6>
	else if (__tmp > 65535)
    2ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    2ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	3f ef       	ldi	r19, 0xFF	; 255
    2eca:	4f e7       	ldi	r20, 0x7F	; 127
    2ecc:	57 e4       	ldi	r21, 0x47	; 71
    2ece:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ed2:	18 16       	cp	r1, r24
    2ed4:	4c f5       	brge	.+82     	; 0x2f28 <Animation3+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ed8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2edc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e2       	ldi	r20, 0x20	; 32
    2ee4:	51 e4       	ldi	r21, 0x41	; 65
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9c 8b       	std	Y+20, r25	; 0x14
    2efc:	8b 8b       	std	Y+19, r24	; 0x13
    2efe:	0f c0       	rjmp	.+30     	; 0x2f1e <Animation3+0xd8>
    2f00:	80 e9       	ldi	r24, 0x90	; 144
    2f02:	91 e0       	ldi	r25, 0x01	; 1
    2f04:	9a 8b       	std	Y+18, r25	; 0x12
    2f06:	89 8b       	std	Y+17, r24	; 0x11
    2f08:	89 89       	ldd	r24, Y+17	; 0x11
    2f0a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <Animation3+0xc6>
    2f10:	9a 8b       	std	Y+18, r25	; 0x12
    2f12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f14:	8b 89       	ldd	r24, Y+19	; 0x13
    2f16:	9c 89       	ldd	r25, Y+20	; 0x14
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	9c 8b       	std	Y+20, r25	; 0x14
    2f1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f20:	9c 89       	ldd	r25, Y+20	; 0x14
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	69 f7       	brne	.-38     	; 0x2f00 <Animation3+0xba>
    2f26:	14 c0       	rjmp	.+40     	; 0x2f50 <Animation3+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f28:	6d 89       	ldd	r22, Y+21	; 0x15
    2f2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	9c 8b       	std	Y+20, r25	; 0x14
    2f3a:	8b 8b       	std	Y+19, r24	; 0x13
    2f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f40:	98 8b       	std	Y+16, r25	; 0x10
    2f42:	8f 87       	std	Y+15, r24	; 0x0f
    2f44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f46:	98 89       	ldd	r25, Y+16	; 0x10
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <Animation3+0x102>
    2f4c:	98 8b       	std	Y+16, r25	; 0x10
    2f4e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	H_Led_void_setOFF(RED_LED);
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    2f56:	82 e0       	ldi	r24, 0x02	; 2
    2f58:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
	H_Led_void_setOFF(GRN_LED);
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	aa ef       	ldi	r26, 0xFA	; 250
    2f68:	b3 e4       	ldi	r27, 0x43	; 67
    2f6a:	8b 87       	std	Y+11, r24	; 0x0b
    2f6c:	9c 87       	std	Y+12, r25	; 0x0c
    2f6e:	ad 87       	std	Y+13, r26	; 0x0d
    2f70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	4a e7       	ldi	r20, 0x7A	; 122
    2f80:	55 e4       	ldi	r21, 0x45	; 69
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	8f 83       	std	Y+7, r24	; 0x07
    2f8c:	98 87       	std	Y+8, r25	; 0x08
    2f8e:	a9 87       	std	Y+9, r26	; 0x09
    2f90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f92:	6f 81       	ldd	r22, Y+7	; 0x07
    2f94:	78 85       	ldd	r23, Y+8	; 0x08
    2f96:	89 85       	ldd	r24, Y+9	; 0x09
    2f98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e8       	ldi	r20, 0x80	; 128
    2fa0:	5f e3       	ldi	r21, 0x3F	; 63
    2fa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa6:	88 23       	and	r24, r24
    2fa8:	2c f4       	brge	.+10     	; 0x2fb4 <Animation3+0x16e>
		__ticks = 1;
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	8d 83       	std	Y+5, r24	; 0x05
    2fb2:	3f c0       	rjmp	.+126    	; 0x3032 <Animation3+0x1ec>
	else if (__tmp > 65535)
    2fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb6:	78 85       	ldd	r23, Y+8	; 0x08
    2fb8:	89 85       	ldd	r24, Y+9	; 0x09
    2fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	3f ef       	ldi	r19, 0xFF	; 255
    2fc0:	4f e7       	ldi	r20, 0x7F	; 127
    2fc2:	57 e4       	ldi	r21, 0x47	; 71
    2fc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fc8:	18 16       	cp	r1, r24
    2fca:	4c f5       	brge	.+82     	; 0x301e <Animation3+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 e2       	ldi	r20, 0x20	; 32
    2fda:	51 e4       	ldi	r21, 0x41	; 65
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	bc 01       	movw	r22, r24
    2fe6:	cd 01       	movw	r24, r26
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	0f c0       	rjmp	.+30     	; 0x3014 <Animation3+0x1ce>
    2ff6:	80 e9       	ldi	r24, 0x90	; 144
    2ff8:	91 e0       	ldi	r25, 0x01	; 1
    2ffa:	9c 83       	std	Y+4, r25	; 0x04
    2ffc:	8b 83       	std	Y+3, r24	; 0x03
    2ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    3000:	9c 81       	ldd	r25, Y+4	; 0x04
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <Animation3+0x1bc>
    3006:	9c 83       	std	Y+4, r25	; 0x04
    3008:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300a:	8d 81       	ldd	r24, Y+5	; 0x05
    300c:	9e 81       	ldd	r25, Y+6	; 0x06
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	9e 83       	std	Y+6, r25	; 0x06
    3012:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3014:	8d 81       	ldd	r24, Y+5	; 0x05
    3016:	9e 81       	ldd	r25, Y+6	; 0x06
    3018:	00 97       	sbiw	r24, 0x00	; 0
    301a:	69 f7       	brne	.-38     	; 0x2ff6 <Animation3+0x1b0>
    301c:	14 c0       	rjmp	.+40     	; 0x3046 <Animation3+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301e:	6f 81       	ldd	r22, Y+7	; 0x07
    3020:	78 85       	ldd	r23, Y+8	; 0x08
    3022:	89 85       	ldd	r24, Y+9	; 0x09
    3024:	9a 85       	ldd	r25, Y+10	; 0x0a
    3026:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	9e 83       	std	Y+6, r25	; 0x06
    3030:	8d 83       	std	Y+5, r24	; 0x05
    3032:	8d 81       	ldd	r24, Y+5	; 0x05
    3034:	9e 81       	ldd	r25, Y+6	; 0x06
    3036:	9a 83       	std	Y+2, r25	; 0x02
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	89 81       	ldd	r24, Y+1	; 0x01
    303c:	9a 81       	ldd	r25, Y+2	; 0x02
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <Animation3+0x1f8>
    3042:	9a 83       	std	Y+2, r25	; 0x02
    3044:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

}
    3046:	6c 96       	adiw	r28, 0x1c	; 28
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	08 95       	ret

00003058 <H_LCD_void_Init>:

#include "LCD_priv.h"
#include "LCD_config.h"
#include "LCD_int.h"
void H_LCD_void_Init(void)
{
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	aa 97       	sbiw	r28, 0x2a	; 42
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61

	// set direction Rs, EN
	M_DIO_void_setPinDir(LCD_RS_PORT, LCD_RS_PIN,OUT);
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	61 e0       	ldi	r22, 0x01	; 1
    3070:	41 e0       	ldi	r20, 0x01	; 1
    3072:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_EN_PORT,LCD_EN_PIN,OUT);
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	62 e0       	ldi	r22, 0x02	; 2
    307a:	41 e0       	ldi	r20, 0x01	; 1
    307c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	//set direction D4 .. D7
	M_DIO_void_setPinDir(LCD_D7_PORT,LCD_D7_PIN,OUT);
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	66 e0       	ldi	r22, 0x06	; 6
    3084:	41 e0       	ldi	r20, 0x01	; 1
    3086:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D6_PORT,LCD_D6_PIN,OUT);
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	65 e0       	ldi	r22, 0x05	; 5
    308e:	41 e0       	ldi	r20, 0x01	; 1
    3090:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D5_PORT,LCD_D5_PIN,OUT);
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	64 e0       	ldi	r22, 0x04	; 4
    3098:	41 e0       	ldi	r20, 0x01	; 1
    309a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(LCD_D4_PORT,LCD_D4_PIN,OUT);
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	63 e0       	ldi	r22, 0x03	; 3
    30a2:	41 e0       	ldi	r20, 0x01	; 1
    30a4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	ac e0       	ldi	r26, 0x0C	; 12
    30ae:	b2 e4       	ldi	r27, 0x42	; 66
    30b0:	8f a3       	std	Y+39, r24	; 0x27
    30b2:	98 a7       	std	Y+40, r25	; 0x28
    30b4:	a9 a7       	std	Y+41, r26	; 0x29
    30b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b8:	6f a1       	ldd	r22, Y+39	; 0x27
    30ba:	78 a5       	ldd	r23, Y+40	; 0x28
    30bc:	89 a5       	ldd	r24, Y+41	; 0x29
    30be:	9a a5       	ldd	r25, Y+42	; 0x2a
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	4a e7       	ldi	r20, 0x7A	; 122
    30c6:	55 e4       	ldi	r21, 0x45	; 69
    30c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	8b a3       	std	Y+35, r24	; 0x23
    30d2:	9c a3       	std	Y+36, r25	; 0x24
    30d4:	ad a3       	std	Y+37, r26	; 0x25
    30d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30d8:	6b a1       	ldd	r22, Y+35	; 0x23
    30da:	7c a1       	ldd	r23, Y+36	; 0x24
    30dc:	8d a1       	ldd	r24, Y+37	; 0x25
    30de:	9e a1       	ldd	r25, Y+38	; 0x26
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e8       	ldi	r20, 0x80	; 128
    30e6:	5f e3       	ldi	r21, 0x3F	; 63
    30e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ec:	88 23       	and	r24, r24
    30ee:	2c f4       	brge	.+10     	; 0x30fa <H_LCD_void_Init+0xa2>
		__ticks = 1;
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	9a a3       	std	Y+34, r25	; 0x22
    30f6:	89 a3       	std	Y+33, r24	; 0x21
    30f8:	3f c0       	rjmp	.+126    	; 0x3178 <H_LCD_void_Init+0x120>
	else if (__tmp > 65535)
    30fa:	6b a1       	ldd	r22, Y+35	; 0x23
    30fc:	7c a1       	ldd	r23, Y+36	; 0x24
    30fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3100:	9e a1       	ldd	r25, Y+38	; 0x26
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	3f ef       	ldi	r19, 0xFF	; 255
    3106:	4f e7       	ldi	r20, 0x7F	; 127
    3108:	57 e4       	ldi	r21, 0x47	; 71
    310a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    310e:	18 16       	cp	r1, r24
    3110:	4c f5       	brge	.+82     	; 0x3164 <H_LCD_void_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3112:	6f a1       	ldd	r22, Y+39	; 0x27
    3114:	78 a5       	ldd	r23, Y+40	; 0x28
    3116:	89 a5       	ldd	r24, Y+41	; 0x29
    3118:	9a a5       	ldd	r25, Y+42	; 0x2a
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e2       	ldi	r20, 0x20	; 32
    3120:	51 e4       	ldi	r21, 0x41	; 65
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	bc 01       	movw	r22, r24
    312c:	cd 01       	movw	r24, r26
    312e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	9a a3       	std	Y+34, r25	; 0x22
    3138:	89 a3       	std	Y+33, r24	; 0x21
    313a:	0f c0       	rjmp	.+30     	; 0x315a <H_LCD_void_Init+0x102>
    313c:	80 e9       	ldi	r24, 0x90	; 144
    313e:	91 e0       	ldi	r25, 0x01	; 1
    3140:	98 a3       	std	Y+32, r25	; 0x20
    3142:	8f 8f       	std	Y+31, r24	; 0x1f
    3144:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3146:	98 a1       	ldd	r25, Y+32	; 0x20
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	f1 f7       	brne	.-4      	; 0x3148 <H_LCD_void_Init+0xf0>
    314c:	98 a3       	std	Y+32, r25	; 0x20
    314e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3150:	89 a1       	ldd	r24, Y+33	; 0x21
    3152:	9a a1       	ldd	r25, Y+34	; 0x22
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	9a a3       	std	Y+34, r25	; 0x22
    3158:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315a:	89 a1       	ldd	r24, Y+33	; 0x21
    315c:	9a a1       	ldd	r25, Y+34	; 0x22
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	69 f7       	brne	.-38     	; 0x313c <H_LCD_void_Init+0xe4>
    3162:	14 c0       	rjmp	.+40     	; 0x318c <H_LCD_void_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3164:	6b a1       	ldd	r22, Y+35	; 0x23
    3166:	7c a1       	ldd	r23, Y+36	; 0x24
    3168:	8d a1       	ldd	r24, Y+37	; 0x25
    316a:	9e a1       	ldd	r25, Y+38	; 0x26
    316c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	9a a3       	std	Y+34, r25	; 0x22
    3176:	89 a3       	std	Y+33, r24	; 0x21
    3178:	89 a1       	ldd	r24, Y+33	; 0x21
    317a:	9a a1       	ldd	r25, Y+34	; 0x22
    317c:	9e 8f       	std	Y+30, r25	; 0x1e
    317e:	8d 8f       	std	Y+29, r24	; 0x1d
    3180:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3182:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <H_LCD_void_Init+0x12c>
    3188:	9e 8f       	std	Y+30, r25	; 0x1e
    318a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
	_delay_ms(35);
	// Rs = command = 0
	M_DIO_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	61 e0       	ldi	r22, 0x01	; 1
    3190:	40 e0       	ldi	r20, 0x00	; 0
    3192:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
	// EN = 0 disabled
	M_DIO_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	62 e0       	ldi	r22, 0x02	; 2
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
	// prepare data
	M_DIO_void_setPinValue(LCD_D7_PORT,LCD_D7_PIN,0);
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	66 e0       	ldi	r22, 0x06	; 6
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D6_PORT,LCD_D6_PIN,0);
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	65 e0       	ldi	r22, 0x05	; 5
    31ae:	40 e0       	ldi	r20, 0x00	; 0
    31b0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D5_PORT,LCD_D5_PIN,1);
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	64 e0       	ldi	r22, 0x04	; 4
    31b8:	41 e0       	ldi	r20, 0x01	; 1
    31ba:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D4_PORT,LCD_D4_PIN,0);
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	63 e0       	ldi	r22, 0x03	; 3
    31c2:	40 e0       	ldi	r20, 0x00	; 0
    31c4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
	//EN = 1
	M_DIO_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	62 e0       	ldi	r22, 0x02	; 2
    31cc:	41 e0       	ldi	r20, 0x01	; 1
    31ce:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	a0 e8       	ldi	r26, 0x80	; 128
    31d8:	bf e3       	ldi	r27, 0x3F	; 63
    31da:	89 8f       	std	Y+25, r24	; 0x19
    31dc:	9a 8f       	std	Y+26, r25	; 0x1a
    31de:	ab 8f       	std	Y+27, r26	; 0x1b
    31e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e2:	69 8d       	ldd	r22, Y+25	; 0x19
    31e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	4a e7       	ldi	r20, 0x7A	; 122
    31f0:	55 e4       	ldi	r21, 0x45	; 69
    31f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	8d 8b       	std	Y+21, r24	; 0x15
    31fc:	9e 8b       	std	Y+22, r25	; 0x16
    31fe:	af 8b       	std	Y+23, r26	; 0x17
    3200:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3202:	6d 89       	ldd	r22, Y+21	; 0x15
    3204:	7e 89       	ldd	r23, Y+22	; 0x16
    3206:	8f 89       	ldd	r24, Y+23	; 0x17
    3208:	98 8d       	ldd	r25, Y+24	; 0x18
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e8       	ldi	r20, 0x80	; 128
    3210:	5f e3       	ldi	r21, 0x3F	; 63
    3212:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3216:	88 23       	and	r24, r24
    3218:	2c f4       	brge	.+10     	; 0x3224 <H_LCD_void_Init+0x1cc>
		__ticks = 1;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	9c 8b       	std	Y+20, r25	; 0x14
    3220:	8b 8b       	std	Y+19, r24	; 0x13
    3222:	3f c0       	rjmp	.+126    	; 0x32a2 <H_LCD_void_Init+0x24a>
	else if (__tmp > 65535)
    3224:	6d 89       	ldd	r22, Y+21	; 0x15
    3226:	7e 89       	ldd	r23, Y+22	; 0x16
    3228:	8f 89       	ldd	r24, Y+23	; 0x17
    322a:	98 8d       	ldd	r25, Y+24	; 0x18
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	3f ef       	ldi	r19, 0xFF	; 255
    3230:	4f e7       	ldi	r20, 0x7F	; 127
    3232:	57 e4       	ldi	r21, 0x47	; 71
    3234:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3238:	18 16       	cp	r1, r24
    323a:	4c f5       	brge	.+82     	; 0x328e <H_LCD_void_Init+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323c:	69 8d       	ldd	r22, Y+25	; 0x19
    323e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3240:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3242:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e2       	ldi	r20, 0x20	; 32
    324a:	51 e4       	ldi	r21, 0x41	; 65
    324c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	bc 01       	movw	r22, r24
    3256:	cd 01       	movw	r24, r26
    3258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	9c 8b       	std	Y+20, r25	; 0x14
    3262:	8b 8b       	std	Y+19, r24	; 0x13
    3264:	0f c0       	rjmp	.+30     	; 0x3284 <H_LCD_void_Init+0x22c>
    3266:	80 e9       	ldi	r24, 0x90	; 144
    3268:	91 e0       	ldi	r25, 0x01	; 1
    326a:	9a 8b       	std	Y+18, r25	; 0x12
    326c:	89 8b       	std	Y+17, r24	; 0x11
    326e:	89 89       	ldd	r24, Y+17	; 0x11
    3270:	9a 89       	ldd	r25, Y+18	; 0x12
    3272:	01 97       	sbiw	r24, 0x01	; 1
    3274:	f1 f7       	brne	.-4      	; 0x3272 <H_LCD_void_Init+0x21a>
    3276:	9a 8b       	std	Y+18, r25	; 0x12
    3278:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327a:	8b 89       	ldd	r24, Y+19	; 0x13
    327c:	9c 89       	ldd	r25, Y+20	; 0x14
    327e:	01 97       	sbiw	r24, 0x01	; 1
    3280:	9c 8b       	std	Y+20, r25	; 0x14
    3282:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3284:	8b 89       	ldd	r24, Y+19	; 0x13
    3286:	9c 89       	ldd	r25, Y+20	; 0x14
    3288:	00 97       	sbiw	r24, 0x00	; 0
    328a:	69 f7       	brne	.-38     	; 0x3266 <H_LCD_void_Init+0x20e>
    328c:	14 c0       	rjmp	.+40     	; 0x32b6 <H_LCD_void_Init+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328e:	6d 89       	ldd	r22, Y+21	; 0x15
    3290:	7e 89       	ldd	r23, Y+22	; 0x16
    3292:	8f 89       	ldd	r24, Y+23	; 0x17
    3294:	98 8d       	ldd	r25, Y+24	; 0x18
    3296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	9c 8b       	std	Y+20, r25	; 0x14
    32a0:	8b 8b       	std	Y+19, r24	; 0x13
    32a2:	8b 89       	ldd	r24, Y+19	; 0x13
    32a4:	9c 89       	ldd	r25, Y+20	; 0x14
    32a6:	98 8b       	std	Y+16, r25	; 0x10
    32a8:	8f 87       	std	Y+15, r24	; 0x0f
    32aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ac:	98 89       	ldd	r25, Y+16	; 0x10
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	f1 f7       	brne	.-4      	; 0x32ae <H_LCD_void_Init+0x256>
    32b2:	98 8b       	std	Y+16, r25	; 0x10
    32b4:	8f 87       	std	Y+15, r24	; 0x0f
	// delay 1 msec (to allow latching)
	_delay_ms(1);
	// EN = 0
	M_DIO_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	62 e0       	ldi	r22, 0x02	; 2
    32ba:	40 e0       	ldi	r20, 0x00	; 0
    32bc:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	a0 ea       	ldi	r26, 0xA0	; 160
    32c6:	b0 e4       	ldi	r27, 0x40	; 64
    32c8:	8b 87       	std	Y+11, r24	; 0x0b
    32ca:	9c 87       	std	Y+12, r25	; 0x0c
    32cc:	ad 87       	std	Y+13, r26	; 0x0d
    32ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	4a e7       	ldi	r20, 0x7A	; 122
    32de:	55 e4       	ldi	r21, 0x45	; 69
    32e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	8f 83       	std	Y+7, r24	; 0x07
    32ea:	98 87       	std	Y+8, r25	; 0x08
    32ec:	a9 87       	std	Y+9, r26	; 0x09
    32ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32f0:	6f 81       	ldd	r22, Y+7	; 0x07
    32f2:	78 85       	ldd	r23, Y+8	; 0x08
    32f4:	89 85       	ldd	r24, Y+9	; 0x09
    32f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e8       	ldi	r20, 0x80	; 128
    32fe:	5f e3       	ldi	r21, 0x3F	; 63
    3300:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3304:	88 23       	and	r24, r24
    3306:	2c f4       	brge	.+10     	; 0x3312 <H_LCD_void_Init+0x2ba>
		__ticks = 1;
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	9e 83       	std	Y+6, r25	; 0x06
    330e:	8d 83       	std	Y+5, r24	; 0x05
    3310:	3f c0       	rjmp	.+126    	; 0x3390 <H_LCD_void_Init+0x338>
	else if (__tmp > 65535)
    3312:	6f 81       	ldd	r22, Y+7	; 0x07
    3314:	78 85       	ldd	r23, Y+8	; 0x08
    3316:	89 85       	ldd	r24, Y+9	; 0x09
    3318:	9a 85       	ldd	r25, Y+10	; 0x0a
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	3f ef       	ldi	r19, 0xFF	; 255
    331e:	4f e7       	ldi	r20, 0x7F	; 127
    3320:	57 e4       	ldi	r21, 0x47	; 71
    3322:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3326:	18 16       	cp	r1, r24
    3328:	4c f5       	brge	.+82     	; 0x337c <H_LCD_void_Init+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    332a:	6b 85       	ldd	r22, Y+11	; 0x0b
    332c:	7c 85       	ldd	r23, Y+12	; 0x0c
    332e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3330:	9e 85       	ldd	r25, Y+14	; 0x0e
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	40 e2       	ldi	r20, 0x20	; 32
    3338:	51 e4       	ldi	r21, 0x41	; 65
    333a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	bc 01       	movw	r22, r24
    3344:	cd 01       	movw	r24, r26
    3346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	9e 83       	std	Y+6, r25	; 0x06
    3350:	8d 83       	std	Y+5, r24	; 0x05
    3352:	0f c0       	rjmp	.+30     	; 0x3372 <H_LCD_void_Init+0x31a>
    3354:	80 e9       	ldi	r24, 0x90	; 144
    3356:	91 e0       	ldi	r25, 0x01	; 1
    3358:	9c 83       	std	Y+4, r25	; 0x04
    335a:	8b 83       	std	Y+3, r24	; 0x03
    335c:	8b 81       	ldd	r24, Y+3	; 0x03
    335e:	9c 81       	ldd	r25, Y+4	; 0x04
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <H_LCD_void_Init+0x308>
    3364:	9c 83       	std	Y+4, r25	; 0x04
    3366:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3368:	8d 81       	ldd	r24, Y+5	; 0x05
    336a:	9e 81       	ldd	r25, Y+6	; 0x06
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	9e 83       	std	Y+6, r25	; 0x06
    3370:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3372:	8d 81       	ldd	r24, Y+5	; 0x05
    3374:	9e 81       	ldd	r25, Y+6	; 0x06
    3376:	00 97       	sbiw	r24, 0x00	; 0
    3378:	69 f7       	brne	.-38     	; 0x3354 <H_LCD_void_Init+0x2fc>
    337a:	14 c0       	rjmp	.+40     	; 0x33a4 <H_LCD_void_Init+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337c:	6f 81       	ldd	r22, Y+7	; 0x07
    337e:	78 85       	ldd	r23, Y+8	; 0x08
    3380:	89 85       	ldd	r24, Y+9	; 0x09
    3382:	9a 85       	ldd	r25, Y+10	; 0x0a
    3384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	9e 83       	std	Y+6, r25	; 0x06
    338e:	8d 83       	std	Y+5, r24	; 0x05
    3390:	8d 81       	ldd	r24, Y+5	; 0x05
    3392:	9e 81       	ldd	r25, Y+6	; 0x06
    3394:	9a 83       	std	Y+2, r25	; 0x02
    3396:	89 83       	std	Y+1, r24	; 0x01
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	9a 81       	ldd	r25, Y+2	; 0x02
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	f1 f7       	brne	.-4      	; 0x339c <H_LCD_void_Init+0x344>
    33a0:	9a 83       	std	Y+2, r25	; 0x02
    33a2:	89 83       	std	Y+1, r24	; 0x01
	// delay to allow processing
	_delay_ms(5);
	H_LCD_void_sendCommand(LCD_4BIT_MODE_2LINES_5X7);
    33a4:	88 e2       	ldi	r24, 0x28	; 40
    33a6:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <H_LCD_void_sendCommand>
#else
  #error("wrong LCD Mode")
#endif
	// display ON/OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURSON_BLINKOFF);
    33aa:	8e e0       	ldi	r24, 0x0E	; 14
    33ac:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <H_LCD_void_sendCommand>
	// display Clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <H_LCD_void_sendCommand>
	// Entry Mode Set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
    33b6:	86 e0       	ldi	r24, 0x06	; 6
    33b8:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <H_LCD_void_sendCommand>

}
    33bc:	aa 96       	adiw	r28, 0x2a	; 42
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	cd bf       	out	0x3d, r28	; 61
    33c8:	cf 91       	pop	r28
    33ca:	df 91       	pop	r29
    33cc:	08 95       	ret

000033ce <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	0f 92       	push	r0
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	89 83       	std	Y+1, r24	; 0x01
  // step 1 : select RS to be in data mode (RS = 1)
	M_DIO_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	61 e0       	ldi	r22, 0x01	; 1
    33de:	41 e0       	ldi	r20, 0x01	; 1
    33e0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
  // step 2 : write data
   H_LCD_void_writeNlatch(copy_u8data);
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_writeNlatch>
}
    33ea:	0f 90       	pop	r0
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	08 95       	ret

000033f2 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8Command)
{
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	0f 92       	push	r0
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	89 83       	std	Y+1, r24	; 0x01
	// step 1 : select RS to be in command mode (RS = 0)
	M_DIO_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	61 e0       	ldi	r22, 0x01	; 1
    3402:	40 e0       	ldi	r20, 0x00	; 0
    3404:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
	// step 2 : write command
	H_LCD_void_writeNlatch(copy_u8Command);
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	0e 94 13 1b 	call	0x3626	; 0x3626 <H_LCD_void_writeNlatch>

}
    340e:	0f 90       	pop	r0
    3410:	cf 91       	pop	r28
    3412:	df 91       	pop	r29
    3414:	08 95       	ret

00003416 <H_LCD_void_sendString>:
void H_LCD_void_sendString(const s8 * pstr)
{
    3416:	df 93       	push	r29
    3418:	cf 93       	push	r28
    341a:	00 d0       	rcall	.+0      	; 0x341c <H_LCD_void_sendString+0x6>
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	9a 83       	std	Y+2, r25	; 0x02
    3422:	89 83       	std	Y+1, r24	; 0x01
    3424:	0a c0       	rjmp	.+20     	; 0x343a <H_LCD_void_sendString+0x24>
   while(*pstr)
   {
	   H_LCD_void_sendData(*pstr);
    3426:	e9 81       	ldd	r30, Y+1	; 0x01
    3428:	fa 81       	ldd	r31, Y+2	; 0x02
    342a:	80 81       	ld	r24, Z
    342c:	0e 94 e7 19 	call	0x33ce	; 0x33ce <H_LCD_void_sendData>
	   pstr++;
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	9a 81       	ldd	r25, Y+2	; 0x02
    3434:	01 96       	adiw	r24, 0x01	; 1
    3436:	9a 83       	std	Y+2, r25	; 0x02
    3438:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_writeNlatch(copy_u8Command);

}
void H_LCD_void_sendString(const s8 * pstr)
{
   while(*pstr)
    343a:	e9 81       	ldd	r30, Y+1	; 0x01
    343c:	fa 81       	ldd	r31, Y+2	; 0x02
    343e:	80 81       	ld	r24, Z
    3440:	88 23       	and	r24, r24
    3442:	89 f7       	brne	.-30     	; 0x3426 <H_LCD_void_sendString+0x10>
   {
	   H_LCD_void_sendData(*pstr);
	   pstr++;
   }
}
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	cf 91       	pop	r28
    344a:	df 91       	pop	r29
    344c:	08 95       	ret

0000344e <H_LCD_void_clear>:
void H_LCD_void_clear(void)
{
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <H_LCD_void_sendCommand>
}
    345c:	cf 91       	pop	r28
    345e:	df 91       	pop	r29
    3460:	08 95       	ret

00003462 <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	df 93       	push	r29
    3468:	cf 93       	push	r28
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	2f 97       	sbiw	r28, 0x0f	; 15
    3470:	0f b6       	in	r0, 0x3f	; 63
    3472:	f8 94       	cli
    3474:	de bf       	out	0x3e, r29	; 62
    3476:	0f be       	out	0x3f, r0	; 63
    3478:	cd bf       	out	0x3d, r28	; 61
    347a:	6c 87       	std	Y+12, r22	; 0x0c
    347c:	7d 87       	std	Y+13, r23	; 0x0d
    347e:	8e 87       	std	Y+14, r24	; 0x0e
    3480:	9f 87       	std	Y+15, r25	; 0x0f
   u8 Loc_Arr[10]= {0};
    3482:	8a e0       	ldi	r24, 0x0A	; 10
    3484:	fe 01       	movw	r30, r28
    3486:	32 96       	adiw	r30, 0x02	; 2
    3488:	df 01       	movw	r26, r30
    348a:	98 2f       	mov	r25, r24
    348c:	1d 92       	st	X+, r1
    348e:	9a 95       	dec	r25
    3490:	e9 f7       	brne	.-6      	; 0x348c <H_LCD_void_sendIntNum+0x2a>
   s8 i = 0;
    3492:	19 82       	std	Y+1, r1	; 0x01
   if(copy_s32Num == 0)
    3494:	8c 85       	ldd	r24, Y+12	; 0x0c
    3496:	9d 85       	ldd	r25, Y+13	; 0x0d
    3498:	ae 85       	ldd	r26, Y+14	; 0x0e
    349a:	bf 85       	ldd	r27, Y+15	; 0x0f
    349c:	00 97       	sbiw	r24, 0x00	; 0
    349e:	a1 05       	cpc	r26, r1
    34a0:	b1 05       	cpc	r27, r1
    34a2:	21 f4       	brne	.+8      	; 0x34ac <H_LCD_void_sendIntNum+0x4a>
   {
	   H_LCD_void_sendData('0');
    34a4:	80 e3       	ldi	r24, 0x30	; 48
    34a6:	0e 94 e7 19 	call	0x33ce	; 0x33ce <H_LCD_void_sendData>
    34aa:	69 c0       	rjmp	.+210    	; 0x357e <H_LCD_void_sendIntNum+0x11c>
	   return ;
   }
   else if(copy_s32Num < 0)//negative
    34ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    34ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    34b0:	ae 85       	ldd	r26, Y+14	; 0x0e
    34b2:	bf 85       	ldd	r27, Y+15	; 0x0f
    34b4:	bb 23       	and	r27, r27
    34b6:	0c f0       	brlt	.+2      	; 0x34ba <H_LCD_void_sendIntNum+0x58>
    34b8:	42 c0       	rjmp	.+132    	; 0x353e <H_LCD_void_sendIntNum+0xdc>
   {
	   H_LCD_void_sendData('-');
    34ba:	8d e2       	ldi	r24, 0x2D	; 45
    34bc:	0e 94 e7 19 	call	0x33ce	; 0x33ce <H_LCD_void_sendData>
	   copy_s32Num *= -1;
    34c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    34c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    34c4:	ae 85       	ldd	r26, Y+14	; 0x0e
    34c6:	bf 85       	ldd	r27, Y+15	; 0x0f
    34c8:	b0 95       	com	r27
    34ca:	a0 95       	com	r26
    34cc:	90 95       	com	r25
    34ce:	81 95       	neg	r24
    34d0:	9f 4f       	sbci	r25, 0xFF	; 255
    34d2:	af 4f       	sbci	r26, 0xFF	; 255
    34d4:	bf 4f       	sbci	r27, 0xFF	; 255
    34d6:	8c 87       	std	Y+12, r24	; 0x0c
    34d8:	9d 87       	std	Y+13, r25	; 0x0d
    34da:	ae 87       	std	Y+14, r26	; 0x0e
    34dc:	bf 87       	std	Y+15, r27	; 0x0f
    34de:	2f c0       	rjmp	.+94     	; 0x353e <H_LCD_void_sendIntNum+0xdc>
   }
   while(copy_s32Num != 0)
   {
	   Loc_Arr[i] = copy_s32Num % 10;
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	08 2f       	mov	r16, r24
    34e4:	11 27       	eor	r17, r17
    34e6:	07 fd       	sbrc	r16, 7
    34e8:	10 95       	com	r17
    34ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    34ec:	9d 85       	ldd	r25, Y+13	; 0x0d
    34ee:	ae 85       	ldd	r26, Y+14	; 0x0e
    34f0:	bf 85       	ldd	r27, Y+15	; 0x0f
    34f2:	2a e0       	ldi	r18, 0x0A	; 10
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e0       	ldi	r20, 0x00	; 0
    34f8:	50 e0       	ldi	r21, 0x00	; 0
    34fa:	bc 01       	movw	r22, r24
    34fc:	cd 01       	movw	r24, r26
    34fe:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <__divmodsi4>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	28 2f       	mov	r18, r24
    3508:	ce 01       	movw	r24, r28
    350a:	02 96       	adiw	r24, 0x02	; 2
    350c:	fc 01       	movw	r30, r24
    350e:	e0 0f       	add	r30, r16
    3510:	f1 1f       	adc	r31, r17
    3512:	20 83       	st	Z, r18
	   copy_s32Num = copy_s32Num /10 ;
    3514:	8c 85       	ldd	r24, Y+12	; 0x0c
    3516:	9d 85       	ldd	r25, Y+13	; 0x0d
    3518:	ae 85       	ldd	r26, Y+14	; 0x0e
    351a:	bf 85       	ldd	r27, Y+15	; 0x0f
    351c:	2a e0       	ldi	r18, 0x0A	; 10
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e0       	ldi	r20, 0x00	; 0
    3522:	50 e0       	ldi	r21, 0x00	; 0
    3524:	bc 01       	movw	r22, r24
    3526:	cd 01       	movw	r24, r26
    3528:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <__divmodsi4>
    352c:	da 01       	movw	r26, r20
    352e:	c9 01       	movw	r24, r18
    3530:	8c 87       	std	Y+12, r24	; 0x0c
    3532:	9d 87       	std	Y+13, r25	; 0x0d
    3534:	ae 87       	std	Y+14, r26	; 0x0e
    3536:	bf 87       	std	Y+15, r27	; 0x0f
	   i++;
    3538:	89 81       	ldd	r24, Y+1	; 0x01
    353a:	8f 5f       	subi	r24, 0xFF	; 255
    353c:	89 83       	std	Y+1, r24	; 0x01
   else if(copy_s32Num < 0)//negative
   {
	   H_LCD_void_sendData('-');
	   copy_s32Num *= -1;
   }
   while(copy_s32Num != 0)
    353e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3540:	9d 85       	ldd	r25, Y+13	; 0x0d
    3542:	ae 85       	ldd	r26, Y+14	; 0x0e
    3544:	bf 85       	ldd	r27, Y+15	; 0x0f
    3546:	00 97       	sbiw	r24, 0x00	; 0
    3548:	a1 05       	cpc	r26, r1
    354a:	b1 05       	cpc	r27, r1
    354c:	49 f6       	brne	.-110    	; 0x34e0 <H_LCD_void_sendIntNum+0x7e>
   {
	   Loc_Arr[i] = copy_s32Num % 10;
	   copy_s32Num = copy_s32Num /10 ;
	   i++;
   }
   i--;
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	81 50       	subi	r24, 0x01	; 1
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	11 c0       	rjmp	.+34     	; 0x3578 <H_LCD_void_sendIntNum+0x116>
   while(i>=0)
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	28 2f       	mov	r18, r24
    355a:	33 27       	eor	r19, r19
    355c:	27 fd       	sbrc	r18, 7
    355e:	30 95       	com	r19
    3560:	ce 01       	movw	r24, r28
    3562:	02 96       	adiw	r24, 0x02	; 2
    3564:	fc 01       	movw	r30, r24
    3566:	e2 0f       	add	r30, r18
    3568:	f3 1f       	adc	r31, r19
    356a:	80 81       	ld	r24, Z
    356c:	80 5d       	subi	r24, 0xD0	; 208
    356e:	0e 94 e7 19 	call	0x33ce	; 0x33ce <H_LCD_void_sendData>
	   i--;
    3572:	89 81       	ldd	r24, Y+1	; 0x01
    3574:	81 50       	subi	r24, 0x01	; 1
    3576:	89 83       	std	Y+1, r24	; 0x01
	   Loc_Arr[i] = copy_s32Num % 10;
	   copy_s32Num = copy_s32Num /10 ;
	   i++;
   }
   i--;
   while(i>=0)
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	88 23       	and	r24, r24
    357c:	64 f7       	brge	.-40     	; 0x3556 <H_LCD_void_sendIntNum+0xf4>
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
	   i--;
   }
}
    357e:	2f 96       	adiw	r28, 0x0f	; 15
    3580:	0f b6       	in	r0, 0x3f	; 63
    3582:	f8 94       	cli
    3584:	de bf       	out	0x3e, r29	; 62
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	cd bf       	out	0x3d, r28	; 61
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
    3592:	08 95       	ret

00003594 <H_LCD_void_gotXY>:
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	00 d0       	rcall	.+0      	; 0x359a <H_LCD_void_gotXY+0x6>
    359a:	00 d0       	rcall	.+0      	; 0x359c <H_LCD_void_gotXY+0x8>
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
    35a0:	89 83       	std	Y+1, r24	; 0x01
    35a2:	6a 83       	std	Y+2, r22	; 0x02
  if(copy_u8Row == 0 || copy_u8Row == 1) //check on row
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
    35a6:	88 23       	and	r24, r24
    35a8:	19 f0       	breq	.+6      	; 0x35b0 <H_LCD_void_gotXY+0x1c>
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	81 30       	cpi	r24, 0x01	; 1
    35ae:	d9 f4       	brne	.+54     	; 0x35e6 <H_LCD_void_gotXY+0x52>
  {
	  if(copy_u8Col >= 0 && copy_u8Col <= 15)// check on col
    35b0:	8a 81       	ldd	r24, Y+2	; 0x02
    35b2:	80 31       	cpi	r24, 0x10	; 16
    35b4:	c0 f4       	brcc	.+48     	; 0x35e6 <H_LCD_void_gotXY+0x52>
	  {
          switch(copy_u8Row)
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	28 2f       	mov	r18, r24
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	3c 83       	std	Y+4, r19	; 0x04
    35be:	2b 83       	std	Y+3, r18	; 0x03
    35c0:	8b 81       	ldd	r24, Y+3	; 0x03
    35c2:	9c 81       	ldd	r25, Y+4	; 0x04
    35c4:	00 97       	sbiw	r24, 0x00	; 0
    35c6:	31 f0       	breq	.+12     	; 0x35d4 <H_LCD_void_gotXY+0x40>
    35c8:	2b 81       	ldd	r18, Y+3	; 0x03
    35ca:	3c 81       	ldd	r19, Y+4	; 0x04
    35cc:	21 30       	cpi	r18, 0x01	; 1
    35ce:	31 05       	cpc	r19, r1
    35d0:	31 f0       	breq	.+12     	; 0x35de <H_LCD_void_gotXY+0x4a>
    35d2:	09 c0       	rjmp	.+18     	; 0x35e6 <H_LCD_void_gotXY+0x52>
          {
          case 0 :
        	  H_LCD_void_sendCommand(LCD_SET_R0C0_ + copy_u8Col);
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	80 58       	subi	r24, 0x80	; 128
    35d8:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <H_LCD_void_sendCommand>
    35dc:	04 c0       	rjmp	.+8      	; 0x35e6 <H_LCD_void_gotXY+0x52>
        	  break;
          case 1 :
        	  H_LCD_void_sendCommand(LCD_SET_R1C0_ + copy_u8Col);
    35de:	8a 81       	ldd	r24, Y+2	; 0x02
    35e0:	80 54       	subi	r24, 0x40	; 64
    35e2:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <H_LCD_void_sendCommand>
        	  break;
          }
	  }
  }
}
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	cf 91       	pop	r28
    35f0:	df 91       	pop	r29
    35f2:	08 95       	ret

000035f4 <H_LCD_void_creatCustomChar>:
void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    35f4:	df 93       	push	r29
    35f6:	cf 93       	push	r28
    35f8:	00 d0       	rcall	.+0      	; 0x35fa <H_LCD_void_creatCustomChar+0x6>
    35fa:	0f 92       	push	r0
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	9a 83       	std	Y+2, r25	; 0x02
    3602:	89 83       	std	Y+1, r24	; 0x01
    3604:	6b 83       	std	Y+3, r22	; 0x03

}
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	0f 92       	push	r0
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    361c:	89 83       	std	Y+1, r24	; 0x01

}
    361e:	0f 90       	pop	r0
    3620:	cf 91       	pop	r28
    3622:	df 91       	pop	r29
    3624:	08 95       	ret

00003626 <H_LCD_void_writeNlatch>:
static void H_LCD_void_writeNlatch(u8 copy_u8Byte)
{
    3626:	df 93       	push	r29
    3628:	cf 93       	push	r28
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
    362e:	e9 97       	sbiw	r28, 0x39	; 57
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	f8 94       	cli
    3634:	de bf       	out	0x3e, r29	; 62
    3636:	0f be       	out	0x3f, r0	; 63
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	89 af       	std	Y+57, r24	; 0x39
 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
  // step 5 : delay to allow LCD to process
 	_delay_ms(5);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
 	// EN = 0 disabled
 	M_DIO_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	62 e0       	ldi	r22, 0x02	; 2
    3640:	40 e0       	ldi	r20, 0x00	; 0
    3642:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
 	// devide Byte to 2 (4 bits )
 	// step 1 :send high order bits on pins (D7 .. D4)
 	M_DIO_void_setPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,4));
    3646:	89 ad       	ldd	r24, Y+57	; 0x39
    3648:	82 95       	swap	r24
    364a:	8f 70       	andi	r24, 0x0F	; 15
    364c:	98 2f       	mov	r25, r24
    364e:	91 70       	andi	r25, 0x01	; 1
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	63 e0       	ldi	r22, 0x03	; 3
    3654:	49 2f       	mov	r20, r25
    3656:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
 	M_DIO_void_setPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,5));
    365a:	89 ad       	ldd	r24, Y+57	; 0x39
    365c:	82 95       	swap	r24
    365e:	86 95       	lsr	r24
    3660:	87 70       	andi	r24, 0x07	; 7
    3662:	98 2f       	mov	r25, r24
    3664:	91 70       	andi	r25, 0x01	; 1
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	64 e0       	ldi	r22, 0x04	; 4
    366a:	49 2f       	mov	r20, r25
    366c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
 	M_DIO_void_setPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,6));
    3670:	89 ad       	ldd	r24, Y+57	; 0x39
    3672:	82 95       	swap	r24
    3674:	86 95       	lsr	r24
    3676:	86 95       	lsr	r24
    3678:	83 70       	andi	r24, 0x03	; 3
    367a:	98 2f       	mov	r25, r24
    367c:	91 70       	andi	r25, 0x01	; 1
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	65 e0       	ldi	r22, 0x05	; 5
    3682:	49 2f       	mov	r20, r25
    3684:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
 	M_DIO_void_setPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,7));
    3688:	89 ad       	ldd	r24, Y+57	; 0x39
    368a:	98 2f       	mov	r25, r24
    368c:	99 1f       	adc	r25, r25
    368e:	99 27       	eor	r25, r25
    3690:	99 1f       	adc	r25, r25
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	66 e0       	ldi	r22, 0x06	; 6
    3696:	49 2f       	mov	r20, r25
    3698:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
 	  //step 2 : Activate Enable ,( E = 1)
 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    369c:	81 e0       	ldi	r24, 0x01	; 1
    369e:	62 e0       	ldi	r22, 0x02	; 2
    36a0:	41 e0       	ldi	r20, 0x01	; 1
    36a2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	a0 e8       	ldi	r26, 0x80	; 128
    36ac:	bf e3       	ldi	r27, 0x3F	; 63
    36ae:	8d ab       	std	Y+53, r24	; 0x35
    36b0:	9e ab       	std	Y+54, r25	; 0x36
    36b2:	af ab       	std	Y+55, r26	; 0x37
    36b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b6:	6d a9       	ldd	r22, Y+53	; 0x35
    36b8:	7e a9       	ldd	r23, Y+54	; 0x36
    36ba:	8f a9       	ldd	r24, Y+55	; 0x37
    36bc:	98 ad       	ldd	r25, Y+56	; 0x38
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	4a e7       	ldi	r20, 0x7A	; 122
    36c4:	55 e4       	ldi	r21, 0x45	; 69
    36c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ca:	dc 01       	movw	r26, r24
    36cc:	cb 01       	movw	r24, r22
    36ce:	89 ab       	std	Y+49, r24	; 0x31
    36d0:	9a ab       	std	Y+50, r25	; 0x32
    36d2:	ab ab       	std	Y+51, r26	; 0x33
    36d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36d6:	69 a9       	ldd	r22, Y+49	; 0x31
    36d8:	7a a9       	ldd	r23, Y+50	; 0x32
    36da:	8b a9       	ldd	r24, Y+51	; 0x33
    36dc:	9c a9       	ldd	r25, Y+52	; 0x34
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	40 e8       	ldi	r20, 0x80	; 128
    36e4:	5f e3       	ldi	r21, 0x3F	; 63
    36e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36ea:	88 23       	and	r24, r24
    36ec:	2c f4       	brge	.+10     	; 0x36f8 <H_LCD_void_writeNlatch+0xd2>
		__ticks = 1;
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	98 ab       	std	Y+48, r25	; 0x30
    36f4:	8f a7       	std	Y+47, r24	; 0x2f
    36f6:	3f c0       	rjmp	.+126    	; 0x3776 <H_LCD_void_writeNlatch+0x150>
	else if (__tmp > 65535)
    36f8:	69 a9       	ldd	r22, Y+49	; 0x31
    36fa:	7a a9       	ldd	r23, Y+50	; 0x32
    36fc:	8b a9       	ldd	r24, Y+51	; 0x33
    36fe:	9c a9       	ldd	r25, Y+52	; 0x34
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	3f ef       	ldi	r19, 0xFF	; 255
    3704:	4f e7       	ldi	r20, 0x7F	; 127
    3706:	57 e4       	ldi	r21, 0x47	; 71
    3708:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    370c:	18 16       	cp	r1, r24
    370e:	4c f5       	brge	.+82     	; 0x3762 <H_LCD_void_writeNlatch+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3710:	6d a9       	ldd	r22, Y+53	; 0x35
    3712:	7e a9       	ldd	r23, Y+54	; 0x36
    3714:	8f a9       	ldd	r24, Y+55	; 0x37
    3716:	98 ad       	ldd	r25, Y+56	; 0x38
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	40 e2       	ldi	r20, 0x20	; 32
    371e:	51 e4       	ldi	r21, 0x41	; 65
    3720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	bc 01       	movw	r22, r24
    372a:	cd 01       	movw	r24, r26
    372c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3730:	dc 01       	movw	r26, r24
    3732:	cb 01       	movw	r24, r22
    3734:	98 ab       	std	Y+48, r25	; 0x30
    3736:	8f a7       	std	Y+47, r24	; 0x2f
    3738:	0f c0       	rjmp	.+30     	; 0x3758 <H_LCD_void_writeNlatch+0x132>
    373a:	80 e9       	ldi	r24, 0x90	; 144
    373c:	91 e0       	ldi	r25, 0x01	; 1
    373e:	9e a7       	std	Y+46, r25	; 0x2e
    3740:	8d a7       	std	Y+45, r24	; 0x2d
    3742:	8d a5       	ldd	r24, Y+45	; 0x2d
    3744:	9e a5       	ldd	r25, Y+46	; 0x2e
    3746:	01 97       	sbiw	r24, 0x01	; 1
    3748:	f1 f7       	brne	.-4      	; 0x3746 <H_LCD_void_writeNlatch+0x120>
    374a:	9e a7       	std	Y+46, r25	; 0x2e
    374c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    374e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3750:	98 a9       	ldd	r25, Y+48	; 0x30
    3752:	01 97       	sbiw	r24, 0x01	; 1
    3754:	98 ab       	std	Y+48, r25	; 0x30
    3756:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3758:	8f a5       	ldd	r24, Y+47	; 0x2f
    375a:	98 a9       	ldd	r25, Y+48	; 0x30
    375c:	00 97       	sbiw	r24, 0x00	; 0
    375e:	69 f7       	brne	.-38     	; 0x373a <H_LCD_void_writeNlatch+0x114>
    3760:	14 c0       	rjmp	.+40     	; 0x378a <H_LCD_void_writeNlatch+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3762:	69 a9       	ldd	r22, Y+49	; 0x31
    3764:	7a a9       	ldd	r23, Y+50	; 0x32
    3766:	8b a9       	ldd	r24, Y+51	; 0x33
    3768:	9c a9       	ldd	r25, Y+52	; 0x34
    376a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	98 ab       	std	Y+48, r25	; 0x30
    3774:	8f a7       	std	Y+47, r24	; 0x2f
    3776:	8f a5       	ldd	r24, Y+47	; 0x2f
    3778:	98 a9       	ldd	r25, Y+48	; 0x30
    377a:	9c a7       	std	Y+44, r25	; 0x2c
    377c:	8b a7       	std	Y+43, r24	; 0x2b
    377e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3780:	9c a5       	ldd	r25, Y+44	; 0x2c
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	f1 f7       	brne	.-4      	; 0x3782 <H_LCD_void_writeNlatch+0x15c>
    3786:	9c a7       	std	Y+44, r25	; 0x2c
    3788:	8b a7       	std	Y+43, r24	; 0x2b
 	  // step 3 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 	  // step 4 : deactivate Enable (E = 0)
 	 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	62 e0       	ldi	r22, 0x02	; 2
    378e:	40 e0       	ldi	r20, 0x00	; 0
    3790:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    3794:	80 e0       	ldi	r24, 0x00	; 0
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	a0 ea       	ldi	r26, 0xA0	; 160
    379a:	b0 e4       	ldi	r27, 0x40	; 64
    379c:	8f a3       	std	Y+39, r24	; 0x27
    379e:	98 a7       	std	Y+40, r25	; 0x28
    37a0:	a9 a7       	std	Y+41, r26	; 0x29
    37a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a4:	6f a1       	ldd	r22, Y+39	; 0x27
    37a6:	78 a5       	ldd	r23, Y+40	; 0x28
    37a8:	89 a5       	ldd	r24, Y+41	; 0x29
    37aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	4a e7       	ldi	r20, 0x7A	; 122
    37b2:	55 e4       	ldi	r21, 0x45	; 69
    37b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	8b a3       	std	Y+35, r24	; 0x23
    37be:	9c a3       	std	Y+36, r25	; 0x24
    37c0:	ad a3       	std	Y+37, r26	; 0x25
    37c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37c4:	6b a1       	ldd	r22, Y+35	; 0x23
    37c6:	7c a1       	ldd	r23, Y+36	; 0x24
    37c8:	8d a1       	ldd	r24, Y+37	; 0x25
    37ca:	9e a1       	ldd	r25, Y+38	; 0x26
    37cc:	20 e0       	ldi	r18, 0x00	; 0
    37ce:	30 e0       	ldi	r19, 0x00	; 0
    37d0:	40 e8       	ldi	r20, 0x80	; 128
    37d2:	5f e3       	ldi	r21, 0x3F	; 63
    37d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37d8:	88 23       	and	r24, r24
    37da:	2c f4       	brge	.+10     	; 0x37e6 <H_LCD_void_writeNlatch+0x1c0>
		__ticks = 1;
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	9a a3       	std	Y+34, r25	; 0x22
    37e2:	89 a3       	std	Y+33, r24	; 0x21
    37e4:	3f c0       	rjmp	.+126    	; 0x3864 <H_LCD_void_writeNlatch+0x23e>
	else if (__tmp > 65535)
    37e6:	6b a1       	ldd	r22, Y+35	; 0x23
    37e8:	7c a1       	ldd	r23, Y+36	; 0x24
    37ea:	8d a1       	ldd	r24, Y+37	; 0x25
    37ec:	9e a1       	ldd	r25, Y+38	; 0x26
    37ee:	20 e0       	ldi	r18, 0x00	; 0
    37f0:	3f ef       	ldi	r19, 0xFF	; 255
    37f2:	4f e7       	ldi	r20, 0x7F	; 127
    37f4:	57 e4       	ldi	r21, 0x47	; 71
    37f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37fa:	18 16       	cp	r1, r24
    37fc:	4c f5       	brge	.+82     	; 0x3850 <H_LCD_void_writeNlatch+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37fe:	6f a1       	ldd	r22, Y+39	; 0x27
    3800:	78 a5       	ldd	r23, Y+40	; 0x28
    3802:	89 a5       	ldd	r24, Y+41	; 0x29
    3804:	9a a5       	ldd	r25, Y+42	; 0x2a
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e2       	ldi	r20, 0x20	; 32
    380c:	51 e4       	ldi	r21, 0x41	; 65
    380e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	bc 01       	movw	r22, r24
    3818:	cd 01       	movw	r24, r26
    381a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	9a a3       	std	Y+34, r25	; 0x22
    3824:	89 a3       	std	Y+33, r24	; 0x21
    3826:	0f c0       	rjmp	.+30     	; 0x3846 <H_LCD_void_writeNlatch+0x220>
    3828:	80 e9       	ldi	r24, 0x90	; 144
    382a:	91 e0       	ldi	r25, 0x01	; 1
    382c:	98 a3       	std	Y+32, r25	; 0x20
    382e:	8f 8f       	std	Y+31, r24	; 0x1f
    3830:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3832:	98 a1       	ldd	r25, Y+32	; 0x20
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	f1 f7       	brne	.-4      	; 0x3834 <H_LCD_void_writeNlatch+0x20e>
    3838:	98 a3       	std	Y+32, r25	; 0x20
    383a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    383c:	89 a1       	ldd	r24, Y+33	; 0x21
    383e:	9a a1       	ldd	r25, Y+34	; 0x22
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	9a a3       	std	Y+34, r25	; 0x22
    3844:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3846:	89 a1       	ldd	r24, Y+33	; 0x21
    3848:	9a a1       	ldd	r25, Y+34	; 0x22
    384a:	00 97       	sbiw	r24, 0x00	; 0
    384c:	69 f7       	brne	.-38     	; 0x3828 <H_LCD_void_writeNlatch+0x202>
    384e:	14 c0       	rjmp	.+40     	; 0x3878 <H_LCD_void_writeNlatch+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3850:	6b a1       	ldd	r22, Y+35	; 0x23
    3852:	7c a1       	ldd	r23, Y+36	; 0x24
    3854:	8d a1       	ldd	r24, Y+37	; 0x25
    3856:	9e a1       	ldd	r25, Y+38	; 0x26
    3858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385c:	dc 01       	movw	r26, r24
    385e:	cb 01       	movw	r24, r22
    3860:	9a a3       	std	Y+34, r25	; 0x22
    3862:	89 a3       	std	Y+33, r24	; 0x21
    3864:	89 a1       	ldd	r24, Y+33	; 0x21
    3866:	9a a1       	ldd	r25, Y+34	; 0x22
    3868:	9e 8f       	std	Y+30, r25	; 0x1e
    386a:	8d 8f       	std	Y+29, r24	; 0x1d
    386c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    386e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3870:	01 97       	sbiw	r24, 0x01	; 1
    3872:	f1 f7       	brne	.-4      	; 0x3870 <H_LCD_void_writeNlatch+0x24a>
    3874:	9e 8f       	std	Y+30, r25	; 0x1e
    3876:	8d 8f       	std	Y+29, r24	; 0x1d
 	  // step 5 : delay to allow LCD to process
 	 	_delay_ms(5);
 	 	// step 6 :send Low order bits on pins (D7 .. D4)
 	 	M_DIO_void_setPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,0));
    3878:	89 ad       	ldd	r24, Y+57	; 0x39
    387a:	98 2f       	mov	r25, r24
    387c:	91 70       	andi	r25, 0x01	; 1
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	63 e0       	ldi	r22, 0x03	; 3
    3882:	49 2f       	mov	r20, r25
    3884:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
 	 	M_DIO_void_setPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,1));
    3888:	89 ad       	ldd	r24, Y+57	; 0x39
    388a:	86 95       	lsr	r24
    388c:	98 2f       	mov	r25, r24
    388e:	91 70       	andi	r25, 0x01	; 1
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	64 e0       	ldi	r22, 0x04	; 4
    3894:	49 2f       	mov	r20, r25
    3896:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
 	 	M_DIO_void_setPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,2));
    389a:	89 ad       	ldd	r24, Y+57	; 0x39
    389c:	86 95       	lsr	r24
    389e:	86 95       	lsr	r24
    38a0:	98 2f       	mov	r25, r24
    38a2:	91 70       	andi	r25, 0x01	; 1
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	65 e0       	ldi	r22, 0x05	; 5
    38a8:	49 2f       	mov	r20, r25
    38aa:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
 	 	M_DIO_void_setPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,3));
    38ae:	89 ad       	ldd	r24, Y+57	; 0x39
    38b0:	86 95       	lsr	r24
    38b2:	86 95       	lsr	r24
    38b4:	86 95       	lsr	r24
    38b6:	98 2f       	mov	r25, r24
    38b8:	91 70       	andi	r25, 0x01	; 1
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	66 e0       	ldi	r22, 0x06	; 6
    38be:	49 2f       	mov	r20, r25
    38c0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
 	 	 //step 7 : Activate Enable ,( E = 1)
 	 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	62 e0       	ldi	r22, 0x02	; 2
    38c8:	41 e0       	ldi	r20, 0x01	; 1
    38ca:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	a0 e8       	ldi	r26, 0x80	; 128
    38d4:	bf e3       	ldi	r27, 0x3F	; 63
    38d6:	89 8f       	std	Y+25, r24	; 0x19
    38d8:	9a 8f       	std	Y+26, r25	; 0x1a
    38da:	ab 8f       	std	Y+27, r26	; 0x1b
    38dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38de:	69 8d       	ldd	r22, Y+25	; 0x19
    38e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	4a e7       	ldi	r20, 0x7A	; 122
    38ec:	55 e4       	ldi	r21, 0x45	; 69
    38ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	8d 8b       	std	Y+21, r24	; 0x15
    38f8:	9e 8b       	std	Y+22, r25	; 0x16
    38fa:	af 8b       	std	Y+23, r26	; 0x17
    38fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3900:	7e 89       	ldd	r23, Y+22	; 0x16
    3902:	8f 89       	ldd	r24, Y+23	; 0x17
    3904:	98 8d       	ldd	r25, Y+24	; 0x18
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e8       	ldi	r20, 0x80	; 128
    390c:	5f e3       	ldi	r21, 0x3F	; 63
    390e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3912:	88 23       	and	r24, r24
    3914:	2c f4       	brge	.+10     	; 0x3920 <H_LCD_void_writeNlatch+0x2fa>
		__ticks = 1;
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	9c 8b       	std	Y+20, r25	; 0x14
    391c:	8b 8b       	std	Y+19, r24	; 0x13
    391e:	3f c0       	rjmp	.+126    	; 0x399e <H_LCD_void_writeNlatch+0x378>
	else if (__tmp > 65535)
    3920:	6d 89       	ldd	r22, Y+21	; 0x15
    3922:	7e 89       	ldd	r23, Y+22	; 0x16
    3924:	8f 89       	ldd	r24, Y+23	; 0x17
    3926:	98 8d       	ldd	r25, Y+24	; 0x18
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	3f ef       	ldi	r19, 0xFF	; 255
    392c:	4f e7       	ldi	r20, 0x7F	; 127
    392e:	57 e4       	ldi	r21, 0x47	; 71
    3930:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3934:	18 16       	cp	r1, r24
    3936:	4c f5       	brge	.+82     	; 0x398a <H_LCD_void_writeNlatch+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3938:	69 8d       	ldd	r22, Y+25	; 0x19
    393a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    393c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    393e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e2       	ldi	r20, 0x20	; 32
    3946:	51 e4       	ldi	r21, 0x41	; 65
    3948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	bc 01       	movw	r22, r24
    3952:	cd 01       	movw	r24, r26
    3954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	9c 8b       	std	Y+20, r25	; 0x14
    395e:	8b 8b       	std	Y+19, r24	; 0x13
    3960:	0f c0       	rjmp	.+30     	; 0x3980 <H_LCD_void_writeNlatch+0x35a>
    3962:	80 e9       	ldi	r24, 0x90	; 144
    3964:	91 e0       	ldi	r25, 0x01	; 1
    3966:	9a 8b       	std	Y+18, r25	; 0x12
    3968:	89 8b       	std	Y+17, r24	; 0x11
    396a:	89 89       	ldd	r24, Y+17	; 0x11
    396c:	9a 89       	ldd	r25, Y+18	; 0x12
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	f1 f7       	brne	.-4      	; 0x396e <H_LCD_void_writeNlatch+0x348>
    3972:	9a 8b       	std	Y+18, r25	; 0x12
    3974:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3976:	8b 89       	ldd	r24, Y+19	; 0x13
    3978:	9c 89       	ldd	r25, Y+20	; 0x14
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	9c 8b       	std	Y+20, r25	; 0x14
    397e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3980:	8b 89       	ldd	r24, Y+19	; 0x13
    3982:	9c 89       	ldd	r25, Y+20	; 0x14
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	69 f7       	brne	.-38     	; 0x3962 <H_LCD_void_writeNlatch+0x33c>
    3988:	14 c0       	rjmp	.+40     	; 0x39b2 <H_LCD_void_writeNlatch+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398a:	6d 89       	ldd	r22, Y+21	; 0x15
    398c:	7e 89       	ldd	r23, Y+22	; 0x16
    398e:	8f 89       	ldd	r24, Y+23	; 0x17
    3990:	98 8d       	ldd	r25, Y+24	; 0x18
    3992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	9c 8b       	std	Y+20, r25	; 0x14
    399c:	8b 8b       	std	Y+19, r24	; 0x13
    399e:	8b 89       	ldd	r24, Y+19	; 0x13
    39a0:	9c 89       	ldd	r25, Y+20	; 0x14
    39a2:	98 8b       	std	Y+16, r25	; 0x10
    39a4:	8f 87       	std	Y+15, r24	; 0x0f
    39a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39a8:	98 89       	ldd	r25, Y+16	; 0x10
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <H_LCD_void_writeNlatch+0x384>
    39ae:	98 8b       	std	Y+16, r25	; 0x10
    39b0:	8f 87       	std	Y+15, r24	; 0x0f
 	 	 // step 8 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 	 	 // step 9 : deactivate Enable (E = 0)
 	 	M_DIO_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	62 e0       	ldi	r22, 0x02	; 2
    39b6:	40 e0       	ldi	r20, 0x00	; 0
    39b8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	a0 ea       	ldi	r26, 0xA0	; 160
    39c2:	b0 e4       	ldi	r27, 0x40	; 64
    39c4:	8b 87       	std	Y+11, r24	; 0x0b
    39c6:	9c 87       	std	Y+12, r25	; 0x0c
    39c8:	ad 87       	std	Y+13, r26	; 0x0d
    39ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    39d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	4a e7       	ldi	r20, 0x7A	; 122
    39da:	55 e4       	ldi	r21, 0x45	; 69
    39dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	8f 83       	std	Y+7, r24	; 0x07
    39e6:	98 87       	std	Y+8, r25	; 0x08
    39e8:	a9 87       	std	Y+9, r26	; 0x09
    39ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ec:	6f 81       	ldd	r22, Y+7	; 0x07
    39ee:	78 85       	ldd	r23, Y+8	; 0x08
    39f0:	89 85       	ldd	r24, Y+9	; 0x09
    39f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	40 e8       	ldi	r20, 0x80	; 128
    39fa:	5f e3       	ldi	r21, 0x3F	; 63
    39fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a00:	88 23       	and	r24, r24
    3a02:	2c f4       	brge	.+10     	; 0x3a0e <H_LCD_void_writeNlatch+0x3e8>
		__ticks = 1;
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	9e 83       	std	Y+6, r25	; 0x06
    3a0a:	8d 83       	std	Y+5, r24	; 0x05
    3a0c:	3f c0       	rjmp	.+126    	; 0x3a8c <H_LCD_void_writeNlatch+0x466>
	else if (__tmp > 65535)
    3a0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a10:	78 85       	ldd	r23, Y+8	; 0x08
    3a12:	89 85       	ldd	r24, Y+9	; 0x09
    3a14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	3f ef       	ldi	r19, 0xFF	; 255
    3a1a:	4f e7       	ldi	r20, 0x7F	; 127
    3a1c:	57 e4       	ldi	r21, 0x47	; 71
    3a1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a22:	18 16       	cp	r1, r24
    3a24:	4c f5       	brge	.+82     	; 0x3a78 <H_LCD_void_writeNlatch+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e2       	ldi	r20, 0x20	; 32
    3a34:	51 e4       	ldi	r21, 0x41	; 65
    3a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	bc 01       	movw	r22, r24
    3a40:	cd 01       	movw	r24, r26
    3a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	9e 83       	std	Y+6, r25	; 0x06
    3a4c:	8d 83       	std	Y+5, r24	; 0x05
    3a4e:	0f c0       	rjmp	.+30     	; 0x3a6e <H_LCD_void_writeNlatch+0x448>
    3a50:	80 e9       	ldi	r24, 0x90	; 144
    3a52:	91 e0       	ldi	r25, 0x01	; 1
    3a54:	9c 83       	std	Y+4, r25	; 0x04
    3a56:	8b 83       	std	Y+3, r24	; 0x03
    3a58:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a5c:	01 97       	sbiw	r24, 0x01	; 1
    3a5e:	f1 f7       	brne	.-4      	; 0x3a5c <H_LCD_void_writeNlatch+0x436>
    3a60:	9c 83       	std	Y+4, r25	; 0x04
    3a62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a64:	8d 81       	ldd	r24, Y+5	; 0x05
    3a66:	9e 81       	ldd	r25, Y+6	; 0x06
    3a68:	01 97       	sbiw	r24, 0x01	; 1
    3a6a:	9e 83       	std	Y+6, r25	; 0x06
    3a6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a70:	9e 81       	ldd	r25, Y+6	; 0x06
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	69 f7       	brne	.-38     	; 0x3a50 <H_LCD_void_writeNlatch+0x42a>
    3a76:	14 c0       	rjmp	.+40     	; 0x3aa0 <H_LCD_void_writeNlatch+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a78:	6f 81       	ldd	r22, Y+7	; 0x07
    3a7a:	78 85       	ldd	r23, Y+8	; 0x08
    3a7c:	89 85       	ldd	r24, Y+9	; 0x09
    3a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	9e 83       	std	Y+6, r25	; 0x06
    3a8a:	8d 83       	std	Y+5, r24	; 0x05
    3a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a90:	9a 83       	std	Y+2, r25	; 0x02
    3a92:	89 83       	std	Y+1, r24	; 0x01
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	9a 81       	ldd	r25, Y+2	; 0x02
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <H_LCD_void_writeNlatch+0x472>
    3a9c:	9a 83       	std	Y+2, r25	; 0x02
    3a9e:	89 83       	std	Y+1, r24	; 0x01
 	 	_delay_ms(5);
#else
  #error("Wrong LCD mode")
#endif

}
    3aa0:	e9 96       	adiw	r28, 0x39	; 57
    3aa2:	0f b6       	in	r0, 0x3f	; 63
    3aa4:	f8 94       	cli
    3aa6:	de bf       	out	0x3e, r29	; 62
    3aa8:	0f be       	out	0x3f, r0	; 63
    3aaa:	cd bf       	out	0x3d, r28	; 61
    3aac:	cf 91       	pop	r28
    3aae:	df 91       	pop	r29
    3ab0:	08 95       	ret

00003ab2 <H_KEYPAD_void_init>:
#include"KEYPAD_priv.h"
#include"KEYPAD_config.h"
#include"KEYPAD_int.h"

void H_KEYPAD_void_init()
{
    3ab2:	df 93       	push	r29
    3ab4:	cf 93       	push	r28
    3ab6:	cd b7       	in	r28, 0x3d	; 61
    3ab8:	de b7       	in	r29, 0x3e	; 62
  //set all rows  direction as output
	M_DIO_void_setPinDir(KEYPAD_R0_PORT, KEYPAD_R0_PIN, OUT);
    3aba:	82 e0       	ldi	r24, 0x02	; 2
    3abc:	64 e0       	ldi	r22, 0x04	; 4
    3abe:	41 e0       	ldi	r20, 0x01	; 1
    3ac0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R1_PORT, KEYPAD_R1_PIN, OUT);
    3ac4:	82 e0       	ldi	r24, 0x02	; 2
    3ac6:	65 e0       	ldi	r22, 0x05	; 5
    3ac8:	41 e0       	ldi	r20, 0x01	; 1
    3aca:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R2_PORT, KEYPAD_R2_PIN, OUT);
    3ace:	82 e0       	ldi	r24, 0x02	; 2
    3ad0:	66 e0       	ldi	r22, 0x06	; 6
    3ad2:	41 e0       	ldi	r20, 0x01	; 1
    3ad4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_R3_PORT, KEYPAD_R3_PIN, OUT);
    3ad8:	82 e0       	ldi	r24, 0x02	; 2
    3ada:	67 e0       	ldi	r22, 0x07	; 7
    3adc:	41 e0       	ldi	r20, 0x01	; 1
    3ade:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>

	//set all collums direction as input
	M_DIO_void_setPinDir(KEYPAD_C0_PORT,KEYPAD_C0_PIN, IN);
    3ae2:	84 e0       	ldi	r24, 0x04	; 4
    3ae4:	62 e0       	ldi	r22, 0x02	; 2
    3ae6:	40 e0       	ldi	r20, 0x00	; 0
    3ae8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C1_PORT, KEYPAD_C1_PIN, IN);
    3aec:	84 e0       	ldi	r24, 0x04	; 4
    3aee:	63 e0       	ldi	r22, 0x03	; 3
    3af0:	40 e0       	ldi	r20, 0x00	; 0
    3af2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C2_PORT, KEYPAD_C2_PIN, IN);
    3af6:	84 e0       	ldi	r24, 0x04	; 4
    3af8:	64 e0       	ldi	r22, 0x04	; 4
    3afa:	40 e0       	ldi	r20, 0x00	; 0
    3afc:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(KEYPAD_C3_PORT, KEYPAD_C3_PIN, IN);
    3b00:	84 e0       	ldi	r24, 0x04	; 4
    3b02:	65 e0       	ldi	r22, 0x05	; 5
    3b04:	40 e0       	ldi	r20, 0x00	; 0
    3b06:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>

	M_DIO_void_setPinValue(KEYPAD_C0_PORT,KEYPAD_C0_PIN,HIGH);
    3b0a:	84 e0       	ldi	r24, 0x04	; 4
    3b0c:	62 e0       	ldi	r22, 0x02	; 2
    3b0e:	41 e0       	ldi	r20, 0x01	; 1
    3b10:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(KEYPAD_C1_PORT,KEYPAD_C1_PIN,HIGH);
    3b14:	84 e0       	ldi	r24, 0x04	; 4
    3b16:	63 e0       	ldi	r22, 0x03	; 3
    3b18:	41 e0       	ldi	r20, 0x01	; 1
    3b1a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(KEYPAD_C2_PORT,KEYPAD_C2_PIN,HIGH);
    3b1e:	84 e0       	ldi	r24, 0x04	; 4
    3b20:	64 e0       	ldi	r22, 0x04	; 4
    3b22:	41 e0       	ldi	r20, 0x01	; 1
    3b24:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(KEYPAD_C3_PORT,KEYPAD_C3_PIN,HIGH);
    3b28:	84 e0       	ldi	r24, 0x04	; 4
    3b2a:	65 e0       	ldi	r22, 0x05	; 5
    3b2c:	41 e0       	ldi	r20, 0x01	; 1
    3b2e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>

	//deactivate rows (high)
	M_DIO_void_setPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
    3b32:	82 e0       	ldi	r24, 0x02	; 2
    3b34:	64 e0       	ldi	r22, 0x04	; 4
    3b36:	41 e0       	ldi	r20, 0x01	; 1
    3b38:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
    3b3c:	82 e0       	ldi	r24, 0x02	; 2
    3b3e:	65 e0       	ldi	r22, 0x05	; 5
    3b40:	41 e0       	ldi	r20, 0x01	; 1
    3b42:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    3b46:	82 e0       	ldi	r24, 0x02	; 2
    3b48:	66 e0       	ldi	r22, 0x06	; 6
    3b4a:	41 e0       	ldi	r20, 0x01	; 1
    3b4c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,HIGH);
    3b50:	82 e0       	ldi	r24, 0x02	; 2
    3b52:	67 e0       	ldi	r22, 0x07	; 7
    3b54:	41 e0       	ldi	r20, 0x01	; 1
    3b56:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>

  }
    3b5a:	cf 91       	pop	r28
    3b5c:	df 91       	pop	r29
    3b5e:	08 95       	ret

00003b60 <H_KEYPAD_void_getPressedKey>:
u8 H_KEYPAD_void_getPressedKey()
{
    3b60:	df 93       	push	r29
    3b62:	cf 93       	push	r28
    3b64:	cd b7       	in	r28, 0x3d	; 61
    3b66:	de b7       	in	r29, 0x3e	; 62
    3b68:	a8 97       	sbiw	r28, 0x28	; 40
    3b6a:	0f b6       	in	r0, 0x3f	; 63
    3b6c:	f8 94       	cli
    3b6e:	de bf       	out	0x3e, r29	; 62
    3b70:	0f be       	out	0x3f, r0	; 63
    3b72:	cd bf       	out	0x3d, r28	; 61
	u8 loc_state= NUM_PRESSED_KEY ;
    3b74:	8f ef       	ldi	r24, 0xFF	; 255
    3b76:	89 8b       	std	Y+17, r24	; 0x11
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
    3b78:	ce 01       	movw	r24, r28
    3b7a:	42 96       	adiw	r24, 0x12	; 18
    3b7c:	9d a3       	std	Y+37, r25	; 0x25
    3b7e:	8c a3       	std	Y+36, r24	; 0x24
    3b80:	e7 ef       	ldi	r30, 0xF7	; 247
    3b82:	f1 e0       	ldi	r31, 0x01	; 1
    3b84:	ff a3       	std	Y+39, r31	; 0x27
    3b86:	ee a3       	std	Y+38, r30	; 0x26
    3b88:	f0 e1       	ldi	r31, 0x10	; 16
    3b8a:	f8 a7       	std	Y+40, r31	; 0x28
    3b8c:	ee a1       	ldd	r30, Y+38	; 0x26
    3b8e:	ff a1       	ldd	r31, Y+39	; 0x27
    3b90:	00 80       	ld	r0, Z
    3b92:	8e a1       	ldd	r24, Y+38	; 0x26
    3b94:	9f a1       	ldd	r25, Y+39	; 0x27
    3b96:	01 96       	adiw	r24, 0x01	; 1
    3b98:	9f a3       	std	Y+39, r25	; 0x27
    3b9a:	8e a3       	std	Y+38, r24	; 0x26
    3b9c:	ec a1       	ldd	r30, Y+36	; 0x24
    3b9e:	fd a1       	ldd	r31, Y+37	; 0x25
    3ba0:	00 82       	st	Z, r0
    3ba2:	8c a1       	ldd	r24, Y+36	; 0x24
    3ba4:	9d a1       	ldd	r25, Y+37	; 0x25
    3ba6:	01 96       	adiw	r24, 0x01	; 1
    3ba8:	9d a3       	std	Y+37, r25	; 0x25
    3baa:	8c a3       	std	Y+36, r24	; 0x24
    3bac:	98 a5       	ldd	r25, Y+40	; 0x28
    3bae:	91 50       	subi	r25, 0x01	; 1
    3bb0:	98 a7       	std	Y+40, r25	; 0x28
    3bb2:	e8 a5       	ldd	r30, Y+40	; 0x28
    3bb4:	ee 23       	and	r30, r30
    3bb6:	51 f7       	brne	.-44     	; 0x3b8c <H_KEYPAD_void_getPressedKey+0x2c>
	u8 read;
	 for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    3bb8:	84 e0       	ldi	r24, 0x04	; 4
    3bba:	88 8b       	std	Y+16, r24	; 0x10
    3bbc:	c9 c0       	rjmp	.+402    	; 0x3d50 <H_KEYPAD_void_getPressedKey+0x1f0>
	{
		 M_DIO_void_setPinValue(KEYPAD_ROW_PORTS,loc_row_indx,LOW);
    3bbe:	82 e0       	ldi	r24, 0x02	; 2
    3bc0:	68 89       	ldd	r22, Y+16	; 0x10
    3bc2:	40 e0       	ldi	r20, 0x00	; 0
    3bc4:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
		   for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    3bc8:	82 e0       	ldi	r24, 0x02	; 2
    3bca:	8f 87       	std	Y+15, r24	; 0x0f
    3bcc:	b5 c0       	rjmp	.+362    	; 0x3d38 <H_KEYPAD_void_getPressedKey+0x1d8>
		   {
			   M_DIO_void_getPinValue(KEYPAD_COLS_PORTS, loc_col_indx, &read);
    3bce:	9e 01       	movw	r18, r28
    3bd0:	2e 5d       	subi	r18, 0xDE	; 222
    3bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3bd4:	84 e0       	ldi	r24, 0x04	; 4
    3bd6:	6f 85       	ldd	r22, Y+15	; 0x0f
    3bd8:	a9 01       	movw	r20, r18
    3bda:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <M_DIO_void_getPinValue>
			   if(read==ACTIVE_LOW_PRESSED)
    3bde:	8a a1       	ldd	r24, Y+34	; 0x22
    3be0:	88 23       	and	r24, r24
    3be2:	09 f0       	breq	.+2      	; 0x3be6 <H_KEYPAD_void_getPressedKey+0x86>
    3be4:	a6 c0       	rjmp	.+332    	; 0x3d32 <H_KEYPAD_void_getPressedKey+0x1d2>
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	a8 ec       	ldi	r26, 0xC8	; 200
    3bec:	b2 e4       	ldi	r27, 0x42	; 66
    3bee:	8b 87       	std	Y+11, r24	; 0x0b
    3bf0:	9c 87       	std	Y+12, r25	; 0x0c
    3bf2:	ad 87       	std	Y+13, r26	; 0x0d
    3bf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	4a e7       	ldi	r20, 0x7A	; 122
    3c04:	55 e4       	ldi	r21, 0x45	; 69
    3c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22
    3c0e:	8f 83       	std	Y+7, r24	; 0x07
    3c10:	98 87       	std	Y+8, r25	; 0x08
    3c12:	a9 87       	std	Y+9, r26	; 0x09
    3c14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c16:	6f 81       	ldd	r22, Y+7	; 0x07
    3c18:	78 85       	ldd	r23, Y+8	; 0x08
    3c1a:	89 85       	ldd	r24, Y+9	; 0x09
    3c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e8       	ldi	r20, 0x80	; 128
    3c24:	5f e3       	ldi	r21, 0x3F	; 63
    3c26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c2a:	88 23       	and	r24, r24
    3c2c:	2c f4       	brge	.+10     	; 0x3c38 <H_KEYPAD_void_getPressedKey+0xd8>
		__ticks = 1;
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	9e 83       	std	Y+6, r25	; 0x06
    3c34:	8d 83       	std	Y+5, r24	; 0x05
    3c36:	3f c0       	rjmp	.+126    	; 0x3cb6 <H_KEYPAD_void_getPressedKey+0x156>
	else if (__tmp > 65535)
    3c38:	6f 81       	ldd	r22, Y+7	; 0x07
    3c3a:	78 85       	ldd	r23, Y+8	; 0x08
    3c3c:	89 85       	ldd	r24, Y+9	; 0x09
    3c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	3f ef       	ldi	r19, 0xFF	; 255
    3c44:	4f e7       	ldi	r20, 0x7F	; 127
    3c46:	57 e4       	ldi	r21, 0x47	; 71
    3c48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c4c:	18 16       	cp	r1, r24
    3c4e:	4c f5       	brge	.+82     	; 0x3ca2 <H_KEYPAD_void_getPressedKey+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	40 e2       	ldi	r20, 0x20	; 32
    3c5e:	51 e4       	ldi	r21, 0x41	; 65
    3c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	bc 01       	movw	r22, r24
    3c6a:	cd 01       	movw	r24, r26
    3c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	9e 83       	std	Y+6, r25	; 0x06
    3c76:	8d 83       	std	Y+5, r24	; 0x05
    3c78:	0f c0       	rjmp	.+30     	; 0x3c98 <H_KEYPAD_void_getPressedKey+0x138>
    3c7a:	80 e9       	ldi	r24, 0x90	; 144
    3c7c:	91 e0       	ldi	r25, 0x01	; 1
    3c7e:	9c 83       	std	Y+4, r25	; 0x04
    3c80:	8b 83       	std	Y+3, r24	; 0x03
    3c82:	8b 81       	ldd	r24, Y+3	; 0x03
    3c84:	9c 81       	ldd	r25, Y+4	; 0x04
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	f1 f7       	brne	.-4      	; 0x3c86 <H_KEYPAD_void_getPressedKey+0x126>
    3c8a:	9c 83       	std	Y+4, r25	; 0x04
    3c8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c90:	9e 81       	ldd	r25, Y+6	; 0x06
    3c92:	01 97       	sbiw	r24, 0x01	; 1
    3c94:	9e 83       	std	Y+6, r25	; 0x06
    3c96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c98:	8d 81       	ldd	r24, Y+5	; 0x05
    3c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9c:	00 97       	sbiw	r24, 0x00	; 0
    3c9e:	69 f7       	brne	.-38     	; 0x3c7a <H_KEYPAD_void_getPressedKey+0x11a>
    3ca0:	14 c0       	rjmp	.+40     	; 0x3cca <H_KEYPAD_void_getPressedKey+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca4:	78 85       	ldd	r23, Y+8	; 0x08
    3ca6:	89 85       	ldd	r24, Y+9	; 0x09
    3ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	9e 83       	std	Y+6, r25	; 0x06
    3cb4:	8d 83       	std	Y+5, r24	; 0x05
    3cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cba:	9a 83       	std	Y+2, r25	; 0x02
    3cbc:	89 83       	std	Y+1, r24	; 0x01
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	f1 f7       	brne	.-4      	; 0x3cc2 <H_KEYPAD_void_getPressedKey+0x162>
    3cc6:	9a 83       	std	Y+2, r25	; 0x02
    3cc8:	89 83       	std	Y+1, r24	; 0x01
			   {
				   //debouncing delay
				   _delay_ms(100);
			 M_DIO_void_getPinValue(KEYPAD_COLS_PORTS, loc_col_indx, &read);
    3cca:	9e 01       	movw	r18, r28
    3ccc:	2e 5d       	subi	r18, 0xDE	; 222
    3cce:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd0:	84 e0       	ldi	r24, 0x04	; 4
    3cd2:	6f 85       	ldd	r22, Y+15	; 0x0f
    3cd4:	a9 01       	movw	r20, r18
    3cd6:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <M_DIO_void_getPinValue>
			 if(read==ACTIVE_LOW_PRESSED)
    3cda:	8a a1       	ldd	r24, Y+34	; 0x22
    3cdc:	88 23       	and	r24, r24
    3cde:	49 f5       	brne	.+82     	; 0x3d32 <H_KEYPAD_void_getPressedKey+0x1d2>
    3ce0:	08 c0       	rjmp	.+16     	; 0x3cf2 <H_KEYPAD_void_getPressedKey+0x192>
			 {


				 while(read==ACTIVE_LOW_PRESSED)
					 {
						 M_DIO_void_getPinValue(KEYPAD_COLS_PORTS, loc_col_indx, &read);
    3ce2:	9e 01       	movw	r18, r28
    3ce4:	2e 5d       	subi	r18, 0xDE	; 222
    3ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce8:	84 e0       	ldi	r24, 0x04	; 4
    3cea:	6f 85       	ldd	r22, Y+15	; 0x0f
    3cec:	a9 01       	movw	r20, r18
    3cee:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <M_DIO_void_getPinValue>
			 M_DIO_void_getPinValue(KEYPAD_COLS_PORTS, loc_col_indx, &read);
			 if(read==ACTIVE_LOW_PRESSED)
			 {


				 while(read==ACTIVE_LOW_PRESSED)
    3cf2:	8a a1       	ldd	r24, Y+34	; 0x22
    3cf4:	88 23       	and	r24, r24
    3cf6:	a9 f3       	breq	.-22     	; 0x3ce2 <H_KEYPAD_void_getPressedKey+0x182>
					 {
						 M_DIO_void_getPinValue(KEYPAD_COLS_PORTS, loc_col_indx, &read);
					 }
					 read= loc_keypad_arr[loc_row_indx - KEYPAD_R0_PIN ][ loc_col_indx -  KEYPAD_C0_PIN ];
    3cf8:	88 89       	ldd	r24, Y+16	; 0x10
    3cfa:	88 2f       	mov	r24, r24
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	9c 01       	movw	r18, r24
    3d00:	24 50       	subi	r18, 0x04	; 4
    3d02:	30 40       	sbci	r19, 0x00	; 0
    3d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d06:	88 2f       	mov	r24, r24
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	ac 01       	movw	r20, r24
    3d0c:	42 50       	subi	r20, 0x02	; 2
    3d0e:	50 40       	sbci	r21, 0x00	; 0
    3d10:	22 0f       	add	r18, r18
    3d12:	33 1f       	adc	r19, r19
    3d14:	22 0f       	add	r18, r18
    3d16:	33 1f       	adc	r19, r19
    3d18:	ce 01       	movw	r24, r28
    3d1a:	01 96       	adiw	r24, 0x01	; 1
    3d1c:	82 0f       	add	r24, r18
    3d1e:	93 1f       	adc	r25, r19
    3d20:	84 0f       	add	r24, r20
    3d22:	95 1f       	adc	r25, r21
    3d24:	fc 01       	movw	r30, r24
    3d26:	71 96       	adiw	r30, 0x11	; 17
    3d28:	80 81       	ld	r24, Z
    3d2a:	8a a3       	std	Y+34, r24	; 0x22
					 	return read;
    3d2c:	fa a1       	ldd	r31, Y+34	; 0x22
    3d2e:	fb a3       	std	Y+35, r31	; 0x23
    3d30:	15 c0       	rjmp	.+42     	; 0x3d5c <H_KEYPAD_void_getPressedKey+0x1fc>
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	 for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
	{
		 M_DIO_void_setPinValue(KEYPAD_ROW_PORTS,loc_row_indx,LOW);
		   for (loc_col_indx=KEYPAD_C0_PIN;loc_col_indx<=KEYPAD_C3_PIN;loc_col_indx ++)
    3d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d34:	8f 5f       	subi	r24, 0xFF	; 255
    3d36:	8f 87       	std	Y+15, r24	; 0x0f
    3d38:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d3a:	86 30       	cpi	r24, 0x06	; 6
    3d3c:	08 f4       	brcc	.+2      	; 0x3d40 <H_KEYPAD_void_getPressedKey+0x1e0>
    3d3e:	47 cf       	rjmp	.-370    	; 0x3bce <H_KEYPAD_void_getPressedKey+0x6e>

			 }

		 }
	  }//deactivate rows
		   M_DIO_void_setPinValue(KEYPAD_ROW_PORTS,loc_row_indx,HIGH);
    3d40:	82 e0       	ldi	r24, 0x02	; 2
    3d42:	68 89       	ldd	r22, Y+16	; 0x10
    3d44:	41 e0       	ldi	r20, 0x01	; 1
    3d46:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
	u8 loc_state= NUM_PRESSED_KEY ;
	u8 loc_row_indx;
	u8 loc_col_indx;
	u8 loc_keypad_arr [4][4]=KEYPAD_ARR_MAP;
	u8 read;
	 for(loc_row_indx=KEYPAD_R0_PIN;loc_row_indx<=KEYPAD_R3_PIN;loc_row_indx++)
    3d4a:	88 89       	ldd	r24, Y+16	; 0x10
    3d4c:	8f 5f       	subi	r24, 0xFF	; 255
    3d4e:	88 8b       	std	Y+16, r24	; 0x10
    3d50:	88 89       	ldd	r24, Y+16	; 0x10
    3d52:	88 30       	cpi	r24, 0x08	; 8
    3d54:	08 f4       	brcc	.+2      	; 0x3d58 <H_KEYPAD_void_getPressedKey+0x1f8>
    3d56:	33 cf       	rjmp	.-410    	; 0x3bbe <H_KEYPAD_void_getPressedKey+0x5e>
	  }//deactivate rows
		   M_DIO_void_setPinValue(KEYPAD_ROW_PORTS,loc_row_indx,HIGH);


	}
	 return  loc_state;
    3d58:	89 89       	ldd	r24, Y+17	; 0x11
    3d5a:	8b a3       	std	Y+35, r24	; 0x23
    3d5c:	8b a1       	ldd	r24, Y+35	; 0x23
}
    3d5e:	a8 96       	adiw	r28, 0x28	; 40
    3d60:	0f b6       	in	r0, 0x3f	; 63
    3d62:	f8 94       	cli
    3d64:	de bf       	out	0x3e, r29	; 62
    3d66:	0f be       	out	0x3f, r0	; 63
    3d68:	cd bf       	out	0x3d, r28	; 61
    3d6a:	cf 91       	pop	r28
    3d6c:	df 91       	pop	r29
    3d6e:	08 95       	ret

00003d70 <A_System_init>:


u8 Password[]={'1','2','3','4','5'};
static u8 Entry_Pass[5];
void A_System_init()
{
    3d70:	df 93       	push	r29
    3d72:	cf 93       	push	r28
    3d74:	cd b7       	in	r28, 0x3d	; 61
    3d76:	de b7       	in	r29, 0x3e	; 62
	H_KEYPAD_void_init();
    3d78:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <H_KEYPAD_void_init>
	H_LCD_void_Init();
    3d7c:	0e 94 2c 18 	call	0x3058	; 0x3058 <H_LCD_void_Init>
	H_Led_void_ledInit(GRN_LED);
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <H_Led_void_ledInit>
	H_Led_void_ledInit(RED_LED);
    3d86:	80 e0       	ldi	r24, 0x00	; 0
    3d88:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <H_Led_void_ledInit>
	H_Led_void_ledInit(BLU_LED);
    3d8c:	82 e0       	ldi	r24, 0x02	; 2
    3d8e:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <H_Led_void_ledInit>
    M_DIO_void_setPinDir(PORTC_ID,PIN4,OUT);//to set relay
    3d92:	83 e0       	ldi	r24, 0x03	; 3
    3d94:	64 e0       	ldi	r22, 0x04	; 4
    3d96:	41 e0       	ldi	r20, 0x01	; 1
    3d98:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
}
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <ICU_Init>:
void ICU_Init()
{
    3da2:	df 93       	push	r29
    3da4:	cf 93       	push	r28
    3da6:	cd b7       	in	r28, 0x3d	; 61
    3da8:	de b7       	in	r29, 0x3e	; 62
	    //SET DIR FOR PWM PIN TO BE OUT
		M_DIO_void_setPinDir(PORTB_ID,PIN3, OUT);
    3daa:	82 e0       	ldi	r24, 0x02	; 2
    3dac:	63 e0       	ldi	r22, 0x03	; 3
    3dae:	41 e0       	ldi	r20, 0x01	; 1
    3db0:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
		//SET DIR FOR ICU PIN TO BE IN
		M_DIO_void_setPinDir(PORTD_ID,PIN6, IN);
    3db4:	84 e0       	ldi	r24, 0x04	; 4
    3db6:	66 e0       	ldi	r22, 0x06	; 6
    3db8:	40 e0       	ldi	r20, 0x00	; 0
    3dba:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
		//SET DIR FOR trigger PIN TO BE out
		M_DIO_void_setPinDir(PORTC_ID,PIN5, OUT);
    3dbe:	83 e0       	ldi	r24, 0x03	; 3
    3dc0:	65 e0       	ldi	r22, 0x05	; 5
    3dc2:	41 e0       	ldi	r20, 0x01	; 1
    3dc4:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
		//ICU INIT
		M_TIMER1_ICU_void_Init();
    3dc8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <M_TIMER1_ICU_void_Init>

		// ENABLE INTERRUPT
		M_TIMER1_ICU_void_INTEnable();
    3dcc:	0e 94 5d 07 	call	0xeba	; 0xeba <M_TIMER1_ICU_void_INTEnable>
		M_TIMER1_ICU_void_setCallback(ICU_HW);
    3dd0:	83 ef       	ldi	r24, 0xF3	; 243
    3dd2:	9e e1       	ldi	r25, 0x1E	; 30
    3dd4:	0e 94 af 07 	call	0xf5e	; 0xf5e <M_TIMER1_ICU_void_setCallback>
		// GIE ENABLE
		M_GIE_void_enable();
    3dd8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <M_GIE_void_enable>
	    //TIMER 1 INITIALIZAION
		M_TIMER1_void_Init();
    3ddc:	0e 94 17 07 	call	0xe2e	; 0xe2e <M_TIMER1_void_Init>
}
    3de0:	cf 91       	pop	r28
    3de2:	df 91       	pop	r29
    3de4:	08 95       	ret

00003de6 <ICU_HW>:
void ICU_HW(void)
{
    3de6:	df 93       	push	r29
    3de8:	cf 93       	push	r28
    3dea:	cd b7       	in	r28, 0x3d	; 61
    3dec:	de b7       	in	r29, 0x3e	; 62
	if (stateCounter==0)
    3dee:	80 91 24 02 	lds	r24, 0x0224
    3df2:	88 23       	and	r24, r24
    3df4:	51 f4       	brne	.+20     	; 0x3e0a <ICU_HW+0x24>
	{
		//take reading 1
		Reading1=M_TIMER1_ICU_u16_takeReading();
    3df6:	0e 94 a4 07 	call	0xf48	; 0xf48 <M_TIMER1_ICU_u16_takeReading>
    3dfa:	90 93 21 02 	sts	0x0221, r25
    3dfe:	80 93 20 02 	sts	0x0220, r24
		//change trigger to fallin edge
		M_TIMER1_ICU_void_setTrigg(TIMER1_ICU_FALL_TRIGG);
    3e02:	80 e0       	ldi	r24, 0x00	; 0
    3e04:	0e 94 79 07 	call	0xef2	; 0xef2 <M_TIMER1_ICU_void_setTrigg>
    3e08:	0d c0       	rjmp	.+26     	; 0x3e24 <ICU_HW+0x3e>
	}
	else if (stateCounter==1)
    3e0a:	80 91 24 02 	lds	r24, 0x0224
    3e0e:	81 30       	cpi	r24, 0x01	; 1
    3e10:	49 f4       	brne	.+18     	; 0x3e24 <ICU_HW+0x3e>
	{
		//take reading 2
		Reading2=M_TIMER1_ICU_u16_takeReading();
    3e12:	0e 94 a4 07 	call	0xf48	; 0xf48 <M_TIMER1_ICU_u16_takeReading>
    3e16:	90 93 23 02 	sts	0x0223, r25
    3e1a:	80 93 22 02 	sts	0x0222, r24

		M_TIMER1_ICU_void_setTrigg(TIMER1_ICU_RISING_TRIGG);
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	0e 94 79 07 	call	0xef2	; 0xef2 <M_TIMER1_ICU_void_setTrigg>
	}

	stateCounter++;
    3e24:	80 91 24 02 	lds	r24, 0x0224
    3e28:	8f 5f       	subi	r24, 0xFF	; 255
    3e2a:	80 93 24 02 	sts	0x0224, r24
}
    3e2e:	cf 91       	pop	r28
    3e30:	df 91       	pop	r29
    3e32:	08 95       	ret

00003e34 <get_ultras_Reading>:
u8  get_ultras_Reading()
{
    3e34:	df 93       	push	r29
    3e36:	cf 93       	push	r28
    3e38:	cd b7       	in	r28, 0x3d	; 61
    3e3a:	de b7       	in	r29, 0x3e	; 62
    3e3c:	2e 97       	sbiw	r28, 0x0e	; 14
    3e3e:	0f b6       	in	r0, 0x3f	; 63
    3e40:	f8 94       	cli
    3e42:	de bf       	out	0x3e, r29	; 62
    3e44:	0f be       	out	0x3f, r0	; 63
    3e46:	cd bf       	out	0x3d, r28	; 61
	 //send trigger
		 M_DIO_void_setPinValue(PORTC_ID,PIN5, HIGH);
    3e48:	83 e0       	ldi	r24, 0x03	; 3
    3e4a:	65 e0       	ldi	r22, 0x05	; 5
    3e4c:	41 e0       	ldi	r20, 0x01	; 1
    3e4e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	a0 e2       	ldi	r26, 0x20	; 32
    3e58:	b1 e4       	ldi	r27, 0x41	; 65
    3e5a:	8b 87       	std	Y+11, r24	; 0x0b
    3e5c:	9c 87       	std	Y+12, r25	; 0x0c
    3e5e:	ad 87       	std	Y+13, r26	; 0x0d
    3e60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	4a e7       	ldi	r20, 0x7A	; 122
    3e70:	55 e4       	ldi	r21, 0x45	; 69
    3e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e76:	dc 01       	movw	r26, r24
    3e78:	cb 01       	movw	r24, r22
    3e7a:	8f 83       	std	Y+7, r24	; 0x07
    3e7c:	98 87       	std	Y+8, r25	; 0x08
    3e7e:	a9 87       	std	Y+9, r26	; 0x09
    3e80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e82:	6f 81       	ldd	r22, Y+7	; 0x07
    3e84:	78 85       	ldd	r23, Y+8	; 0x08
    3e86:	89 85       	ldd	r24, Y+9	; 0x09
    3e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	40 e8       	ldi	r20, 0x80	; 128
    3e90:	5f e3       	ldi	r21, 0x3F	; 63
    3e92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e96:	88 23       	and	r24, r24
    3e98:	2c f4       	brge	.+10     	; 0x3ea4 <get_ultras_Reading+0x70>
		__ticks = 1;
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	9e 83       	std	Y+6, r25	; 0x06
    3ea0:	8d 83       	std	Y+5, r24	; 0x05
    3ea2:	3f c0       	rjmp	.+126    	; 0x3f22 <get_ultras_Reading+0xee>
	else if (__tmp > 65535)
    3ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ea6:	78 85       	ldd	r23, Y+8	; 0x08
    3ea8:	89 85       	ldd	r24, Y+9	; 0x09
    3eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	3f ef       	ldi	r19, 0xFF	; 255
    3eb0:	4f e7       	ldi	r20, 0x7F	; 127
    3eb2:	57 e4       	ldi	r21, 0x47	; 71
    3eb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eb8:	18 16       	cp	r1, r24
    3eba:	4c f5       	brge	.+82     	; 0x3f0e <get_ultras_Reading+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ec4:	20 e0       	ldi	r18, 0x00	; 0
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	40 e2       	ldi	r20, 0x20	; 32
    3eca:	51 e4       	ldi	r21, 0x41	; 65
    3ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed0:	dc 01       	movw	r26, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	bc 01       	movw	r22, r24
    3ed6:	cd 01       	movw	r24, r26
    3ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3edc:	dc 01       	movw	r26, r24
    3ede:	cb 01       	movw	r24, r22
    3ee0:	9e 83       	std	Y+6, r25	; 0x06
    3ee2:	8d 83       	std	Y+5, r24	; 0x05
    3ee4:	0f c0       	rjmp	.+30     	; 0x3f04 <get_ultras_Reading+0xd0>
    3ee6:	80 e9       	ldi	r24, 0x90	; 144
    3ee8:	91 e0       	ldi	r25, 0x01	; 1
    3eea:	9c 83       	std	Y+4, r25	; 0x04
    3eec:	8b 83       	std	Y+3, r24	; 0x03
    3eee:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	f1 f7       	brne	.-4      	; 0x3ef2 <get_ultras_Reading+0xbe>
    3ef6:	9c 83       	std	Y+4, r25	; 0x04
    3ef8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3efa:	8d 81       	ldd	r24, Y+5	; 0x05
    3efc:	9e 81       	ldd	r25, Y+6	; 0x06
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	9e 83       	std	Y+6, r25	; 0x06
    3f02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f04:	8d 81       	ldd	r24, Y+5	; 0x05
    3f06:	9e 81       	ldd	r25, Y+6	; 0x06
    3f08:	00 97       	sbiw	r24, 0x00	; 0
    3f0a:	69 f7       	brne	.-38     	; 0x3ee6 <get_ultras_Reading+0xb2>
    3f0c:	14 c0       	rjmp	.+40     	; 0x3f36 <get_ultras_Reading+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f10:	78 85       	ldd	r23, Y+8	; 0x08
    3f12:	89 85       	ldd	r24, Y+9	; 0x09
    3f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	9e 83       	std	Y+6, r25	; 0x06
    3f20:	8d 83       	std	Y+5, r24	; 0x05
    3f22:	8d 81       	ldd	r24, Y+5	; 0x05
    3f24:	9e 81       	ldd	r25, Y+6	; 0x06
    3f26:	9a 83       	std	Y+2, r25	; 0x02
    3f28:	89 83       	std	Y+1, r24	; 0x01
    3f2a:	89 81       	ldd	r24, Y+1	; 0x01
    3f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	f1 f7       	brne	.-4      	; 0x3f2e <get_ultras_Reading+0xfa>
    3f32:	9a 83       	std	Y+2, r25	; 0x02
    3f34:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(10);
		 M_DIO_void_setPinValue(PORTC_ID,PIN5, LOW);
    3f36:	83 e0       	ldi	r24, 0x03	; 3
    3f38:	65 e0       	ldi	r22, 0x05	; 5
    3f3a:	40 e0       	ldi	r20, 0x00	; 0
    3f3c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>

		 while (stateCounter<=1);//busy waitind untill all reading are ready
    3f40:	80 91 24 02 	lds	r24, 0x0224
    3f44:	82 30       	cpi	r24, 0x02	; 2
    3f46:	e0 f3       	brcs	.-8      	; 0x3f40 <get_ultras_Reading+0x10c>
		 stateCounter=0;
    3f48:	10 92 24 02 	sts	0x0224, r1
		 NumberOfTicks=Reading2-Reading1;
    3f4c:	20 91 22 02 	lds	r18, 0x0222
    3f50:	30 91 23 02 	lds	r19, 0x0223
    3f54:	80 91 20 02 	lds	r24, 0x0220
    3f58:	90 91 21 02 	lds	r25, 0x0221
    3f5c:	a9 01       	movw	r20, r18
    3f5e:	48 1b       	sub	r20, r24
    3f60:	59 0b       	sbc	r21, r25
    3f62:	ca 01       	movw	r24, r20
    3f64:	90 93 26 02 	sts	0x0226, r25
    3f68:	80 93 25 02 	sts	0x0225, r24
		 time =(NumberOfTicks*16)/1000000.0;
    3f6c:	80 91 25 02 	lds	r24, 0x0225
    3f70:	90 91 26 02 	lds	r25, 0x0226
    3f74:	82 95       	swap	r24
    3f76:	92 95       	swap	r25
    3f78:	90 7f       	andi	r25, 0xF0	; 240
    3f7a:	98 27       	eor	r25, r24
    3f7c:	80 7f       	andi	r24, 0xF0	; 240
    3f7e:	98 27       	eor	r25, r24
    3f80:	cc 01       	movw	r24, r24
    3f82:	a0 e0       	ldi	r26, 0x00	; 0
    3f84:	b0 e0       	ldi	r27, 0x00	; 0
    3f86:	bc 01       	movw	r22, r24
    3f88:	cd 01       	movw	r24, r26
    3f8a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3f8e:	dc 01       	movw	r26, r24
    3f90:	cb 01       	movw	r24, r22
    3f92:	bc 01       	movw	r22, r24
    3f94:	cd 01       	movw	r24, r26
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	34 e2       	ldi	r19, 0x24	; 36
    3f9a:	44 e7       	ldi	r20, 0x74	; 116
    3f9c:	59 e4       	ldi	r21, 0x49	; 73
    3f9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	cb 01       	movw	r24, r22
    3fa6:	80 93 27 02 	sts	0x0227, r24
    3faa:	90 93 28 02 	sts	0x0228, r25
    3fae:	a0 93 29 02 	sts	0x0229, r26
    3fb2:	b0 93 2a 02 	sts	0x022A, r27
		 Distance =ceil((time/2)*34300);
    3fb6:	80 91 27 02 	lds	r24, 0x0227
    3fba:	90 91 28 02 	lds	r25, 0x0228
    3fbe:	a0 91 29 02 	lds	r26, 0x0229
    3fc2:	b0 91 2a 02 	lds	r27, 0x022A
    3fc6:	bc 01       	movw	r22, r24
    3fc8:	cd 01       	movw	r24, r26
    3fca:	20 e0       	ldi	r18, 0x00	; 0
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	40 e0       	ldi	r20, 0x00	; 0
    3fd0:	50 e4       	ldi	r21, 0x40	; 64
    3fd2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3fd6:	dc 01       	movw	r26, r24
    3fd8:	cb 01       	movw	r24, r22
    3fda:	bc 01       	movw	r22, r24
    3fdc:	cd 01       	movw	r24, r26
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	3c ef       	ldi	r19, 0xFC	; 252
    3fe2:	45 e0       	ldi	r20, 0x05	; 5
    3fe4:	57 e4       	ldi	r21, 0x47	; 71
    3fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	bc 01       	movw	r22, r24
    3ff0:	cd 01       	movw	r24, r26
    3ff2:	0e 94 22 26 	call	0x4c44	; 0x4c44 <ceil>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	bc 01       	movw	r22, r24
    3ffc:	cd 01       	movw	r24, r26
    3ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4002:	dc 01       	movw	r26, r24
    4004:	cb 01       	movw	r24, r22
    4006:	80 93 2b 02 	sts	0x022B, r24
    400a:	90 93 2c 02 	sts	0x022C, r25
    400e:	a0 93 2d 02 	sts	0x022D, r26
    4012:	b0 93 2e 02 	sts	0x022E, r27

return  Distance;
    4016:	80 91 2b 02 	lds	r24, 0x022B
    401a:	90 91 2c 02 	lds	r25, 0x022C
    401e:	a0 91 2d 02 	lds	r26, 0x022D
    4022:	b0 91 2e 02 	lds	r27, 0x022E
}
    4026:	2e 96       	adiw	r28, 0x0e	; 14
    4028:	0f b6       	in	r0, 0x3f	; 63
    402a:	f8 94       	cli
    402c:	de bf       	out	0x3e, r29	; 62
    402e:	0f be       	out	0x3f, r0	; 63
    4030:	cd bf       	out	0x3d, r28	; 61
    4032:	cf 91       	pop	r28
    4034:	df 91       	pop	r29
    4036:	08 95       	ret

00004038 <A_SYS_Welcom_Print>:


void A_SYS_Welcom_Print()
{
    4038:	df 93       	push	r29
    403a:	cf 93       	push	r28
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
    4040:	6c 97       	sbiw	r28, 0x1c	; 28
    4042:	0f b6       	in	r0, 0x3f	; 63
    4044:	f8 94       	cli
    4046:	de bf       	out	0x3e, r29	; 62
    4048:	0f be       	out	0x3f, r0	; 63
    404a:	cd bf       	out	0x3d, r28	; 61
	    H_LCD_void_sendString("HELLO MR ");
    404c:	80 e6       	ldi	r24, 0x60	; 96
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	0e 94 0b 1a 	call	0x3416	; 0x3416 <H_LCD_void_sendString>
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	aa ef       	ldi	r26, 0xFA	; 250
    405a:	b3 e4       	ldi	r27, 0x43	; 67
    405c:	89 8f       	std	Y+25, r24	; 0x19
    405e:	9a 8f       	std	Y+26, r25	; 0x1a
    4060:	ab 8f       	std	Y+27, r26	; 0x1b
    4062:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4064:	69 8d       	ldd	r22, Y+25	; 0x19
    4066:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4068:	8b 8d       	ldd	r24, Y+27	; 0x1b
    406a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	4a e7       	ldi	r20, 0x7A	; 122
    4072:	55 e4       	ldi	r21, 0x45	; 69
    4074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4078:	dc 01       	movw	r26, r24
    407a:	cb 01       	movw	r24, r22
    407c:	8d 8b       	std	Y+21, r24	; 0x15
    407e:	9e 8b       	std	Y+22, r25	; 0x16
    4080:	af 8b       	std	Y+23, r26	; 0x17
    4082:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4084:	6d 89       	ldd	r22, Y+21	; 0x15
    4086:	7e 89       	ldd	r23, Y+22	; 0x16
    4088:	8f 89       	ldd	r24, Y+23	; 0x17
    408a:	98 8d       	ldd	r25, Y+24	; 0x18
    408c:	20 e0       	ldi	r18, 0x00	; 0
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	40 e8       	ldi	r20, 0x80	; 128
    4092:	5f e3       	ldi	r21, 0x3F	; 63
    4094:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4098:	88 23       	and	r24, r24
    409a:	2c f4       	brge	.+10     	; 0x40a6 <A_SYS_Welcom_Print+0x6e>
		__ticks = 1;
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	9c 8b       	std	Y+20, r25	; 0x14
    40a2:	8b 8b       	std	Y+19, r24	; 0x13
    40a4:	3f c0       	rjmp	.+126    	; 0x4124 <A_SYS_Welcom_Print+0xec>
	else if (__tmp > 65535)
    40a6:	6d 89       	ldd	r22, Y+21	; 0x15
    40a8:	7e 89       	ldd	r23, Y+22	; 0x16
    40aa:	8f 89       	ldd	r24, Y+23	; 0x17
    40ac:	98 8d       	ldd	r25, Y+24	; 0x18
    40ae:	20 e0       	ldi	r18, 0x00	; 0
    40b0:	3f ef       	ldi	r19, 0xFF	; 255
    40b2:	4f e7       	ldi	r20, 0x7F	; 127
    40b4:	57 e4       	ldi	r21, 0x47	; 71
    40b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40ba:	18 16       	cp	r1, r24
    40bc:	4c f5       	brge	.+82     	; 0x4110 <A_SYS_Welcom_Print+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40be:	69 8d       	ldd	r22, Y+25	; 0x19
    40c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	40 e2       	ldi	r20, 0x20	; 32
    40cc:	51 e4       	ldi	r21, 0x41	; 65
    40ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	bc 01       	movw	r22, r24
    40d8:	cd 01       	movw	r24, r26
    40da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40de:	dc 01       	movw	r26, r24
    40e0:	cb 01       	movw	r24, r22
    40e2:	9c 8b       	std	Y+20, r25	; 0x14
    40e4:	8b 8b       	std	Y+19, r24	; 0x13
    40e6:	0f c0       	rjmp	.+30     	; 0x4106 <A_SYS_Welcom_Print+0xce>
    40e8:	80 e9       	ldi	r24, 0x90	; 144
    40ea:	91 e0       	ldi	r25, 0x01	; 1
    40ec:	9a 8b       	std	Y+18, r25	; 0x12
    40ee:	89 8b       	std	Y+17, r24	; 0x11
    40f0:	89 89       	ldd	r24, Y+17	; 0x11
    40f2:	9a 89       	ldd	r25, Y+18	; 0x12
    40f4:	01 97       	sbiw	r24, 0x01	; 1
    40f6:	f1 f7       	brne	.-4      	; 0x40f4 <A_SYS_Welcom_Print+0xbc>
    40f8:	9a 8b       	std	Y+18, r25	; 0x12
    40fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40fc:	8b 89       	ldd	r24, Y+19	; 0x13
    40fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4100:	01 97       	sbiw	r24, 0x01	; 1
    4102:	9c 8b       	std	Y+20, r25	; 0x14
    4104:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4106:	8b 89       	ldd	r24, Y+19	; 0x13
    4108:	9c 89       	ldd	r25, Y+20	; 0x14
    410a:	00 97       	sbiw	r24, 0x00	; 0
    410c:	69 f7       	brne	.-38     	; 0x40e8 <A_SYS_Welcom_Print+0xb0>
    410e:	14 c0       	rjmp	.+40     	; 0x4138 <A_SYS_Welcom_Print+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4110:	6d 89       	ldd	r22, Y+21	; 0x15
    4112:	7e 89       	ldd	r23, Y+22	; 0x16
    4114:	8f 89       	ldd	r24, Y+23	; 0x17
    4116:	98 8d       	ldd	r25, Y+24	; 0x18
    4118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	9c 8b       	std	Y+20, r25	; 0x14
    4122:	8b 8b       	std	Y+19, r24	; 0x13
    4124:	8b 89       	ldd	r24, Y+19	; 0x13
    4126:	9c 89       	ldd	r25, Y+20	; 0x14
    4128:	98 8b       	std	Y+16, r25	; 0x10
    412a:	8f 87       	std	Y+15, r24	; 0x0f
    412c:	8f 85       	ldd	r24, Y+15	; 0x0f
    412e:	98 89       	ldd	r25, Y+16	; 0x10
    4130:	01 97       	sbiw	r24, 0x01	; 1
    4132:	f1 f7       	brne	.-4      	; 0x4130 <A_SYS_Welcom_Print+0xf8>
    4134:	98 8b       	std	Y+16, r25	; 0x10
    4136:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		H_LCD_void_clear();
    4138:	0e 94 27 1a 	call	0x344e	; 0x344e <H_LCD_void_clear>
		H_LCD_void_sendString("Enter password");
    413c:	8a e6       	ldi	r24, 0x6A	; 106
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	0e 94 0b 1a 	call	0x3416	; 0x3416 <H_LCD_void_sendString>
    4144:	80 e0       	ldi	r24, 0x00	; 0
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	aa ef       	ldi	r26, 0xFA	; 250
    414a:	b3 e4       	ldi	r27, 0x43	; 67
    414c:	8b 87       	std	Y+11, r24	; 0x0b
    414e:	9c 87       	std	Y+12, r25	; 0x0c
    4150:	ad 87       	std	Y+13, r26	; 0x0d
    4152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4154:	6b 85       	ldd	r22, Y+11	; 0x0b
    4156:	7c 85       	ldd	r23, Y+12	; 0x0c
    4158:	8d 85       	ldd	r24, Y+13	; 0x0d
    415a:	9e 85       	ldd	r25, Y+14	; 0x0e
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	4a e7       	ldi	r20, 0x7A	; 122
    4162:	55 e4       	ldi	r21, 0x45	; 69
    4164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	8f 83       	std	Y+7, r24	; 0x07
    416e:	98 87       	std	Y+8, r25	; 0x08
    4170:	a9 87       	std	Y+9, r26	; 0x09
    4172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4174:	6f 81       	ldd	r22, Y+7	; 0x07
    4176:	78 85       	ldd	r23, Y+8	; 0x08
    4178:	89 85       	ldd	r24, Y+9	; 0x09
    417a:	9a 85       	ldd	r25, Y+10	; 0x0a
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	40 e8       	ldi	r20, 0x80	; 128
    4182:	5f e3       	ldi	r21, 0x3F	; 63
    4184:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4188:	88 23       	and	r24, r24
    418a:	2c f4       	brge	.+10     	; 0x4196 <A_SYS_Welcom_Print+0x15e>
		__ticks = 1;
    418c:	81 e0       	ldi	r24, 0x01	; 1
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	9e 83       	std	Y+6, r25	; 0x06
    4192:	8d 83       	std	Y+5, r24	; 0x05
    4194:	3f c0       	rjmp	.+126    	; 0x4214 <A_SYS_Welcom_Print+0x1dc>
	else if (__tmp > 65535)
    4196:	6f 81       	ldd	r22, Y+7	; 0x07
    4198:	78 85       	ldd	r23, Y+8	; 0x08
    419a:	89 85       	ldd	r24, Y+9	; 0x09
    419c:	9a 85       	ldd	r25, Y+10	; 0x0a
    419e:	20 e0       	ldi	r18, 0x00	; 0
    41a0:	3f ef       	ldi	r19, 0xFF	; 255
    41a2:	4f e7       	ldi	r20, 0x7F	; 127
    41a4:	57 e4       	ldi	r21, 0x47	; 71
    41a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41aa:	18 16       	cp	r1, r24
    41ac:	4c f5       	brge	.+82     	; 0x4200 <A_SYS_Welcom_Print+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    41b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41b6:	20 e0       	ldi	r18, 0x00	; 0
    41b8:	30 e0       	ldi	r19, 0x00	; 0
    41ba:	40 e2       	ldi	r20, 0x20	; 32
    41bc:	51 e4       	ldi	r21, 0x41	; 65
    41be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	bc 01       	movw	r22, r24
    41c8:	cd 01       	movw	r24, r26
    41ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ce:	dc 01       	movw	r26, r24
    41d0:	cb 01       	movw	r24, r22
    41d2:	9e 83       	std	Y+6, r25	; 0x06
    41d4:	8d 83       	std	Y+5, r24	; 0x05
    41d6:	0f c0       	rjmp	.+30     	; 0x41f6 <A_SYS_Welcom_Print+0x1be>
    41d8:	80 e9       	ldi	r24, 0x90	; 144
    41da:	91 e0       	ldi	r25, 0x01	; 1
    41dc:	9c 83       	std	Y+4, r25	; 0x04
    41de:	8b 83       	std	Y+3, r24	; 0x03
    41e0:	8b 81       	ldd	r24, Y+3	; 0x03
    41e2:	9c 81       	ldd	r25, Y+4	; 0x04
    41e4:	01 97       	sbiw	r24, 0x01	; 1
    41e6:	f1 f7       	brne	.-4      	; 0x41e4 <A_SYS_Welcom_Print+0x1ac>
    41e8:	9c 83       	std	Y+4, r25	; 0x04
    41ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ec:	8d 81       	ldd	r24, Y+5	; 0x05
    41ee:	9e 81       	ldd	r25, Y+6	; 0x06
    41f0:	01 97       	sbiw	r24, 0x01	; 1
    41f2:	9e 83       	std	Y+6, r25	; 0x06
    41f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f6:	8d 81       	ldd	r24, Y+5	; 0x05
    41f8:	9e 81       	ldd	r25, Y+6	; 0x06
    41fa:	00 97       	sbiw	r24, 0x00	; 0
    41fc:	69 f7       	brne	.-38     	; 0x41d8 <A_SYS_Welcom_Print+0x1a0>
    41fe:	14 c0       	rjmp	.+40     	; 0x4228 <A_SYS_Welcom_Print+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4200:	6f 81       	ldd	r22, Y+7	; 0x07
    4202:	78 85       	ldd	r23, Y+8	; 0x08
    4204:	89 85       	ldd	r24, Y+9	; 0x09
    4206:	9a 85       	ldd	r25, Y+10	; 0x0a
    4208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	9e 83       	std	Y+6, r25	; 0x06
    4212:	8d 83       	std	Y+5, r24	; 0x05
    4214:	8d 81       	ldd	r24, Y+5	; 0x05
    4216:	9e 81       	ldd	r25, Y+6	; 0x06
    4218:	9a 83       	std	Y+2, r25	; 0x02
    421a:	89 83       	std	Y+1, r24	; 0x01
    421c:	89 81       	ldd	r24, Y+1	; 0x01
    421e:	9a 81       	ldd	r25, Y+2	; 0x02
    4220:	01 97       	sbiw	r24, 0x01	; 1
    4222:	f1 f7       	brne	.-4      	; 0x4220 <A_SYS_Welcom_Print+0x1e8>
    4224:	9a 83       	std	Y+2, r25	; 0x02
    4226:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		H_LCD_void_gotXY(1,0);
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	60 e0       	ldi	r22, 0x00	; 0
    422c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <H_LCD_void_gotXY>
}
    4230:	6c 96       	adiw	r28, 0x1c	; 28
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	f8 94       	cli
    4236:	de bf       	out	0x3e, r29	; 62
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	cd bf       	out	0x3d, r28	; 61
    423c:	cf 91       	pop	r28
    423e:	df 91       	pop	r29
    4240:	08 95       	ret

00004242 <A_SYS_get_entry_pass>:
void  A_SYS_get_entry_pass()
{
    4242:	df 93       	push	r29
    4244:	cf 93       	push	r28
    4246:	00 d0       	rcall	.+0      	; 0x4248 <A_SYS_get_entry_pass+0x6>
    4248:	cd b7       	in	r28, 0x3d	; 61
    424a:	de b7       	in	r29, 0x3e	; 62

	u8 i = 0;
    424c:	1a 82       	std	Y+2, r1	; 0x02
	u8 KP_Pressed =NUM_PRESSED_KEY ;
    424e:	8f ef       	ldi	r24, 0xFF	; 255
    4250:	89 83       	std	Y+1, r24	; 0x01
    4252:	14 c0       	rjmp	.+40     	; 0x427c <A_SYS_get_entry_pass+0x3a>

	while(i<5)
		{
			KP_Pressed=H_KEYPAD_void_getPressedKey();
    4254:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <H_KEYPAD_void_getPressedKey>
    4258:	89 83       	std	Y+1, r24	; 0x01


			if(KP_Pressed !=NUM_PRESSED_KEY)// to ensure that user already pressed any key
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	8f 3f       	cpi	r24, 0xFF	; 255
    425e:	71 f0       	breq	.+28     	; 0x427c <A_SYS_get_entry_pass+0x3a>
			{
				//get password from user
				Entry_Pass[i]=KP_Pressed;
    4260:	8a 81       	ldd	r24, Y+2	; 0x02
    4262:	88 2f       	mov	r24, r24
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	fc 01       	movw	r30, r24
    4268:	e1 5d       	subi	r30, 0xD1	; 209
    426a:	fd 4f       	sbci	r31, 0xFD	; 253
    426c:	89 81       	ldd	r24, Y+1	; 0x01
    426e:	80 83       	st	Z, r24
				//send this pattern on lcd to hide my pass
				H_LCD_void_sendData('*');
    4270:	8a e2       	ldi	r24, 0x2A	; 42
    4272:	0e 94 e7 19 	call	0x33ce	; 0x33ce <H_LCD_void_sendData>
				i++;
    4276:	8a 81       	ldd	r24, Y+2	; 0x02
    4278:	8f 5f       	subi	r24, 0xFF	; 255
    427a:	8a 83       	std	Y+2, r24	; 0x02
{

	u8 i = 0;
	u8 KP_Pressed =NUM_PRESSED_KEY ;

	while(i<5)
    427c:	8a 81       	ldd	r24, Y+2	; 0x02
    427e:	85 30       	cpi	r24, 0x05	; 5
    4280:	48 f3       	brcs	.-46     	; 0x4254 <A_SYS_get_entry_pass+0x12>
				H_LCD_void_sendData('*');
				i++;
			}

		}
      H_LCD_void_clear();
    4282:	0e 94 27 1a 	call	0x344e	; 0x344e <H_LCD_void_clear>
}
    4286:	0f 90       	pop	r0
    4288:	0f 90       	pop	r0
    428a:	cf 91       	pop	r28
    428c:	df 91       	pop	r29
    428e:	08 95       	ret

00004290 <pass_check>:
u8  pass_check()
{
    4290:	df 93       	push	r29
    4292:	cf 93       	push	r28
    4294:	cd b7       	in	r28, 0x3d	; 61
    4296:	de b7       	in	r29, 0x3e	; 62
    4298:	61 97       	sbiw	r28, 0x11	; 17
    429a:	0f b6       	in	r0, 0x3f	; 63
    429c:	f8 94       	cli
    429e:	de bf       	out	0x3e, r29	; 62
    42a0:	0f be       	out	0x3f, r0	; 63
    42a2:	cd bf       	out	0x3d, r28	; 61
	u8 Try_Num=0;
    42a4:	19 8a       	std	Y+17, r1	; 0x11
	u8 check = True ;
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	88 8b       	std	Y+16, r24	; 0x10
	u8 i;
	do
	{
		 A_SYS_get_entry_pass();
    42aa:	0e 94 21 21 	call	0x4242	; 0x4242 <A_SYS_get_entry_pass>
		 check = True;
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	88 8b       	std	Y+16, r24	; 0x10
	  for(i=0;i<5;i++)
    42b2:	1f 86       	std	Y+15, r1	; 0x0f
    42b4:	9b c0       	rjmp	.+310    	; 0x43ec <pass_check+0x15c>
	  {
       //compare entry data with the password
		if(Entry_Pass[i]!=Password[i])
    42b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    42b8:	88 2f       	mov	r24, r24
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	fc 01       	movw	r30, r24
    42be:	e1 5d       	subi	r30, 0xD1	; 209
    42c0:	fd 4f       	sbci	r31, 0xFD	; 253
    42c2:	20 81       	ld	r18, Z
    42c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    42c6:	88 2f       	mov	r24, r24
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	fc 01       	movw	r30, r24
    42cc:	e2 52       	subi	r30, 0x22	; 34
    42ce:	fe 4f       	sbci	r31, 0xFE	; 254
    42d0:	80 81       	ld	r24, Z
    42d2:	28 17       	cp	r18, r24
    42d4:	09 f4       	brne	.+2      	; 0x42d8 <pass_check+0x48>
    42d6:	87 c0       	rjmp	.+270    	; 0x43e6 <pass_check+0x156>
		{

			H_LCD_void_sendString("Wrong");
    42d8:	89 e7       	ldi	r24, 0x79	; 121
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	0e 94 0b 1a 	call	0x3416	; 0x3416 <H_LCD_void_sendString>
			H_LCD_void_gotXY(1,0);
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	60 e0       	ldi	r22, 0x00	; 0
    42e4:	0e 94 ca 1a 	call	0x3594	; 0x3594 <H_LCD_void_gotXY>
			H_LCD_void_sendString("re entre pass");
    42e8:	8f e7       	ldi	r24, 0x7F	; 127
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	0e 94 0b 1a 	call	0x3416	; 0x3416 <H_LCD_void_sendString>
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	90 e0       	ldi	r25, 0x00	; 0
    42f4:	a6 e9       	ldi	r26, 0x96	; 150
    42f6:	b3 e4       	ldi	r27, 0x43	; 67
    42f8:	8b 87       	std	Y+11, r24	; 0x0b
    42fa:	9c 87       	std	Y+12, r25	; 0x0c
    42fc:	ad 87       	std	Y+13, r26	; 0x0d
    42fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4300:	6b 85       	ldd	r22, Y+11	; 0x0b
    4302:	7c 85       	ldd	r23, Y+12	; 0x0c
    4304:	8d 85       	ldd	r24, Y+13	; 0x0d
    4306:	9e 85       	ldd	r25, Y+14	; 0x0e
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	4a e7       	ldi	r20, 0x7A	; 122
    430e:	55 e4       	ldi	r21, 0x45	; 69
    4310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	8f 83       	std	Y+7, r24	; 0x07
    431a:	98 87       	std	Y+8, r25	; 0x08
    431c:	a9 87       	std	Y+9, r26	; 0x09
    431e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4320:	6f 81       	ldd	r22, Y+7	; 0x07
    4322:	78 85       	ldd	r23, Y+8	; 0x08
    4324:	89 85       	ldd	r24, Y+9	; 0x09
    4326:	9a 85       	ldd	r25, Y+10	; 0x0a
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	40 e8       	ldi	r20, 0x80	; 128
    432e:	5f e3       	ldi	r21, 0x3F	; 63
    4330:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4334:	88 23       	and	r24, r24
    4336:	2c f4       	brge	.+10     	; 0x4342 <pass_check+0xb2>
		__ticks = 1;
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	9e 83       	std	Y+6, r25	; 0x06
    433e:	8d 83       	std	Y+5, r24	; 0x05
    4340:	3f c0       	rjmp	.+126    	; 0x43c0 <pass_check+0x130>
	else if (__tmp > 65535)
    4342:	6f 81       	ldd	r22, Y+7	; 0x07
    4344:	78 85       	ldd	r23, Y+8	; 0x08
    4346:	89 85       	ldd	r24, Y+9	; 0x09
    4348:	9a 85       	ldd	r25, Y+10	; 0x0a
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	3f ef       	ldi	r19, 0xFF	; 255
    434e:	4f e7       	ldi	r20, 0x7F	; 127
    4350:	57 e4       	ldi	r21, 0x47	; 71
    4352:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4356:	18 16       	cp	r1, r24
    4358:	4c f5       	brge	.+82     	; 0x43ac <pass_check+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    435a:	6b 85       	ldd	r22, Y+11	; 0x0b
    435c:	7c 85       	ldd	r23, Y+12	; 0x0c
    435e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4360:	9e 85       	ldd	r25, Y+14	; 0x0e
    4362:	20 e0       	ldi	r18, 0x00	; 0
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	40 e2       	ldi	r20, 0x20	; 32
    4368:	51 e4       	ldi	r21, 0x41	; 65
    436a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    436e:	dc 01       	movw	r26, r24
    4370:	cb 01       	movw	r24, r22
    4372:	bc 01       	movw	r22, r24
    4374:	cd 01       	movw	r24, r26
    4376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437a:	dc 01       	movw	r26, r24
    437c:	cb 01       	movw	r24, r22
    437e:	9e 83       	std	Y+6, r25	; 0x06
    4380:	8d 83       	std	Y+5, r24	; 0x05
    4382:	0f c0       	rjmp	.+30     	; 0x43a2 <pass_check+0x112>
    4384:	80 e9       	ldi	r24, 0x90	; 144
    4386:	91 e0       	ldi	r25, 0x01	; 1
    4388:	9c 83       	std	Y+4, r25	; 0x04
    438a:	8b 83       	std	Y+3, r24	; 0x03
    438c:	8b 81       	ldd	r24, Y+3	; 0x03
    438e:	9c 81       	ldd	r25, Y+4	; 0x04
    4390:	01 97       	sbiw	r24, 0x01	; 1
    4392:	f1 f7       	brne	.-4      	; 0x4390 <pass_check+0x100>
    4394:	9c 83       	std	Y+4, r25	; 0x04
    4396:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4398:	8d 81       	ldd	r24, Y+5	; 0x05
    439a:	9e 81       	ldd	r25, Y+6	; 0x06
    439c:	01 97       	sbiw	r24, 0x01	; 1
    439e:	9e 83       	std	Y+6, r25	; 0x06
    43a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a2:	8d 81       	ldd	r24, Y+5	; 0x05
    43a4:	9e 81       	ldd	r25, Y+6	; 0x06
    43a6:	00 97       	sbiw	r24, 0x00	; 0
    43a8:	69 f7       	brne	.-38     	; 0x4384 <pass_check+0xf4>
    43aa:	14 c0       	rjmp	.+40     	; 0x43d4 <pass_check+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ac:	6f 81       	ldd	r22, Y+7	; 0x07
    43ae:	78 85       	ldd	r23, Y+8	; 0x08
    43b0:	89 85       	ldd	r24, Y+9	; 0x09
    43b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b8:	dc 01       	movw	r26, r24
    43ba:	cb 01       	movw	r24, r22
    43bc:	9e 83       	std	Y+6, r25	; 0x06
    43be:	8d 83       	std	Y+5, r24	; 0x05
    43c0:	8d 81       	ldd	r24, Y+5	; 0x05
    43c2:	9e 81       	ldd	r25, Y+6	; 0x06
    43c4:	9a 83       	std	Y+2, r25	; 0x02
    43c6:	89 83       	std	Y+1, r24	; 0x01
    43c8:	89 81       	ldd	r24, Y+1	; 0x01
    43ca:	9a 81       	ldd	r25, Y+2	; 0x02
    43cc:	01 97       	sbiw	r24, 0x01	; 1
    43ce:	f1 f7       	brne	.-4      	; 0x43cc <pass_check+0x13c>
    43d0:	9a 83       	std	Y+2, r25	; 0x02
    43d2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(300);
			H_LCD_void_clear();
    43d4:	0e 94 27 1a 	call	0x344e	; 0x344e <H_LCD_void_clear>
			check=FALSE;
    43d8:	18 8a       	std	Y+16, r1	; 0x10
			// A_SYS_get_entry_pass();
			Try_Num++;
    43da:	89 89       	ldd	r24, Y+17	; 0x11
    43dc:	8f 5f       	subi	r24, 0xFF	; 255
    43de:	89 8b       	std	Y+17, r24	; 0x11
			H_LCD_void_clear();
    43e0:	0e 94 27 1a 	call	0x344e	; 0x344e <H_LCD_void_clear>
    43e4:	07 c0       	rjmp	.+14     	; 0x43f4 <pass_check+0x164>
	u8 i;
	do
	{
		 A_SYS_get_entry_pass();
		 check = True;
	  for(i=0;i<5;i++)
    43e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    43e8:	8f 5f       	subi	r24, 0xFF	; 255
    43ea:	8f 87       	std	Y+15, r24	; 0x0f
    43ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    43ee:	85 30       	cpi	r24, 0x05	; 5
    43f0:	08 f4       	brcc	.+2      	; 0x43f4 <pass_check+0x164>
    43f2:	61 cf       	rjmp	.-318    	; 0x42b6 <pass_check+0x26>
			H_LCD_void_clear();
			break;

		}
	}
	}while(Try_Num<3  && check == FALSE);
    43f4:	89 89       	ldd	r24, Y+17	; 0x11
    43f6:	83 30       	cpi	r24, 0x03	; 3
    43f8:	20 f4       	brcc	.+8      	; 0x4402 <pass_check+0x172>
    43fa:	88 89       	ldd	r24, Y+16	; 0x10
    43fc:	88 23       	and	r24, r24
    43fe:	09 f4       	brne	.+2      	; 0x4402 <pass_check+0x172>
    4400:	54 cf       	rjmp	.-344    	; 0x42aa <pass_check+0x1a>

	return check;
    4402:	88 89       	ldd	r24, Y+16	; 0x10
}
    4404:	61 96       	adiw	r28, 0x11	; 17
    4406:	0f b6       	in	r0, 0x3f	; 63
    4408:	f8 94       	cli
    440a:	de bf       	out	0x3e, r29	; 62
    440c:	0f be       	out	0x3f, r0	; 63
    440e:	cd bf       	out	0x3d, r28	; 61
    4410:	cf 91       	pop	r28
    4412:	df 91       	pop	r29
    4414:	08 95       	ret

00004416 <Light_CONTROL>:

void Light_CONTROL()
{
    4416:	df 93       	push	r29
    4418:	cf 93       	push	r28
    441a:	cd b7       	in	r28, 0x3d	; 61
    441c:	de b7       	in	r29, 0x3e	; 62
    441e:	61 97       	sbiw	r28, 0x11	; 17
    4420:	0f b6       	in	r0, 0x3f	; 63
    4422:	f8 94       	cli
    4424:	de bf       	out	0x3e, r29	; 62
    4426:	0f be       	out	0x3f, r0	; 63
    4428:	cd bf       	out	0x3d, r28	; 61

		u8 KP_Pressed =NUM_PRESSED_KEY ;
    442a:	8f ef       	ldi	r24, 0xFF	; 255
    442c:	8f 87       	std	Y+15, r24	; 0x0f
		KP_Pressed=H_KEYPAD_void_getPressedKey();
    442e:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <H_KEYPAD_void_getPressedKey>
    4432:	8f 87       	std	Y+15, r24	; 0x0f

        //control lights with keypad as button
					if(KP_Pressed !=NUM_PRESSED_KEY)
    4434:	8f 85       	ldd	r24, Y+15	; 0x0f
    4436:	8f 3f       	cpi	r24, 0xFF	; 255
    4438:	09 f4       	brne	.+2      	; 0x443c <Light_CONTROL+0x26>
    443a:	9b c0       	rjmp	.+310    	; 0x4572 <Light_CONTROL+0x15c>
					{
						switch (KP_Pressed)
    443c:	8f 85       	ldd	r24, Y+15	; 0x0f
    443e:	28 2f       	mov	r18, r24
    4440:	30 e0       	ldi	r19, 0x00	; 0
    4442:	39 8b       	std	Y+17, r19	; 0x11
    4444:	28 8b       	std	Y+16, r18	; 0x10
    4446:	88 89       	ldd	r24, Y+16	; 0x10
    4448:	99 89       	ldd	r25, Y+17	; 0x11
    444a:	81 33       	cpi	r24, 0x31	; 49
    444c:	91 05       	cpc	r25, r1
    444e:	31 f0       	breq	.+12     	; 0x445c <Light_CONTROL+0x46>
    4450:	28 89       	ldd	r18, Y+16	; 0x10
    4452:	39 89       	ldd	r19, Y+17	; 0x11
    4454:	22 33       	cpi	r18, 0x32	; 50
    4456:	31 05       	cpc	r19, r1
    4458:	61 f0       	breq	.+24     	; 0x4472 <Light_CONTROL+0x5c>
    445a:	8b c0       	rjmp	.+278    	; 0x4572 <Light_CONTROL+0x15c>
						{
						case '1':
							H_Led_void_setON(BLU_LED);
    445c:	82 e0       	ldi	r24, 0x02	; 2
    445e:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
							H_Led_void_setON(GRN_LED);
    4462:	81 e0       	ldi	r24, 0x01	; 1
    4464:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
							H_LCD_void_sendString("^LIGHT ON ^");
    4468:	8d e8       	ldi	r24, 0x8D	; 141
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	0e 94 0b 1a 	call	0x3416	; 0x3416 <H_LCD_void_sendString>
    4470:	80 c0       	rjmp	.+256    	; 0x4572 <Light_CONTROL+0x15c>
							break;
						case '2':
							H_LCD_void_clear();
    4472:	0e 94 27 1a 	call	0x344e	; 0x344e <H_LCD_void_clear>
							H_Led_void_setOFF(BLU_LED);
    4476:	82 e0       	ldi	r24, 0x02	; 2
    4478:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
							H_Led_void_setOFF(GRN_LED);
    447c:	81 e0       	ldi	r24, 0x01	; 1
    447e:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
							H_LCD_void_sendString("^LIGHT OFF ^");
    4482:	89 e9       	ldi	r24, 0x99	; 153
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	0e 94 0b 1a 	call	0x3416	; 0x3416 <H_LCD_void_sendString>
    448a:	80 e0       	ldi	r24, 0x00	; 0
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	a6 e9       	ldi	r26, 0x96	; 150
    4490:	b3 e4       	ldi	r27, 0x43	; 67
    4492:	8b 87       	std	Y+11, r24	; 0x0b
    4494:	9c 87       	std	Y+12, r25	; 0x0c
    4496:	ad 87       	std	Y+13, r26	; 0x0d
    4498:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    449a:	6b 85       	ldd	r22, Y+11	; 0x0b
    449c:	7c 85       	ldd	r23, Y+12	; 0x0c
    449e:	8d 85       	ldd	r24, Y+13	; 0x0d
    44a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    44a2:	20 e0       	ldi	r18, 0x00	; 0
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	4a e7       	ldi	r20, 0x7A	; 122
    44a8:	55 e4       	ldi	r21, 0x45	; 69
    44aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ae:	dc 01       	movw	r26, r24
    44b0:	cb 01       	movw	r24, r22
    44b2:	8f 83       	std	Y+7, r24	; 0x07
    44b4:	98 87       	std	Y+8, r25	; 0x08
    44b6:	a9 87       	std	Y+9, r26	; 0x09
    44b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44ba:	6f 81       	ldd	r22, Y+7	; 0x07
    44bc:	78 85       	ldd	r23, Y+8	; 0x08
    44be:	89 85       	ldd	r24, Y+9	; 0x09
    44c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44c2:	20 e0       	ldi	r18, 0x00	; 0
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	40 e8       	ldi	r20, 0x80	; 128
    44c8:	5f e3       	ldi	r21, 0x3F	; 63
    44ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44ce:	88 23       	and	r24, r24
    44d0:	2c f4       	brge	.+10     	; 0x44dc <Light_CONTROL+0xc6>
		__ticks = 1;
    44d2:	81 e0       	ldi	r24, 0x01	; 1
    44d4:	90 e0       	ldi	r25, 0x00	; 0
    44d6:	9e 83       	std	Y+6, r25	; 0x06
    44d8:	8d 83       	std	Y+5, r24	; 0x05
    44da:	3f c0       	rjmp	.+126    	; 0x455a <Light_CONTROL+0x144>
	else if (__tmp > 65535)
    44dc:	6f 81       	ldd	r22, Y+7	; 0x07
    44de:	78 85       	ldd	r23, Y+8	; 0x08
    44e0:	89 85       	ldd	r24, Y+9	; 0x09
    44e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	3f ef       	ldi	r19, 0xFF	; 255
    44e8:	4f e7       	ldi	r20, 0x7F	; 127
    44ea:	57 e4       	ldi	r21, 0x47	; 71
    44ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44f0:	18 16       	cp	r1, r24
    44f2:	4c f5       	brge	.+82     	; 0x4546 <Light_CONTROL+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    44f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    44f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    44fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    44fc:	20 e0       	ldi	r18, 0x00	; 0
    44fe:	30 e0       	ldi	r19, 0x00	; 0
    4500:	40 e2       	ldi	r20, 0x20	; 32
    4502:	51 e4       	ldi	r21, 0x41	; 65
    4504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4508:	dc 01       	movw	r26, r24
    450a:	cb 01       	movw	r24, r22
    450c:	bc 01       	movw	r22, r24
    450e:	cd 01       	movw	r24, r26
    4510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4514:	dc 01       	movw	r26, r24
    4516:	cb 01       	movw	r24, r22
    4518:	9e 83       	std	Y+6, r25	; 0x06
    451a:	8d 83       	std	Y+5, r24	; 0x05
    451c:	0f c0       	rjmp	.+30     	; 0x453c <Light_CONTROL+0x126>
    451e:	80 e9       	ldi	r24, 0x90	; 144
    4520:	91 e0       	ldi	r25, 0x01	; 1
    4522:	9c 83       	std	Y+4, r25	; 0x04
    4524:	8b 83       	std	Y+3, r24	; 0x03
    4526:	8b 81       	ldd	r24, Y+3	; 0x03
    4528:	9c 81       	ldd	r25, Y+4	; 0x04
    452a:	01 97       	sbiw	r24, 0x01	; 1
    452c:	f1 f7       	brne	.-4      	; 0x452a <Light_CONTROL+0x114>
    452e:	9c 83       	std	Y+4, r25	; 0x04
    4530:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4532:	8d 81       	ldd	r24, Y+5	; 0x05
    4534:	9e 81       	ldd	r25, Y+6	; 0x06
    4536:	01 97       	sbiw	r24, 0x01	; 1
    4538:	9e 83       	std	Y+6, r25	; 0x06
    453a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    453c:	8d 81       	ldd	r24, Y+5	; 0x05
    453e:	9e 81       	ldd	r25, Y+6	; 0x06
    4540:	00 97       	sbiw	r24, 0x00	; 0
    4542:	69 f7       	brne	.-38     	; 0x451e <Light_CONTROL+0x108>
    4544:	14 c0       	rjmp	.+40     	; 0x456e <Light_CONTROL+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4546:	6f 81       	ldd	r22, Y+7	; 0x07
    4548:	78 85       	ldd	r23, Y+8	; 0x08
    454a:	89 85       	ldd	r24, Y+9	; 0x09
    454c:	9a 85       	ldd	r25, Y+10	; 0x0a
    454e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4552:	dc 01       	movw	r26, r24
    4554:	cb 01       	movw	r24, r22
    4556:	9e 83       	std	Y+6, r25	; 0x06
    4558:	8d 83       	std	Y+5, r24	; 0x05
    455a:	8d 81       	ldd	r24, Y+5	; 0x05
    455c:	9e 81       	ldd	r25, Y+6	; 0x06
    455e:	9a 83       	std	Y+2, r25	; 0x02
    4560:	89 83       	std	Y+1, r24	; 0x01
    4562:	89 81       	ldd	r24, Y+1	; 0x01
    4564:	9a 81       	ldd	r25, Y+2	; 0x02
    4566:	01 97       	sbiw	r24, 0x01	; 1
    4568:	f1 f7       	brne	.-4      	; 0x4566 <Light_CONTROL+0x150>
    456a:	9a 83       	std	Y+2, r25	; 0x02
    456c:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(300);
							H_LCD_void_clear();
    456e:	0e 94 27 1a 	call	0x344e	; 0x344e <H_LCD_void_clear>
						}

					}


}
    4572:	61 96       	adiw	r28, 0x11	; 17
    4574:	0f b6       	in	r0, 0x3f	; 63
    4576:	f8 94       	cli
    4578:	de bf       	out	0x3e, r29	; 62
    457a:	0f be       	out	0x3f, r0	; 63
    457c:	cd bf       	out	0x3d, r28	; 61
    457e:	cf 91       	pop	r28
    4580:	df 91       	pop	r29
    4582:	08 95       	ret

00004584 <Motor_init>:
void Motor_init()
{
    4584:	df 93       	push	r29
    4586:	cf 93       	push	r28
    4588:	cd b7       	in	r28, 0x3d	; 61
    458a:	de b7       	in	r29, 0x3e	; 62
	// set 2 output  pin to be input for the motor
	M_DIO_void_setPinDir(PORTD_ID,PIN0,OUT);
    458c:	84 e0       	ldi	r24, 0x04	; 4
    458e:	60 e0       	ldi	r22, 0x00	; 0
    4590:	41 e0       	ldi	r20, 0x01	; 1
    4592:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	M_DIO_void_setPinDir(PORTD_ID,PIN1,OUT);
    4596:	84 e0       	ldi	r24, 0x04	; 4
    4598:	61 e0       	ldi	r22, 0x01	; 1
    459a:	41 e0       	ldi	r20, 0x01	; 1
    459c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>
	//init timer0 to get pwm from oco pin
	M_TIMER0_void_Init();
    45a0:	0e 94 f8 07 	call	0xff0	; 0xff0 <M_TIMER0_void_Init>
	M_TIMER0_void_start();
    45a4:	0e 94 1b 08 	call	0x1036	; 0x1036 <M_TIMER0_void_start>
	// set oco pin as output to enable motor
	M_DIO_void_setPinDir(PORTB_ID,PIN3,OUT);
    45a8:	82 e0       	ldi	r24, 0x02	; 2
    45aa:	63 e0       	ldi	r22, 0x03	; 3
    45ac:	41 e0       	ldi	r20, 0x01	; 1
    45ae:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <M_DIO_void_setPinDir>

}
    45b2:	cf 91       	pop	r28
    45b4:	df 91       	pop	r29
    45b6:	08 95       	ret

000045b8 <motor_SControl>:
void motor_SControl(u8 option)
{
    45b8:	df 93       	push	r29
    45ba:	cf 93       	push	r28
    45bc:	00 d0       	rcall	.+0      	; 0x45be <motor_SControl+0x6>
    45be:	0f 92       	push	r0
    45c0:	cd b7       	in	r28, 0x3d	; 61
    45c2:	de b7       	in	r29, 0x3e	; 62
    45c4:	89 83       	std	Y+1, r24	; 0x01
	switch (option){
    45c6:	89 81       	ldd	r24, Y+1	; 0x01
    45c8:	28 2f       	mov	r18, r24
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	3b 83       	std	Y+3, r19	; 0x03
    45ce:	2a 83       	std	Y+2, r18	; 0x02
    45d0:	8a 81       	ldd	r24, Y+2	; 0x02
    45d2:	9b 81       	ldd	r25, Y+3	; 0x03
    45d4:	82 30       	cpi	r24, 0x02	; 2
    45d6:	91 05       	cpc	r25, r1
    45d8:	c1 f0       	breq	.+48     	; 0x460a <motor_SControl+0x52>
    45da:	2a 81       	ldd	r18, Y+2	; 0x02
    45dc:	3b 81       	ldd	r19, Y+3	; 0x03
    45de:	23 30       	cpi	r18, 0x03	; 3
    45e0:	31 05       	cpc	r19, r1
    45e2:	09 f1       	breq	.+66     	; 0x4626 <motor_SControl+0x6e>
    45e4:	8a 81       	ldd	r24, Y+2	; 0x02
    45e6:	9b 81       	ldd	r25, Y+3	; 0x03
    45e8:	81 30       	cpi	r24, 0x01	; 1
    45ea:	91 05       	cpc	r25, r1
    45ec:	49 f5       	brne	.+82     	; 0x4640 <motor_SControl+0x88>
	case STOP :
		M_TIMER0_void_setFastPWM(0);
    45ee:	80 e0       	ldi	r24, 0x00	; 0
    45f0:	0e 94 6e 09 	call	0x12dc	; 0x12dc <M_TIMER0_void_setFastPWM>
		M_DIO_void_setPinValue(PORTD_ID,PIN0,LOW);
    45f4:	84 e0       	ldi	r24, 0x04	; 4
    45f6:	60 e0       	ldi	r22, 0x00	; 0
    45f8:	40 e0       	ldi	r20, 0x00	; 0
    45fa:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(PORTD_ID,PIN1,LOW);
    45fe:	84 e0       	ldi	r24, 0x04	; 4
    4600:	61 e0       	ldi	r22, 0x01	; 1
    4602:	40 e0       	ldi	r20, 0x00	; 0
    4604:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    4608:	1b c0       	rjmp	.+54     	; 0x4640 <motor_SControl+0x88>

		break;
	case HALF_SPEED:
		// set pwm 50% to get half speed
		M_TIMER0_void_setFastPWM(50);
    460a:	82 e3       	ldi	r24, 0x32	; 50
    460c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <M_TIMER0_void_setFastPWM>
		M_DIO_void_setPinValue(PORTD_ID,PIN0,LOW);
    4610:	84 e0       	ldi	r24, 0x04	; 4
    4612:	60 e0       	ldi	r22, 0x00	; 0
    4614:	40 e0       	ldi	r20, 0x00	; 0
    4616:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(PORTD_ID,PIN1,HIGH);
    461a:	84 e0       	ldi	r24, 0x04	; 4
    461c:	61 e0       	ldi	r22, 0x01	; 1
    461e:	41 e0       	ldi	r20, 0x01	; 1
    4620:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
    4624:	0d c0       	rjmp	.+26     	; 0x4640 <motor_SControl+0x88>


		break;
	case FULL_SPEED :
		// set pwm 100% to get full speed
		M_TIMER0_void_setFastPWM(100);
    4626:	84 e6       	ldi	r24, 0x64	; 100
    4628:	0e 94 6e 09 	call	0x12dc	; 0x12dc <M_TIMER0_void_setFastPWM>
		M_DIO_void_setPinValue(PORTD_ID,PIN0,LOW);
    462c:	84 e0       	ldi	r24, 0x04	; 4
    462e:	60 e0       	ldi	r22, 0x00	; 0
    4630:	40 e0       	ldi	r20, 0x00	; 0
    4632:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(PORTD_ID,PIN1,HIGH);
    4636:	84 e0       	ldi	r24, 0x04	; 4
    4638:	61 e0       	ldi	r22, 0x01	; 1
    463a:	41 e0       	ldi	r20, 0x01	; 1
    463c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>

		break;
	}

}
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	0f 90       	pop	r0
    4646:	cf 91       	pop	r28
    4648:	df 91       	pop	r29
    464a:	08 95       	ret

0000464c <main>:
#include "ADC_int.h"
#include"SMARTH.h"


int main()
{
    464c:	df 93       	push	r29
    464e:	cf 93       	push	r28
    4650:	cd b7       	in	r28, 0x3d	; 61
    4652:	de b7       	in	r29, 0x3e	; 62
    4654:	eb 97       	sbiw	r28, 0x3b	; 59
    4656:	0f b6       	in	r0, 0x3f	; 63
    4658:	f8 94       	cli
    465a:	de bf       	out	0x3e, r29	; 62
    465c:	0f be       	out	0x3f, r0	; 63
    465e:	cd bf       	out	0x3d, r28	; 61
	u8 check=FALSE;
    4660:	1b ae       	std	Y+59, r1	; 0x3b
	u8 Temp,Distance;


	A_System_init();
    4662:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <A_System_init>
	H_TEMPSENSOR_void_Init();
    4666:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <H_TEMPSENSOR_void_Init>
	ICU_Init();
    466a:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <ICU_Init>
	Motor_init();
    466e:	0e 94 c2 22 	call	0x4584	; 0x4584 <Motor_init>
     {
    	 H_LCD_void_gotXY(0, 0);
    	 H_LCD_void_sendString("SMART HOME");
     }*/

	H_LCD_void_clear();
    4672:	0e 94 27 1a 	call	0x344e	; 0x344e <H_LCD_void_clear>
	A_SYS_Welcom_Print();
    4676:	0e 94 1c 20 	call	0x4038	; 0x4038 <A_SYS_Welcom_Print>

	check = pass_check();
    467a:	0e 94 48 21 	call	0x4290	; 0x4290 <pass_check>
    467e:	8b af       	std	Y+59, r24	; 0x3b
    4680:	ff c0       	rjmp	.+510    	; 0x4880 <main+0x234>
	// this loop to return to main menue  after 3 false tries ;
	while(!check)
	{
		H_LCD_void_clear();
    4682:	0e 94 27 1a 	call	0x344e	; 0x344e <H_LCD_void_clear>


		if (check==FALSE)
    4686:	8b ad       	ldd	r24, Y+59	; 0x3b
    4688:	88 23       	and	r24, r24
    468a:	09 f0       	breq	.+2      	; 0x468e <main+0x42>
    468c:	f6 c0       	rjmp	.+492    	; 0x487a <main+0x22e>
		{
			H_LCD_void_sendString("SYSTEM hold");
    468e:	86 ea       	ldi	r24, 0xA6	; 166
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	0e 94 0b 1a 	call	0x3416	; 0x3416 <H_LCD_void_sendString>
			H_Led_void_setON(RED_LED);
    4696:	80 e0       	ldi	r24, 0x00	; 0
    4698:	0e 94 2b 10 	call	0x2056	; 0x2056 <H_Led_void_setON>
    469c:	80 e0       	ldi	r24, 0x00	; 0
    469e:	90 e4       	ldi	r25, 0x40	; 64
    46a0:	ac e9       	ldi	r26, 0x9C	; 156
    46a2:	b5 e4       	ldi	r27, 0x45	; 69
    46a4:	8d ab       	std	Y+53, r24	; 0x35
    46a6:	9e ab       	std	Y+54, r25	; 0x36
    46a8:	af ab       	std	Y+55, r26	; 0x37
    46aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ac:	6d a9       	ldd	r22, Y+53	; 0x35
    46ae:	7e a9       	ldd	r23, Y+54	; 0x36
    46b0:	8f a9       	ldd	r24, Y+55	; 0x37
    46b2:	98 ad       	ldd	r25, Y+56	; 0x38
    46b4:	20 e0       	ldi	r18, 0x00	; 0
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	4a e7       	ldi	r20, 0x7A	; 122
    46ba:	55 e4       	ldi	r21, 0x45	; 69
    46bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c0:	dc 01       	movw	r26, r24
    46c2:	cb 01       	movw	r24, r22
    46c4:	89 ab       	std	Y+49, r24	; 0x31
    46c6:	9a ab       	std	Y+50, r25	; 0x32
    46c8:	ab ab       	std	Y+51, r26	; 0x33
    46ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    46cc:	69 a9       	ldd	r22, Y+49	; 0x31
    46ce:	7a a9       	ldd	r23, Y+50	; 0x32
    46d0:	8b a9       	ldd	r24, Y+51	; 0x33
    46d2:	9c a9       	ldd	r25, Y+52	; 0x34
    46d4:	20 e0       	ldi	r18, 0x00	; 0
    46d6:	30 e0       	ldi	r19, 0x00	; 0
    46d8:	40 e8       	ldi	r20, 0x80	; 128
    46da:	5f e3       	ldi	r21, 0x3F	; 63
    46dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46e0:	88 23       	and	r24, r24
    46e2:	2c f4       	brge	.+10     	; 0x46ee <main+0xa2>
		__ticks = 1;
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	98 ab       	std	Y+48, r25	; 0x30
    46ea:	8f a7       	std	Y+47, r24	; 0x2f
    46ec:	3f c0       	rjmp	.+126    	; 0x476c <main+0x120>
	else if (__tmp > 65535)
    46ee:	69 a9       	ldd	r22, Y+49	; 0x31
    46f0:	7a a9       	ldd	r23, Y+50	; 0x32
    46f2:	8b a9       	ldd	r24, Y+51	; 0x33
    46f4:	9c a9       	ldd	r25, Y+52	; 0x34
    46f6:	20 e0       	ldi	r18, 0x00	; 0
    46f8:	3f ef       	ldi	r19, 0xFF	; 255
    46fa:	4f e7       	ldi	r20, 0x7F	; 127
    46fc:	57 e4       	ldi	r21, 0x47	; 71
    46fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4702:	18 16       	cp	r1, r24
    4704:	4c f5       	brge	.+82     	; 0x4758 <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4706:	6d a9       	ldd	r22, Y+53	; 0x35
    4708:	7e a9       	ldd	r23, Y+54	; 0x36
    470a:	8f a9       	ldd	r24, Y+55	; 0x37
    470c:	98 ad       	ldd	r25, Y+56	; 0x38
    470e:	20 e0       	ldi	r18, 0x00	; 0
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	40 e2       	ldi	r20, 0x20	; 32
    4714:	51 e4       	ldi	r21, 0x41	; 65
    4716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    471a:	dc 01       	movw	r26, r24
    471c:	cb 01       	movw	r24, r22
    471e:	bc 01       	movw	r22, r24
    4720:	cd 01       	movw	r24, r26
    4722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4726:	dc 01       	movw	r26, r24
    4728:	cb 01       	movw	r24, r22
    472a:	98 ab       	std	Y+48, r25	; 0x30
    472c:	8f a7       	std	Y+47, r24	; 0x2f
    472e:	0f c0       	rjmp	.+30     	; 0x474e <main+0x102>
    4730:	80 e9       	ldi	r24, 0x90	; 144
    4732:	91 e0       	ldi	r25, 0x01	; 1
    4734:	9e a7       	std	Y+46, r25	; 0x2e
    4736:	8d a7       	std	Y+45, r24	; 0x2d
    4738:	8d a5       	ldd	r24, Y+45	; 0x2d
    473a:	9e a5       	ldd	r25, Y+46	; 0x2e
    473c:	01 97       	sbiw	r24, 0x01	; 1
    473e:	f1 f7       	brne	.-4      	; 0x473c <main+0xf0>
    4740:	9e a7       	std	Y+46, r25	; 0x2e
    4742:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4744:	8f a5       	ldd	r24, Y+47	; 0x2f
    4746:	98 a9       	ldd	r25, Y+48	; 0x30
    4748:	01 97       	sbiw	r24, 0x01	; 1
    474a:	98 ab       	std	Y+48, r25	; 0x30
    474c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    474e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4750:	98 a9       	ldd	r25, Y+48	; 0x30
    4752:	00 97       	sbiw	r24, 0x00	; 0
    4754:	69 f7       	brne	.-38     	; 0x4730 <main+0xe4>
    4756:	14 c0       	rjmp	.+40     	; 0x4780 <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4758:	69 a9       	ldd	r22, Y+49	; 0x31
    475a:	7a a9       	ldd	r23, Y+50	; 0x32
    475c:	8b a9       	ldd	r24, Y+51	; 0x33
    475e:	9c a9       	ldd	r25, Y+52	; 0x34
    4760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4764:	dc 01       	movw	r26, r24
    4766:	cb 01       	movw	r24, r22
    4768:	98 ab       	std	Y+48, r25	; 0x30
    476a:	8f a7       	std	Y+47, r24	; 0x2f
    476c:	8f a5       	ldd	r24, Y+47	; 0x2f
    476e:	98 a9       	ldd	r25, Y+48	; 0x30
    4770:	9c a7       	std	Y+44, r25	; 0x2c
    4772:	8b a7       	std	Y+43, r24	; 0x2b
    4774:	8b a5       	ldd	r24, Y+43	; 0x2b
    4776:	9c a5       	ldd	r25, Y+44	; 0x2c
    4778:	01 97       	sbiw	r24, 0x01	; 1
    477a:	f1 f7       	brne	.-4      	; 0x4778 <main+0x12c>
    477c:	9c a7       	std	Y+44, r25	; 0x2c
    477e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(5000);
			H_LCD_void_clear();
    4780:	0e 94 27 1a 	call	0x344e	; 0x344e <H_LCD_void_clear>
			H_Led_void_setOFF(RED_LED);
    4784:	80 e0       	ldi	r24, 0x00	; 0
    4786:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <H_Led_void_setOFF>
			H_LCD_void_sendString("RE ENTRE PASS");
    478a:	82 eb       	ldi	r24, 0xB2	; 178
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	0e 94 0b 1a 	call	0x3416	; 0x3416 <H_LCD_void_sendString>
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	aa e7       	ldi	r26, 0x7A	; 122
    4798:	b4 e4       	ldi	r27, 0x44	; 68
    479a:	8f a3       	std	Y+39, r24	; 0x27
    479c:	98 a7       	std	Y+40, r25	; 0x28
    479e:	a9 a7       	std	Y+41, r26	; 0x29
    47a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47a2:	6f a1       	ldd	r22, Y+39	; 0x27
    47a4:	78 a5       	ldd	r23, Y+40	; 0x28
    47a6:	89 a5       	ldd	r24, Y+41	; 0x29
    47a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    47aa:	20 e0       	ldi	r18, 0x00	; 0
    47ac:	30 e0       	ldi	r19, 0x00	; 0
    47ae:	4a e7       	ldi	r20, 0x7A	; 122
    47b0:	55 e4       	ldi	r21, 0x45	; 69
    47b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b6:	dc 01       	movw	r26, r24
    47b8:	cb 01       	movw	r24, r22
    47ba:	8b a3       	std	Y+35, r24	; 0x23
    47bc:	9c a3       	std	Y+36, r25	; 0x24
    47be:	ad a3       	std	Y+37, r26	; 0x25
    47c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    47c2:	6b a1       	ldd	r22, Y+35	; 0x23
    47c4:	7c a1       	ldd	r23, Y+36	; 0x24
    47c6:	8d a1       	ldd	r24, Y+37	; 0x25
    47c8:	9e a1       	ldd	r25, Y+38	; 0x26
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	40 e8       	ldi	r20, 0x80	; 128
    47d0:	5f e3       	ldi	r21, 0x3F	; 63
    47d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47d6:	88 23       	and	r24, r24
    47d8:	2c f4       	brge	.+10     	; 0x47e4 <main+0x198>
		__ticks = 1;
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	9a a3       	std	Y+34, r25	; 0x22
    47e0:	89 a3       	std	Y+33, r24	; 0x21
    47e2:	3f c0       	rjmp	.+126    	; 0x4862 <main+0x216>
	else if (__tmp > 65535)
    47e4:	6b a1       	ldd	r22, Y+35	; 0x23
    47e6:	7c a1       	ldd	r23, Y+36	; 0x24
    47e8:	8d a1       	ldd	r24, Y+37	; 0x25
    47ea:	9e a1       	ldd	r25, Y+38	; 0x26
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	3f ef       	ldi	r19, 0xFF	; 255
    47f0:	4f e7       	ldi	r20, 0x7F	; 127
    47f2:	57 e4       	ldi	r21, 0x47	; 71
    47f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47f8:	18 16       	cp	r1, r24
    47fa:	4c f5       	brge	.+82     	; 0x484e <main+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47fc:	6f a1       	ldd	r22, Y+39	; 0x27
    47fe:	78 a5       	ldd	r23, Y+40	; 0x28
    4800:	89 a5       	ldd	r24, Y+41	; 0x29
    4802:	9a a5       	ldd	r25, Y+42	; 0x2a
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	30 e0       	ldi	r19, 0x00	; 0
    4808:	40 e2       	ldi	r20, 0x20	; 32
    480a:	51 e4       	ldi	r21, 0x41	; 65
    480c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4810:	dc 01       	movw	r26, r24
    4812:	cb 01       	movw	r24, r22
    4814:	bc 01       	movw	r22, r24
    4816:	cd 01       	movw	r24, r26
    4818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    481c:	dc 01       	movw	r26, r24
    481e:	cb 01       	movw	r24, r22
    4820:	9a a3       	std	Y+34, r25	; 0x22
    4822:	89 a3       	std	Y+33, r24	; 0x21
    4824:	0f c0       	rjmp	.+30     	; 0x4844 <main+0x1f8>
    4826:	80 e9       	ldi	r24, 0x90	; 144
    4828:	91 e0       	ldi	r25, 0x01	; 1
    482a:	98 a3       	std	Y+32, r25	; 0x20
    482c:	8f 8f       	std	Y+31, r24	; 0x1f
    482e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4830:	98 a1       	ldd	r25, Y+32	; 0x20
    4832:	01 97       	sbiw	r24, 0x01	; 1
    4834:	f1 f7       	brne	.-4      	; 0x4832 <main+0x1e6>
    4836:	98 a3       	std	Y+32, r25	; 0x20
    4838:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    483a:	89 a1       	ldd	r24, Y+33	; 0x21
    483c:	9a a1       	ldd	r25, Y+34	; 0x22
    483e:	01 97       	sbiw	r24, 0x01	; 1
    4840:	9a a3       	std	Y+34, r25	; 0x22
    4842:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4844:	89 a1       	ldd	r24, Y+33	; 0x21
    4846:	9a a1       	ldd	r25, Y+34	; 0x22
    4848:	00 97       	sbiw	r24, 0x00	; 0
    484a:	69 f7       	brne	.-38     	; 0x4826 <main+0x1da>
    484c:	14 c0       	rjmp	.+40     	; 0x4876 <main+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    484e:	6b a1       	ldd	r22, Y+35	; 0x23
    4850:	7c a1       	ldd	r23, Y+36	; 0x24
    4852:	8d a1       	ldd	r24, Y+37	; 0x25
    4854:	9e a1       	ldd	r25, Y+38	; 0x26
    4856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	9a a3       	std	Y+34, r25	; 0x22
    4860:	89 a3       	std	Y+33, r24	; 0x21
    4862:	89 a1       	ldd	r24, Y+33	; 0x21
    4864:	9a a1       	ldd	r25, Y+34	; 0x22
    4866:	9e 8f       	std	Y+30, r25	; 0x1e
    4868:	8d 8f       	std	Y+29, r24	; 0x1d
    486a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    486c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    486e:	01 97       	sbiw	r24, 0x01	; 1
    4870:	f1 f7       	brne	.-4      	; 0x486e <main+0x222>
    4872:	9e 8f       	std	Y+30, r25	; 0x1e
    4874:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			H_LCD_void_clear();
    4876:	0e 94 27 1a 	call	0x344e	; 0x344e <H_LCD_void_clear>
		}

		check = pass_check();
    487a:	0e 94 48 21 	call	0x4290	; 0x4290 <pass_check>
    487e:	8b af       	std	Y+59, r24	; 0x3b
	H_LCD_void_clear();
	A_SYS_Welcom_Print();

	check = pass_check();
	// this loop to return to main menue  after 3 false tries ;
	while(!check)
    4880:	8b ad       	ldd	r24, Y+59	; 0x3b
    4882:	88 23       	and	r24, r24
    4884:	09 f4       	brne	.+2      	; 0x4888 <main+0x23c>
    4886:	fd ce       	rjmp	.-518    	; 0x4682 <main+0x36>
		}

		check = pass_check();

	}
	H_LCD_void_sendString("WELCOME DEAR !");
    4888:	80 ec       	ldi	r24, 0xC0	; 192
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	0e 94 0b 1a 	call	0x3416	; 0x3416 <H_LCD_void_sendString>
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	aa e7       	ldi	r26, 0x7A	; 122
    4896:	b4 e4       	ldi	r27, 0x44	; 68
    4898:	89 8f       	std	Y+25, r24	; 0x19
    489a:	9a 8f       	std	Y+26, r25	; 0x1a
    489c:	ab 8f       	std	Y+27, r26	; 0x1b
    489e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48a0:	69 8d       	ldd	r22, Y+25	; 0x19
    48a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48a8:	20 e0       	ldi	r18, 0x00	; 0
    48aa:	30 e0       	ldi	r19, 0x00	; 0
    48ac:	4a e7       	ldi	r20, 0x7A	; 122
    48ae:	55 e4       	ldi	r21, 0x45	; 69
    48b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b4:	dc 01       	movw	r26, r24
    48b6:	cb 01       	movw	r24, r22
    48b8:	8d 8b       	std	Y+21, r24	; 0x15
    48ba:	9e 8b       	std	Y+22, r25	; 0x16
    48bc:	af 8b       	std	Y+23, r26	; 0x17
    48be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    48c0:	6d 89       	ldd	r22, Y+21	; 0x15
    48c2:	7e 89       	ldd	r23, Y+22	; 0x16
    48c4:	8f 89       	ldd	r24, Y+23	; 0x17
    48c6:	98 8d       	ldd	r25, Y+24	; 0x18
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	40 e8       	ldi	r20, 0x80	; 128
    48ce:	5f e3       	ldi	r21, 0x3F	; 63
    48d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48d4:	88 23       	and	r24, r24
    48d6:	2c f4       	brge	.+10     	; 0x48e2 <main+0x296>
		__ticks = 1;
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	9c 8b       	std	Y+20, r25	; 0x14
    48de:	8b 8b       	std	Y+19, r24	; 0x13
    48e0:	3f c0       	rjmp	.+126    	; 0x4960 <main+0x314>
	else if (__tmp > 65535)
    48e2:	6d 89       	ldd	r22, Y+21	; 0x15
    48e4:	7e 89       	ldd	r23, Y+22	; 0x16
    48e6:	8f 89       	ldd	r24, Y+23	; 0x17
    48e8:	98 8d       	ldd	r25, Y+24	; 0x18
    48ea:	20 e0       	ldi	r18, 0x00	; 0
    48ec:	3f ef       	ldi	r19, 0xFF	; 255
    48ee:	4f e7       	ldi	r20, 0x7F	; 127
    48f0:	57 e4       	ldi	r21, 0x47	; 71
    48f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48f6:	18 16       	cp	r1, r24
    48f8:	4c f5       	brge	.+82     	; 0x494c <main+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48fa:	69 8d       	ldd	r22, Y+25	; 0x19
    48fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4900:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4902:	20 e0       	ldi	r18, 0x00	; 0
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	40 e2       	ldi	r20, 0x20	; 32
    4908:	51 e4       	ldi	r21, 0x41	; 65
    490a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    490e:	dc 01       	movw	r26, r24
    4910:	cb 01       	movw	r24, r22
    4912:	bc 01       	movw	r22, r24
    4914:	cd 01       	movw	r24, r26
    4916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22
    491e:	9c 8b       	std	Y+20, r25	; 0x14
    4920:	8b 8b       	std	Y+19, r24	; 0x13
    4922:	0f c0       	rjmp	.+30     	; 0x4942 <main+0x2f6>
    4924:	80 e9       	ldi	r24, 0x90	; 144
    4926:	91 e0       	ldi	r25, 0x01	; 1
    4928:	9a 8b       	std	Y+18, r25	; 0x12
    492a:	89 8b       	std	Y+17, r24	; 0x11
    492c:	89 89       	ldd	r24, Y+17	; 0x11
    492e:	9a 89       	ldd	r25, Y+18	; 0x12
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	f1 f7       	brne	.-4      	; 0x4930 <main+0x2e4>
    4934:	9a 8b       	std	Y+18, r25	; 0x12
    4936:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4938:	8b 89       	ldd	r24, Y+19	; 0x13
    493a:	9c 89       	ldd	r25, Y+20	; 0x14
    493c:	01 97       	sbiw	r24, 0x01	; 1
    493e:	9c 8b       	std	Y+20, r25	; 0x14
    4940:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4942:	8b 89       	ldd	r24, Y+19	; 0x13
    4944:	9c 89       	ldd	r25, Y+20	; 0x14
    4946:	00 97       	sbiw	r24, 0x00	; 0
    4948:	69 f7       	brne	.-38     	; 0x4924 <main+0x2d8>
    494a:	14 c0       	rjmp	.+40     	; 0x4974 <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    494c:	6d 89       	ldd	r22, Y+21	; 0x15
    494e:	7e 89       	ldd	r23, Y+22	; 0x16
    4950:	8f 89       	ldd	r24, Y+23	; 0x17
    4952:	98 8d       	ldd	r25, Y+24	; 0x18
    4954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4958:	dc 01       	movw	r26, r24
    495a:	cb 01       	movw	r24, r22
    495c:	9c 8b       	std	Y+20, r25	; 0x14
    495e:	8b 8b       	std	Y+19, r24	; 0x13
    4960:	8b 89       	ldd	r24, Y+19	; 0x13
    4962:	9c 89       	ldd	r25, Y+20	; 0x14
    4964:	98 8b       	std	Y+16, r25	; 0x10
    4966:	8f 87       	std	Y+15, r24	; 0x0f
    4968:	8f 85       	ldd	r24, Y+15	; 0x0f
    496a:	98 89       	ldd	r25, Y+16	; 0x10
    496c:	01 97       	sbiw	r24, 0x01	; 1
    496e:	f1 f7       	brne	.-4      	; 0x496c <main+0x320>
    4970:	98 8b       	std	Y+16, r25	; 0x10
    4972:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	H_LCD_void_clear();
    4974:	0e 94 27 1a 	call	0x344e	; 0x344e <H_LCD_void_clear>
	// set relay to open the  door if user enter the right pass
	M_DIO_void_setPinValue(PORTC_ID,PIN4, HIGH);
    4978:	83 e0       	ldi	r24, 0x03	; 3
    497a:	64 e0       	ldi	r22, 0x04	; 4
    497c:	41 e0       	ldi	r20, 0x01	; 1
    497e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <M_DIO_void_setPinValue>


	while(1)
	{

		H_LCD_void_gotXY(0, 0);
    4982:	80 e0       	ldi	r24, 0x00	; 0
    4984:	60 e0       	ldi	r22, 0x00	; 0
    4986:	0e 94 ca 1a 	call	0x3594	; 0x3594 <H_LCD_void_gotXY>
		Light_CONTROL();
    498a:	0e 94 0b 22 	call	0x4416	; 0x4416 <Light_CONTROL>
		Temp= H_TEMPSENSOR_u8_readTemp();
    498e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <H_TEMPSENSOR_u8_readTemp>
    4992:	8a af       	std	Y+58, r24	; 0x3a

		H_LCD_void_gotXY(1, 2);
    4994:	81 e0       	ldi	r24, 0x01	; 1
    4996:	62 e0       	ldi	r22, 0x02	; 2
    4998:	0e 94 ca 1a 	call	0x3594	; 0x3594 <H_LCD_void_gotXY>
		H_LCD_void_sendString("TEMP :");
    499c:	8f ec       	ldi	r24, 0xCF	; 207
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	0e 94 0b 1a 	call	0x3416	; 0x3416 <H_LCD_void_sendString>
		H_LCD_void_sendIntNum(Temp);
    49a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    49a6:	88 2f       	mov	r24, r24
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	a0 e0       	ldi	r26, 0x00	; 0
    49ac:	b0 e0       	ldi	r27, 0x00	; 0
    49ae:	bc 01       	movw	r22, r24
    49b0:	cd 01       	movw	r24, r26
    49b2:	0e 94 31 1a 	call	0x3462	; 0x3462 <H_LCD_void_sendIntNum>
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	aa ef       	ldi	r26, 0xFA	; 250
    49bc:	b3 e4       	ldi	r27, 0x43	; 67
    49be:	8b 87       	std	Y+11, r24	; 0x0b
    49c0:	9c 87       	std	Y+12, r25	; 0x0c
    49c2:	ad 87       	std	Y+13, r26	; 0x0d
    49c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    49c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    49ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    49cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	4a e7       	ldi	r20, 0x7A	; 122
    49d4:	55 e4       	ldi	r21, 0x45	; 69
    49d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49da:	dc 01       	movw	r26, r24
    49dc:	cb 01       	movw	r24, r22
    49de:	8f 83       	std	Y+7, r24	; 0x07
    49e0:	98 87       	std	Y+8, r25	; 0x08
    49e2:	a9 87       	std	Y+9, r26	; 0x09
    49e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49e6:	6f 81       	ldd	r22, Y+7	; 0x07
    49e8:	78 85       	ldd	r23, Y+8	; 0x08
    49ea:	89 85       	ldd	r24, Y+9	; 0x09
    49ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	40 e8       	ldi	r20, 0x80	; 128
    49f4:	5f e3       	ldi	r21, 0x3F	; 63
    49f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49fa:	88 23       	and	r24, r24
    49fc:	2c f4       	brge	.+10     	; 0x4a08 <main+0x3bc>
		__ticks = 1;
    49fe:	81 e0       	ldi	r24, 0x01	; 1
    4a00:	90 e0       	ldi	r25, 0x00	; 0
    4a02:	9e 83       	std	Y+6, r25	; 0x06
    4a04:	8d 83       	std	Y+5, r24	; 0x05
    4a06:	3f c0       	rjmp	.+126    	; 0x4a86 <main+0x43a>
	else if (__tmp > 65535)
    4a08:	6f 81       	ldd	r22, Y+7	; 0x07
    4a0a:	78 85       	ldd	r23, Y+8	; 0x08
    4a0c:	89 85       	ldd	r24, Y+9	; 0x09
    4a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a10:	20 e0       	ldi	r18, 0x00	; 0
    4a12:	3f ef       	ldi	r19, 0xFF	; 255
    4a14:	4f e7       	ldi	r20, 0x7F	; 127
    4a16:	57 e4       	ldi	r21, 0x47	; 71
    4a18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a1c:	18 16       	cp	r1, r24
    4a1e:	4c f5       	brge	.+82     	; 0x4a72 <main+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a20:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a22:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a28:	20 e0       	ldi	r18, 0x00	; 0
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	40 e2       	ldi	r20, 0x20	; 32
    4a2e:	51 e4       	ldi	r21, 0x41	; 65
    4a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a34:	dc 01       	movw	r26, r24
    4a36:	cb 01       	movw	r24, r22
    4a38:	bc 01       	movw	r22, r24
    4a3a:	cd 01       	movw	r24, r26
    4a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a40:	dc 01       	movw	r26, r24
    4a42:	cb 01       	movw	r24, r22
    4a44:	9e 83       	std	Y+6, r25	; 0x06
    4a46:	8d 83       	std	Y+5, r24	; 0x05
    4a48:	0f c0       	rjmp	.+30     	; 0x4a68 <main+0x41c>
    4a4a:	80 e9       	ldi	r24, 0x90	; 144
    4a4c:	91 e0       	ldi	r25, 0x01	; 1
    4a4e:	9c 83       	std	Y+4, r25	; 0x04
    4a50:	8b 83       	std	Y+3, r24	; 0x03
    4a52:	8b 81       	ldd	r24, Y+3	; 0x03
    4a54:	9c 81       	ldd	r25, Y+4	; 0x04
    4a56:	01 97       	sbiw	r24, 0x01	; 1
    4a58:	f1 f7       	brne	.-4      	; 0x4a56 <main+0x40a>
    4a5a:	9c 83       	std	Y+4, r25	; 0x04
    4a5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a60:	9e 81       	ldd	r25, Y+6	; 0x06
    4a62:	01 97       	sbiw	r24, 0x01	; 1
    4a64:	9e 83       	std	Y+6, r25	; 0x06
    4a66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a68:	8d 81       	ldd	r24, Y+5	; 0x05
    4a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4a6c:	00 97       	sbiw	r24, 0x00	; 0
    4a6e:	69 f7       	brne	.-38     	; 0x4a4a <main+0x3fe>
    4a70:	14 c0       	rjmp	.+40     	; 0x4a9a <main+0x44e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a72:	6f 81       	ldd	r22, Y+7	; 0x07
    4a74:	78 85       	ldd	r23, Y+8	; 0x08
    4a76:	89 85       	ldd	r24, Y+9	; 0x09
    4a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a7e:	dc 01       	movw	r26, r24
    4a80:	cb 01       	movw	r24, r22
    4a82:	9e 83       	std	Y+6, r25	; 0x06
    4a84:	8d 83       	std	Y+5, r24	; 0x05
    4a86:	8d 81       	ldd	r24, Y+5	; 0x05
    4a88:	9e 81       	ldd	r25, Y+6	; 0x06
    4a8a:	9a 83       	std	Y+2, r25	; 0x02
    4a8c:	89 83       	std	Y+1, r24	; 0x01
    4a8e:	89 81       	ldd	r24, Y+1	; 0x01
    4a90:	9a 81       	ldd	r25, Y+2	; 0x02
    4a92:	01 97       	sbiw	r24, 0x01	; 1
    4a94:	f1 f7       	brne	.-4      	; 0x4a92 <main+0x446>
    4a96:	9a 83       	std	Y+2, r25	; 0x02
    4a98:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		H_LCD_void_clear();
    4a9a:	0e 94 27 1a 	call	0x344e	; 0x344e <H_LCD_void_clear>

		if(Temp<=25)
    4a9e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4aa0:	8a 31       	cpi	r24, 0x1A	; 26
    4aa2:	20 f4       	brcc	.+8      	; 0x4aac <main+0x460>
		{
			motor_SControl(STOP);
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <motor_SControl>
    4aaa:	6b cf       	rjmp	.-298    	; 0x4982 <main+0x336>
		}
		else if(Temp>25 && Temp<35)
    4aac:	8a ad       	ldd	r24, Y+58	; 0x3a
    4aae:	8a 31       	cpi	r24, 0x1A	; 26
    4ab0:	38 f0       	brcs	.+14     	; 0x4ac0 <main+0x474>
    4ab2:	8a ad       	ldd	r24, Y+58	; 0x3a
    4ab4:	83 32       	cpi	r24, 0x23	; 35
    4ab6:	20 f4       	brcc	.+8      	; 0x4ac0 <main+0x474>

		{
			motor_SControl(HALF_SPEED);
    4ab8:	82 e0       	ldi	r24, 0x02	; 2
    4aba:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <motor_SControl>
    4abe:	61 cf       	rjmp	.-318    	; 0x4982 <main+0x336>
		}
		else if (Temp>=35)
    4ac0:	8a ad       	ldd	r24, Y+58	; 0x3a
    4ac2:	83 32       	cpi	r24, 0x23	; 35
    4ac4:	08 f4       	brcc	.+2      	; 0x4ac8 <main+0x47c>
    4ac6:	5d cf       	rjmp	.-326    	; 0x4982 <main+0x336>
		{
			motor_SControl(FULL_SPEED);
    4ac8:	83 e0       	ldi	r24, 0x03	; 3
    4aca:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <motor_SControl>
    4ace:	59 cf       	rjmp	.-334    	; 0x4982 <main+0x336>

00004ad0 <__mulsi3>:
    4ad0:	62 9f       	mul	r22, r18
    4ad2:	d0 01       	movw	r26, r0
    4ad4:	73 9f       	mul	r23, r19
    4ad6:	f0 01       	movw	r30, r0
    4ad8:	82 9f       	mul	r24, r18
    4ada:	e0 0d       	add	r30, r0
    4adc:	f1 1d       	adc	r31, r1
    4ade:	64 9f       	mul	r22, r20
    4ae0:	e0 0d       	add	r30, r0
    4ae2:	f1 1d       	adc	r31, r1
    4ae4:	92 9f       	mul	r25, r18
    4ae6:	f0 0d       	add	r31, r0
    4ae8:	83 9f       	mul	r24, r19
    4aea:	f0 0d       	add	r31, r0
    4aec:	74 9f       	mul	r23, r20
    4aee:	f0 0d       	add	r31, r0
    4af0:	65 9f       	mul	r22, r21
    4af2:	f0 0d       	add	r31, r0
    4af4:	99 27       	eor	r25, r25
    4af6:	72 9f       	mul	r23, r18
    4af8:	b0 0d       	add	r27, r0
    4afa:	e1 1d       	adc	r30, r1
    4afc:	f9 1f       	adc	r31, r25
    4afe:	63 9f       	mul	r22, r19
    4b00:	b0 0d       	add	r27, r0
    4b02:	e1 1d       	adc	r30, r1
    4b04:	f9 1f       	adc	r31, r25
    4b06:	bd 01       	movw	r22, r26
    4b08:	cf 01       	movw	r24, r30
    4b0a:	11 24       	eor	r1, r1
    4b0c:	08 95       	ret

00004b0e <__divmodhi4>:
    4b0e:	97 fb       	bst	r25, 7
    4b10:	09 2e       	mov	r0, r25
    4b12:	07 26       	eor	r0, r23
    4b14:	0a d0       	rcall	.+20     	; 0x4b2a <__divmodhi4_neg1>
    4b16:	77 fd       	sbrc	r23, 7
    4b18:	04 d0       	rcall	.+8      	; 0x4b22 <__divmodhi4_neg2>
    4b1a:	49 d0       	rcall	.+146    	; 0x4bae <__udivmodhi4>
    4b1c:	06 d0       	rcall	.+12     	; 0x4b2a <__divmodhi4_neg1>
    4b1e:	00 20       	and	r0, r0
    4b20:	1a f4       	brpl	.+6      	; 0x4b28 <__divmodhi4_exit>

00004b22 <__divmodhi4_neg2>:
    4b22:	70 95       	com	r23
    4b24:	61 95       	neg	r22
    4b26:	7f 4f       	sbci	r23, 0xFF	; 255

00004b28 <__divmodhi4_exit>:
    4b28:	08 95       	ret

00004b2a <__divmodhi4_neg1>:
    4b2a:	f6 f7       	brtc	.-4      	; 0x4b28 <__divmodhi4_exit>
    4b2c:	90 95       	com	r25
    4b2e:	81 95       	neg	r24
    4b30:	9f 4f       	sbci	r25, 0xFF	; 255
    4b32:	08 95       	ret

00004b34 <__udivmodsi4>:
    4b34:	a1 e2       	ldi	r26, 0x21	; 33
    4b36:	1a 2e       	mov	r1, r26
    4b38:	aa 1b       	sub	r26, r26
    4b3a:	bb 1b       	sub	r27, r27
    4b3c:	fd 01       	movw	r30, r26
    4b3e:	0d c0       	rjmp	.+26     	; 0x4b5a <__udivmodsi4_ep>

00004b40 <__udivmodsi4_loop>:
    4b40:	aa 1f       	adc	r26, r26
    4b42:	bb 1f       	adc	r27, r27
    4b44:	ee 1f       	adc	r30, r30
    4b46:	ff 1f       	adc	r31, r31
    4b48:	a2 17       	cp	r26, r18
    4b4a:	b3 07       	cpc	r27, r19
    4b4c:	e4 07       	cpc	r30, r20
    4b4e:	f5 07       	cpc	r31, r21
    4b50:	20 f0       	brcs	.+8      	; 0x4b5a <__udivmodsi4_ep>
    4b52:	a2 1b       	sub	r26, r18
    4b54:	b3 0b       	sbc	r27, r19
    4b56:	e4 0b       	sbc	r30, r20
    4b58:	f5 0b       	sbc	r31, r21

00004b5a <__udivmodsi4_ep>:
    4b5a:	66 1f       	adc	r22, r22
    4b5c:	77 1f       	adc	r23, r23
    4b5e:	88 1f       	adc	r24, r24
    4b60:	99 1f       	adc	r25, r25
    4b62:	1a 94       	dec	r1
    4b64:	69 f7       	brne	.-38     	; 0x4b40 <__udivmodsi4_loop>
    4b66:	60 95       	com	r22
    4b68:	70 95       	com	r23
    4b6a:	80 95       	com	r24
    4b6c:	90 95       	com	r25
    4b6e:	9b 01       	movw	r18, r22
    4b70:	ac 01       	movw	r20, r24
    4b72:	bd 01       	movw	r22, r26
    4b74:	cf 01       	movw	r24, r30
    4b76:	08 95       	ret

00004b78 <__divmodsi4>:
    4b78:	97 fb       	bst	r25, 7
    4b7a:	09 2e       	mov	r0, r25
    4b7c:	05 26       	eor	r0, r21
    4b7e:	0e d0       	rcall	.+28     	; 0x4b9c <__divmodsi4_neg1>
    4b80:	57 fd       	sbrc	r21, 7
    4b82:	04 d0       	rcall	.+8      	; 0x4b8c <__divmodsi4_neg2>
    4b84:	d7 df       	rcall	.-82     	; 0x4b34 <__udivmodsi4>
    4b86:	0a d0       	rcall	.+20     	; 0x4b9c <__divmodsi4_neg1>
    4b88:	00 1c       	adc	r0, r0
    4b8a:	38 f4       	brcc	.+14     	; 0x4b9a <__divmodsi4_exit>

00004b8c <__divmodsi4_neg2>:
    4b8c:	50 95       	com	r21
    4b8e:	40 95       	com	r20
    4b90:	30 95       	com	r19
    4b92:	21 95       	neg	r18
    4b94:	3f 4f       	sbci	r19, 0xFF	; 255
    4b96:	4f 4f       	sbci	r20, 0xFF	; 255
    4b98:	5f 4f       	sbci	r21, 0xFF	; 255

00004b9a <__divmodsi4_exit>:
    4b9a:	08 95       	ret

00004b9c <__divmodsi4_neg1>:
    4b9c:	f6 f7       	brtc	.-4      	; 0x4b9a <__divmodsi4_exit>
    4b9e:	90 95       	com	r25
    4ba0:	80 95       	com	r24
    4ba2:	70 95       	com	r23
    4ba4:	61 95       	neg	r22
    4ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    4baa:	9f 4f       	sbci	r25, 0xFF	; 255
    4bac:	08 95       	ret

00004bae <__udivmodhi4>:
    4bae:	aa 1b       	sub	r26, r26
    4bb0:	bb 1b       	sub	r27, r27
    4bb2:	51 e1       	ldi	r21, 0x11	; 17
    4bb4:	07 c0       	rjmp	.+14     	; 0x4bc4 <__udivmodhi4_ep>

00004bb6 <__udivmodhi4_loop>:
    4bb6:	aa 1f       	adc	r26, r26
    4bb8:	bb 1f       	adc	r27, r27
    4bba:	a6 17       	cp	r26, r22
    4bbc:	b7 07       	cpc	r27, r23
    4bbe:	10 f0       	brcs	.+4      	; 0x4bc4 <__udivmodhi4_ep>
    4bc0:	a6 1b       	sub	r26, r22
    4bc2:	b7 0b       	sbc	r27, r23

00004bc4 <__udivmodhi4_ep>:
    4bc4:	88 1f       	adc	r24, r24
    4bc6:	99 1f       	adc	r25, r25
    4bc8:	5a 95       	dec	r21
    4bca:	a9 f7       	brne	.-22     	; 0x4bb6 <__udivmodhi4_loop>
    4bcc:	80 95       	com	r24
    4bce:	90 95       	com	r25
    4bd0:	bc 01       	movw	r22, r24
    4bd2:	cd 01       	movw	r24, r26
    4bd4:	08 95       	ret

00004bd6 <__prologue_saves__>:
    4bd6:	2f 92       	push	r2
    4bd8:	3f 92       	push	r3
    4bda:	4f 92       	push	r4
    4bdc:	5f 92       	push	r5
    4bde:	6f 92       	push	r6
    4be0:	7f 92       	push	r7
    4be2:	8f 92       	push	r8
    4be4:	9f 92       	push	r9
    4be6:	af 92       	push	r10
    4be8:	bf 92       	push	r11
    4bea:	cf 92       	push	r12
    4bec:	df 92       	push	r13
    4bee:	ef 92       	push	r14
    4bf0:	ff 92       	push	r15
    4bf2:	0f 93       	push	r16
    4bf4:	1f 93       	push	r17
    4bf6:	cf 93       	push	r28
    4bf8:	df 93       	push	r29
    4bfa:	cd b7       	in	r28, 0x3d	; 61
    4bfc:	de b7       	in	r29, 0x3e	; 62
    4bfe:	ca 1b       	sub	r28, r26
    4c00:	db 0b       	sbc	r29, r27
    4c02:	0f b6       	in	r0, 0x3f	; 63
    4c04:	f8 94       	cli
    4c06:	de bf       	out	0x3e, r29	; 62
    4c08:	0f be       	out	0x3f, r0	; 63
    4c0a:	cd bf       	out	0x3d, r28	; 61
    4c0c:	09 94       	ijmp

00004c0e <__epilogue_restores__>:
    4c0e:	2a 88       	ldd	r2, Y+18	; 0x12
    4c10:	39 88       	ldd	r3, Y+17	; 0x11
    4c12:	48 88       	ldd	r4, Y+16	; 0x10
    4c14:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c16:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c18:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c20:	b9 84       	ldd	r11, Y+9	; 0x09
    4c22:	c8 84       	ldd	r12, Y+8	; 0x08
    4c24:	df 80       	ldd	r13, Y+7	; 0x07
    4c26:	ee 80       	ldd	r14, Y+6	; 0x06
    4c28:	fd 80       	ldd	r15, Y+5	; 0x05
    4c2a:	0c 81       	ldd	r16, Y+4	; 0x04
    4c2c:	1b 81       	ldd	r17, Y+3	; 0x03
    4c2e:	aa 81       	ldd	r26, Y+2	; 0x02
    4c30:	b9 81       	ldd	r27, Y+1	; 0x01
    4c32:	ce 0f       	add	r28, r30
    4c34:	d1 1d       	adc	r29, r1
    4c36:	0f b6       	in	r0, 0x3f	; 63
    4c38:	f8 94       	cli
    4c3a:	de bf       	out	0x3e, r29	; 62
    4c3c:	0f be       	out	0x3f, r0	; 63
    4c3e:	cd bf       	out	0x3d, r28	; 61
    4c40:	ed 01       	movw	r28, r26
    4c42:	08 95       	ret

00004c44 <ceil>:
    4c44:	3b d0       	rcall	.+118    	; 0x4cbc <__fp_trunc>
    4c46:	80 f0       	brcs	.+32     	; 0x4c68 <ceil+0x24>
    4c48:	9f 37       	cpi	r25, 0x7F	; 127
    4c4a:	40 f4       	brcc	.+16     	; 0x4c5c <ceil+0x18>
    4c4c:	91 11       	cpse	r25, r1
    4c4e:	0e f4       	brtc	.+2      	; 0x4c52 <ceil+0xe>
    4c50:	4d c0       	rjmp	.+154    	; 0x4cec <__fp_szero>
    4c52:	60 e0       	ldi	r22, 0x00	; 0
    4c54:	70 e0       	ldi	r23, 0x00	; 0
    4c56:	80 e8       	ldi	r24, 0x80	; 128
    4c58:	9f e3       	ldi	r25, 0x3F	; 63
    4c5a:	08 95       	ret
    4c5c:	26 f0       	brts	.+8      	; 0x4c66 <ceil+0x22>
    4c5e:	1b 16       	cp	r1, r27
    4c60:	61 1d       	adc	r22, r1
    4c62:	71 1d       	adc	r23, r1
    4c64:	81 1d       	adc	r24, r1
    4c66:	01 c0       	rjmp	.+2      	; 0x4c6a <__fp_mintl>
    4c68:	1b c0       	rjmp	.+54     	; 0x4ca0 <__fp_mpack>

00004c6a <__fp_mintl>:
    4c6a:	88 23       	and	r24, r24
    4c6c:	71 f4       	brne	.+28     	; 0x4c8a <__fp_mintl+0x20>
    4c6e:	77 23       	and	r23, r23
    4c70:	21 f0       	breq	.+8      	; 0x4c7a <__fp_mintl+0x10>
    4c72:	98 50       	subi	r25, 0x08	; 8
    4c74:	87 2b       	or	r24, r23
    4c76:	76 2f       	mov	r23, r22
    4c78:	07 c0       	rjmp	.+14     	; 0x4c88 <__fp_mintl+0x1e>
    4c7a:	66 23       	and	r22, r22
    4c7c:	11 f4       	brne	.+4      	; 0x4c82 <__fp_mintl+0x18>
    4c7e:	99 27       	eor	r25, r25
    4c80:	0d c0       	rjmp	.+26     	; 0x4c9c <__fp_mintl+0x32>
    4c82:	90 51       	subi	r25, 0x10	; 16
    4c84:	86 2b       	or	r24, r22
    4c86:	70 e0       	ldi	r23, 0x00	; 0
    4c88:	60 e0       	ldi	r22, 0x00	; 0
    4c8a:	2a f0       	brmi	.+10     	; 0x4c96 <__fp_mintl+0x2c>
    4c8c:	9a 95       	dec	r25
    4c8e:	66 0f       	add	r22, r22
    4c90:	77 1f       	adc	r23, r23
    4c92:	88 1f       	adc	r24, r24
    4c94:	da f7       	brpl	.-10     	; 0x4c8c <__fp_mintl+0x22>
    4c96:	88 0f       	add	r24, r24
    4c98:	96 95       	lsr	r25
    4c9a:	87 95       	ror	r24
    4c9c:	97 f9       	bld	r25, 7
    4c9e:	08 95       	ret

00004ca0 <__fp_mpack>:
    4ca0:	9f 3f       	cpi	r25, 0xFF	; 255
    4ca2:	31 f0       	breq	.+12     	; 0x4cb0 <__fp_mpack_finite+0xc>

00004ca4 <__fp_mpack_finite>:
    4ca4:	91 50       	subi	r25, 0x01	; 1
    4ca6:	20 f4       	brcc	.+8      	; 0x4cb0 <__fp_mpack_finite+0xc>
    4ca8:	87 95       	ror	r24
    4caa:	77 95       	ror	r23
    4cac:	67 95       	ror	r22
    4cae:	b7 95       	ror	r27
    4cb0:	88 0f       	add	r24, r24
    4cb2:	91 1d       	adc	r25, r1
    4cb4:	96 95       	lsr	r25
    4cb6:	87 95       	ror	r24
    4cb8:	97 f9       	bld	r25, 7
    4cba:	08 95       	ret

00004cbc <__fp_trunc>:
    4cbc:	25 d0       	rcall	.+74     	; 0x4d08 <__fp_splitA>
    4cbe:	a0 f0       	brcs	.+40     	; 0x4ce8 <__fp_trunc+0x2c>
    4cc0:	be e7       	ldi	r27, 0x7E	; 126
    4cc2:	b9 17       	cp	r27, r25
    4cc4:	88 f4       	brcc	.+34     	; 0x4ce8 <__fp_trunc+0x2c>
    4cc6:	bb 27       	eor	r27, r27
    4cc8:	9f 38       	cpi	r25, 0x8F	; 143
    4cca:	60 f4       	brcc	.+24     	; 0x4ce4 <__fp_trunc+0x28>
    4ccc:	16 16       	cp	r1, r22
    4cce:	b1 1d       	adc	r27, r1
    4cd0:	67 2f       	mov	r22, r23
    4cd2:	78 2f       	mov	r23, r24
    4cd4:	88 27       	eor	r24, r24
    4cd6:	98 5f       	subi	r25, 0xF8	; 248
    4cd8:	f7 cf       	rjmp	.-18     	; 0x4cc8 <__fp_trunc+0xc>
    4cda:	86 95       	lsr	r24
    4cdc:	77 95       	ror	r23
    4cde:	67 95       	ror	r22
    4ce0:	b1 1d       	adc	r27, r1
    4ce2:	93 95       	inc	r25
    4ce4:	96 39       	cpi	r25, 0x96	; 150
    4ce6:	c8 f3       	brcs	.-14     	; 0x4cda <__fp_trunc+0x1e>
    4ce8:	08 95       	ret

00004cea <__fp_zero>:
    4cea:	e8 94       	clt

00004cec <__fp_szero>:
    4cec:	bb 27       	eor	r27, r27
    4cee:	66 27       	eor	r22, r22
    4cf0:	77 27       	eor	r23, r23
    4cf2:	cb 01       	movw	r24, r22
    4cf4:	97 f9       	bld	r25, 7
    4cf6:	08 95       	ret

00004cf8 <__fp_split3>:
    4cf8:	57 fd       	sbrc	r21, 7
    4cfa:	90 58       	subi	r25, 0x80	; 128
    4cfc:	44 0f       	add	r20, r20
    4cfe:	55 1f       	adc	r21, r21
    4d00:	59 f0       	breq	.+22     	; 0x4d18 <__fp_splitA+0x10>
    4d02:	5f 3f       	cpi	r21, 0xFF	; 255
    4d04:	71 f0       	breq	.+28     	; 0x4d22 <__fp_splitA+0x1a>
    4d06:	47 95       	ror	r20

00004d08 <__fp_splitA>:
    4d08:	88 0f       	add	r24, r24
    4d0a:	97 fb       	bst	r25, 7
    4d0c:	99 1f       	adc	r25, r25
    4d0e:	61 f0       	breq	.+24     	; 0x4d28 <__fp_splitA+0x20>
    4d10:	9f 3f       	cpi	r25, 0xFF	; 255
    4d12:	79 f0       	breq	.+30     	; 0x4d32 <__fp_splitA+0x2a>
    4d14:	87 95       	ror	r24
    4d16:	08 95       	ret
    4d18:	12 16       	cp	r1, r18
    4d1a:	13 06       	cpc	r1, r19
    4d1c:	14 06       	cpc	r1, r20
    4d1e:	55 1f       	adc	r21, r21
    4d20:	f2 cf       	rjmp	.-28     	; 0x4d06 <__fp_split3+0xe>
    4d22:	46 95       	lsr	r20
    4d24:	f1 df       	rcall	.-30     	; 0x4d08 <__fp_splitA>
    4d26:	08 c0       	rjmp	.+16     	; 0x4d38 <__fp_splitA+0x30>
    4d28:	16 16       	cp	r1, r22
    4d2a:	17 06       	cpc	r1, r23
    4d2c:	18 06       	cpc	r1, r24
    4d2e:	99 1f       	adc	r25, r25
    4d30:	f1 cf       	rjmp	.-30     	; 0x4d14 <__fp_splitA+0xc>
    4d32:	86 95       	lsr	r24
    4d34:	71 05       	cpc	r23, r1
    4d36:	61 05       	cpc	r22, r1
    4d38:	08 94       	sec
    4d3a:	08 95       	ret

00004d3c <_exit>:
    4d3c:	f8 94       	cli

00004d3e <__stop_program>:
    4d3e:	ff cf       	rjmp	.-2      	; 0x4d3e <__stop_program>
